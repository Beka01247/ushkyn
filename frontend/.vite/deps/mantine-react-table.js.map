{
  "version": 3,
  "sources": ["../../node_modules/dayjs/plugin/timezone.js", "../../node_modules/dayjs/plugin/utc.js", "../../node_modules/@tanstack/table-core/src/columnHelper.ts", "../../node_modules/@tanstack/table-core/src/utils.ts", "../../node_modules/@tanstack/table-core/src/core/cell.ts", "../../node_modules/@tanstack/table-core/src/core/column.ts", "../../node_modules/@tanstack/table-core/src/core/headers.ts", "../../node_modules/@tanstack/table-core/src/core/row.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnFaceting.ts", "../../node_modules/@tanstack/table-core/src/filterFns.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnFiltering.ts", "../../node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnGrouping.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnOrdering.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnPinning.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnVisibility.ts", "../../node_modules/@tanstack/table-core/src/features/GlobalFaceting.ts", "../../node_modules/@tanstack/table-core/src/features/GlobalFiltering.ts", "../../node_modules/@tanstack/table-core/src/features/RowExpanding.ts", "../../node_modules/@tanstack/table-core/src/features/RowPagination.ts", "../../node_modules/@tanstack/table-core/src/features/RowPinning.ts", "../../node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../node_modules/@tanstack/table-core/src/sortingFns.ts", "../../node_modules/@tanstack/table-core/src/features/RowSorting.ts", "../../node_modules/@tanstack/table-core/src/core/table.ts", "../../node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../node_modules/@tanstack/react-table/src/index.tsx", "../../node_modules/@tanstack/match-sorter-utils/src/remove-accents.ts", "../../node_modules/@tanstack/match-sorter-utils/src/index.ts", "../../node_modules/@tanstack/virtual-core/src/utils.ts", "../../node_modules/@tanstack/virtual-core/src/index.ts", "../../node_modules/@tanstack/react-virtual/src/index.tsx", "../../node_modules/@mantine/dates/src/utils/get-formatted-date.ts", "../../node_modules/@mantine/dates/src/utils/handle-control-key-down.ts", "../../node_modules/@mantine/dates/src/utils/assign-time/assign-time.ts", "../../node_modules/@mantine/dates/src/utils/get-timezone-offset.ts", "../../node_modules/@mantine/dates/src/utils/shift-timezone.ts", "../../node_modules/@mantine/dates/src/utils/get-default-clamped-date.ts", "../../node_modules/@mantine/dates/src/components/DatesProvider/DatesProvider.tsx", "../../node_modules/@mantine/dates/src/components/DatesProvider/use-dates-context.ts", "../../node_modules/@mantine/dates/src/components/HiddenDatesInput/HiddenDatesInput.tsx", "../../node_modules/@mantine/dates/esm/components/TimeInput/TimeInput.module.css.mjs", "../../node_modules/@mantine/dates/src/components/TimeInput/TimeInput.tsx", "../../node_modules/@mantine/dates/esm/components/Day/Day.module.css.mjs", "../../node_modules/@mantine/dates/src/components/Day/Day.tsx", "../../node_modules/@mantine/dates/src/components/WeekdaysRow/get-weekdays-names/get-weekdays-names.ts", "../../node_modules/@mantine/dates/esm/components/WeekdaysRow/WeekdaysRow.module.css.mjs", "../../node_modules/@mantine/dates/src/components/WeekdaysRow/WeekdaysRow.tsx", "../../node_modules/@mantine/dates/src/components/Month/get-end-of-week/get-end-of-week.ts", "../../node_modules/@mantine/dates/src/components/Month/get-start-of-week/get-start-of-week.ts", "../../node_modules/@mantine/dates/src/components/Month/get-month-days/get-month-days.ts", "../../node_modules/@mantine/dates/src/components/Month/is-same-month/is-same-month.ts", "../../node_modules/@mantine/dates/src/components/Month/is-after-min-date/is-after-min-date.ts", "../../node_modules/@mantine/dates/src/components/Month/is-before-max-date/is-before-max-date.ts", "../../node_modules/@mantine/dates/src/components/Month/get-date-in-tab-order/get-date-in-tab-order.ts", "../../node_modules/@mantine/dates/esm/components/Month/Month.module.css.mjs", "../../node_modules/@mantine/dates/src/components/Month/Month.tsx", "../../node_modules/@mantine/dates/esm/components/PickerControl/PickerControl.module.css.mjs", "../../node_modules/@mantine/dates/src/components/PickerControl/PickerControl.tsx", "../../node_modules/@mantine/dates/src/components/YearsList/is-year-disabled/is-year-disabled.ts", "../../node_modules/@mantine/dates/src/components/YearsList/get-year-in-tab-order/get-year-in-tab-order.ts", "../../node_modules/@mantine/dates/src/components/YearsList/get-years-data/get-years-data.ts", "../../node_modules/@mantine/dates/esm/components/YearsList/YearsList.module.css.mjs", "../../node_modules/@mantine/dates/src/components/YearsList/YearsList.tsx", "../../node_modules/@mantine/dates/src/components/MonthsList/is-month-disabled/is-month-disabled.ts", "../../node_modules/@mantine/dates/src/components/MonthsList/get-month-in-tab-order/get-month-in-tab-order.ts", "../../node_modules/@mantine/dates/src/components/MonthsList/get-months-data/get-months-data.ts", "../../node_modules/@mantine/dates/esm/components/MonthsList/MonthsList.module.css.mjs", "../../node_modules/@mantine/dates/src/components/MonthsList/MonthsList.tsx", "../../node_modules/@mantine/dates/esm/components/CalendarHeader/CalendarHeader.module.css.mjs", "../../node_modules/@mantine/dates/src/components/CalendarHeader/CalendarHeader.tsx", "../../node_modules/@mantine/dates/src/components/DecadeLevel/get-decade-range/get-decade-range.ts", "../../node_modules/@mantine/dates/src/components/DecadeLevel/DecadeLevel.tsx", "../../node_modules/@mantine/dates/src/components/YearLevel/YearLevel.tsx", "../../node_modules/@mantine/dates/src/components/MonthLevel/MonthLevel.tsx", "../../node_modules/@mantine/dates/esm/components/LevelsGroup/LevelsGroup.module.css.mjs", "../../node_modules/@mantine/dates/src/components/LevelsGroup/LevelsGroup.tsx", "../../node_modules/@mantine/dates/src/components/DecadeLevelGroup/DecadeLevelGroup.tsx", "../../node_modules/@mantine/dates/src/components/YearLevelGroup/YearLevelGroup.tsx", "../../node_modules/@mantine/dates/src/components/MonthLevelGroup/MonthLevelGroup.tsx", "../../node_modules/@mantine/dates/esm/components/PickerInputBase/PickerInputBase.module.css.mjs", "../../node_modules/@mantine/dates/src/components/PickerInputBase/PickerInputBase.tsx", "../../node_modules/@mantine/dates/src/hooks/use-uncontrolled-dates/use-uncontrolled-dates.ts", "../../node_modules/@mantine/dates/src/components/Calendar/clamp-level/clamp-level.ts", "../../node_modules/@mantine/dates/src/components/Calendar/Calendar.tsx", "../../node_modules/@mantine/dates/src/components/Calendar/pick-calendar-levels-props/pick-calendar-levels-props.ts", "../../node_modules/@mantine/dates/src/hooks/use-dates-state/is-in-range/is-in-range.ts", "../../node_modules/@mantine/dates/src/hooks/use-dates-state/use-dates-state.ts", "../../node_modules/@mantine/dates/src/components/YearPicker/YearPicker.tsx", "../../node_modules/@mantine/dates/src/components/MonthPicker/MonthPicker.tsx", "../../node_modules/@mantine/dates/src/components/DatePicker/DatePicker.tsx", "../../node_modules/@mantine/dates/src/components/DateInput/date-string-parser/date-string-parser.ts", "../../node_modules/@mantine/dates/src/components/DateInput/is-date-valid/is-date-valid.ts", "../../node_modules/@mantine/dates/src/components/DateInput/DateInput.tsx", "../../node_modules/@mantine/dates/esm/components/DateTimePicker/DateTimePicker.module.css.mjs", "../../node_modules/@mantine/dates/src/components/DateTimePicker/DateTimePicker.tsx", "../../node_modules/@mantine/dates/src/hooks/use-dates-input/use-dates-input.ts", "../../node_modules/@mantine/dates/src/components/YearPickerInput/YearPickerInput.tsx", "../../node_modules/@mantine/dates/src/components/MonthPickerInput/MonthPickerInput.tsx", "../../node_modules/@mantine/dates/src/components/DatePickerInput/DatePickerInput.tsx", "../../node_modules/mantine-react-table/src/utils/column.utils.ts", "../../node_modules/mantine-react-table/src/utils/tanstack.helpers.ts", "../../node_modules/mantine-react-table/src/utils/displayColumn.utils.ts", "../../node_modules/mantine-react-table/src/fns/sortingFns.ts", "../../node_modules/mantine-react-table/src/utils/utils.ts", "../../node_modules/mantine-react-table/src/utils/row.utils.ts", "../../node_modules/mantine-react-table/src/utils/style.utils.ts", "../../node_modules/mantine-react-table/src/fns/aggregationFns.ts", "../../node_modules/mantine-react-table/src/fns/filterFns.ts", "../../node_modules/.pnpm/@rollup+plugin-typescript@11.1.6_rollup@4.17.2_tslib@2.6.2_typescript@5.4.5/node_modules/tslib/tslib.es6.js", "../../node_modules/mantine-react-table/src/components/buttons/MRT_EditActionButtons.tsx", "../../node_modules/mantine-react-table/src/components/menus/MRT_RowActionMenu.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ToggleRowActionMenuButton.tsx", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowActionsColumnDef.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_GrabHandleButton.tsx", "../../node_modules/mantine-react-table/src/components/body/MRT_TableBodyRowGrabHandle.tsx", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowDragColumnDef.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ExpandAllButton.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ExpandButton.tsx", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowExpandColumnDef.tsx", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowNumbersColumnDef.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_RowPinButton.tsx", "../../node_modules/mantine-react-table/src/components/body/MRT_TableBodyRowPinButton.tsx", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowPinningColumnDef.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_SelectCheckbox.tsx", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowSelectColumnDef.tsx", "../../node_modules/mantine-react-table/src/icons.ts", "../../node_modules/mantine-react-table/src/locales/en.ts", "../../node_modules/mantine-react-table/src/hooks/useMRT_TableOptions.ts", "../../node_modules/mantine-react-table/src/hooks/display-columns/getMRT_RowSpacerColumnDef.tsx", "../../node_modules/mantine-react-table/src/hooks/useMRT_Effects.ts", "../../node_modules/mantine-react-table/src/hooks/useMRT_TableInstance.ts", "../../node_modules/mantine-react-table/src/hooks/useMantineReactTable.ts", "../../node_modules/mantine-react-table/src/utils/virtualization.utils.ts", "../../node_modules/mantine-react-table/src/hooks/useMRT_ColumnVirtualizer.ts", "../../node_modules/mantine-react-table/src/hooks/useMRT_RowVirtualizer.ts", "../../node_modules/mantine-react-table/src/hooks/useMRT_Rows.ts", "../../node_modules/mantine-react-table/src/components/body/MRT_TableBodyCellValue.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_CopyButton.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_EditCellTextInput.tsx", "../../node_modules/mantine-react-table/src/components/body/MRT_TableBodyCell.tsx", "../../node_modules/mantine-react-table/src/components/body/MRT_TableDetailPanel.tsx", "../../node_modules/mantine-react-table/src/components/body/MRT_TableBodyRow.tsx", "../../node_modules/mantine-react-table/src/components/body/MRT_TableBody.tsx", "../../node_modules/mantine-react-table/src/components/footer/MRT_TableFooterCell.tsx", "../../node_modules/mantine-react-table/src/components/footer/MRT_TableFooterRow.tsx", "../../node_modules/mantine-react-table/src/components/footer/MRT_TableFooter.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_FilterCheckbox.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_FilterTextInput.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_FilterRangeFields.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_FilterRangeSlider.tsx", "../../node_modules/mantine-react-table/src/components/menus/MRT_FilterOptionMenu.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadCellFilterContainer.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadCellFilterLabel.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadCellGrabHandle.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadCellResizeHandle.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadCellSortLabel.tsx", "../../node_modules/mantine-react-table/src/components/menus/MRT_ColumnActionMenu.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadCell.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHeadRow.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_ToolbarAlertBanner.tsx", "../../node_modules/mantine-react-table/src/components/head/MRT_TableHead.tsx", "../../node_modules/mantine-react-table/src/components/table/MRT_Table.tsx", "../../node_modules/mantine-react-table/src/components/modals/MRT_EditRowModal.tsx", "../../node_modules/mantine-react-table/src/components/table/MRT_TableContainer.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_ProgressBar.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_TablePagination.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_ToolbarDropZone.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_BottomToolbar.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ColumnPinningButtons.tsx", "../../node_modules/mantine-react-table/src/components/menus/MRT_ShowHideColumnsMenuItems.tsx", "../../node_modules/mantine-react-table/src/components/menus/MRT_ShowHideColumnsMenu.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ShowHideColumnsButton.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ToggleDensePaddingButton.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ToggleFiltersButton.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ToggleFullScreenButton.tsx", "../../node_modules/mantine-react-table/src/components/buttons/MRT_ToggleGlobalFilterButton.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_ToolbarInternalButtons.tsx", "../../node_modules/mantine-react-table/src/components/inputs/MRT_GlobalFilterTextInput.tsx", "../../node_modules/mantine-react-table/src/components/toolbar/MRT_TopToolbar.tsx", "../../node_modules/mantine-react-table/src/components/table/MRT_TablePaper.tsx", "../../node_modules/mantine-react-table/src/components/MantineReactTable.tsx"],
  "sourcesContent": ["!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs_plugin_timezone=e()}(this,(function(){\"use strict\";var t={year:0,month:1,day:2,hour:3,minute:4,second:5},e={};return function(n,i,o){var r,a=function(t,n,i){void 0===i&&(i={});var o=new Date(t),r=function(t,n){void 0===n&&(n={});var i=n.timeZoneName||\"short\",o=t+\"|\"+i,r=e[o];return r||(r=new Intl.DateTimeFormat(\"en-US\",{hour12:!1,timeZone:t,year:\"numeric\",month:\"2-digit\",day:\"2-digit\",hour:\"2-digit\",minute:\"2-digit\",second:\"2-digit\",timeZoneName:i}),e[o]=r),r}(n,i);return r.formatToParts(o)},u=function(e,n){for(var i=a(e,n),r=[],u=0;u<i.length;u+=1){var f=i[u],s=f.type,m=f.value,c=t[s];c>=0&&(r[c]=parseInt(m,10))}var d=r[3],l=24===d?0:d,h=r[0]+\"-\"+r[1]+\"-\"+r[2]+\" \"+l+\":\"+r[4]+\":\"+r[5]+\":000\",v=+e;return(o.utc(h).valueOf()-(v-=v%1e3))/6e4},f=i.prototype;f.tz=function(t,e){void 0===t&&(t=r);var n=this.utcOffset(),i=this.toDate(),a=i.toLocaleString(\"en-US\",{timeZone:t}),u=Math.round((i-new Date(a))/1e3/60),f=o(a,{locale:this.$L}).$set(\"millisecond\",this.$ms).utcOffset(15*-Math.round(i.getTimezoneOffset()/15)-u,!0);if(e){var s=f.utcOffset();f=f.add(n-s,\"minute\")}return f.$x.$timezone=t,f},f.offsetName=function(t){var e=this.$x.$timezone||o.tz.guess(),n=a(this.valueOf(),e,{timeZoneName:t}).find((function(t){return\"timezonename\"===t.type.toLowerCase()}));return n&&n.value};var s=f.startOf;f.startOf=function(t,e){if(!this.$x||!this.$x.$timezone)return s.call(this,t,e);var n=o(this.format(\"YYYY-MM-DD HH:mm:ss:SSS\"),{locale:this.$L});return s.call(n,t,e).tz(this.$x.$timezone,!0)},o.tz=function(t,e,n){var i=n&&e,a=n||e||r,f=u(+o(),a);if(\"string\"!=typeof t)return o(t).tz(a);var s=function(t,e,n){var i=t-60*e*1e3,o=u(i,n);if(e===o)return[i,e];var r=u(i-=60*(o-e)*1e3,n);return o===r?[i,o]:[t-60*Math.min(o,r)*1e3,Math.max(o,r)]}(o.utc(t,i).valueOf(),f,a),m=s[0],c=s[1],d=o(m).utcOffset(c);return d.$x.$timezone=a,d},o.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},o.tz.setDefault=function(t){r=t}}}));", "!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs_plugin_utc=i()}(this,(function(){\"use strict\";var t=\"minute\",i=/[+-]\\d\\d(?::?\\d\\d)?/g,e=/([+-]|\\d\\d)/g;return function(s,f,n){var u=f.prototype;n.utc=function(t){var i={date:t,utc:!0,args:arguments};return new f(i)},u.utc=function(i){var e=n(this.toDate(),{locale:this.$L,utc:!0});return i?e.add(this.utcOffset(),t):e},u.local=function(){return n(this.toDate(),{locale:this.$L,utc:!1})};var o=u.parse;u.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),o.call(this,t)};var r=u.init;u.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds()}else r.call(this)};var a=u.utcOffset;u.utcOffset=function(s,f){var n=this.$utils().u;if(n(s))return this.$u?0:n(this.$offset)?a.call(this):this.$offset;if(\"string\"==typeof s&&(s=function(t){void 0===t&&(t=\"\");var s=t.match(i);if(!s)return null;var f=(\"\"+s[0]).match(e)||[\"-\",0,0],n=f[0],u=60*+f[1]+ +f[2];return 0===u?0:\"+\"===n?u:-u}(s),null===s))return this;var u=Math.abs(s)<=16?60*s:s,o=this;if(f)return o.$offset=u,o.$u=0===s,o;if(0!==s){var r=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(o=this.local().add(u+r,t)).$offset=u,o.$x.$localOffset=r}else o=this.utc();return o};var h=u.format;u.format=function(t){var i=t||(this.$u?\"YYYY-MM-DDTHH:mm:ss[Z]\":\"\");return h.call(this,i)},u.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*t},u.isUTC=function(){return!!this.$u},u.toISOString=function(){return this.toDate().toISOString()},u.toString=function(){return this.toDate().toUTCString()};var l=u.toDate;u.toDate=function(t){return\"s\"===t&&this.$offset?n(this.format(\"YYYY-MM-DD HH:mm:ss:SSS\")).toDate():l.call(this)};var c=u.diff;u.diff=function(t,i,e){if(t&&this.$u===t.$u)return c.call(this,t,i,e);var s=this.local(),f=n(t).local();return c.call(s,f,i,e)}}}));", "import {\n  AccessorFn,\n  AccessorFnColumnDef,\n  AccessorKeyColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n        ? DeepValue<TData, TAccessor>\n        : never,\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => TAccessor extends AccessorFn<TData>\n    ? AccessorFnColumnDef<TData, TValue>\n    : AccessorKeyColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => DisplayColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => GroupColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData,\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column,\n    group: column => column,\n  }\n}\n", "import { TableOptionsResolved, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = [],\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never,\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n    ? AllowedIndexes<Tail, Keys | Tail['length']>\n    : Keys\n\nexport type DeepKeys<T, TDepth extends any[] = []> = TDepth['length'] extends 5\n  ? never\n  : unknown extends T\n    ? string\n    : T extends readonly any[] & IsTuple<T>\n      ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>, TDepth>\n      : T extends any[]\n        ? DeepKeys<T[number], [...TDepth, any]>\n        : T extends Date\n          ? never\n          : T extends object\n            ? (keyof T & string) | DeepKeysPrefix<T, keyof T, TDepth>\n            : never\n\ntype DeepKeysPrefix<\n  T,\n  TPrefix,\n  TDepth extends any[],\n> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix], [...TDepth, any]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TDepArgs, TResult>(\n  getDeps: (depArgs?: TDepArgs) => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): (depArgs?: TDepArgs) => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return depArgs => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps(depArgs)\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n\nexport function getMemoOptions(\n  tableOptions: Partial<TableOptionsResolved<any>>,\n  debugLevel:\n    | 'debugAll'\n    | 'debugCells'\n    | 'debugTable'\n    | 'debugColumns'\n    | 'debugRows'\n    | 'debugHeaders',\n  key: string,\n  onChange?: (result: any) => void\n) {\n  return {\n    debug: () => tableOptions?.debugAll ?? tableOptions[debugLevel],\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange,\n  }\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, getMemoOptions, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  cell: Cell<TData, TValue>\n  column: Column<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n  row: Row<TData>\n  table: Table<TData>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  /**\n   * The associated Column object for the cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  column: Column<TData, TValue>\n  /**\n   * Returns the rendering context (or props) for cell-based components like cells and aggregated cells. Use these props with your framework's `flexRender` utility to render these using the template of your choice:\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  getContext: () => CellContext<TData, TValue>\n  /**\n   * Returns the value for the cell, accessed via the associated column's accessor key or accessor function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#getvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  getValue: CellContext<TData, TValue>['getValue']\n  /**\n   * The unique ID for the cell across the entire table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  id: string\n  /**\n   * Renders the value for a cell the same as `getValue`, but will return the `renderFallbackValue` if no value is found.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#rendervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  renderValue: CellContext<TData, TValue>['renderValue']\n  /**\n   * The associated Row object for the cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#row)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  row: Row<TData>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      getMemoOptions(table.options, 'debugCells', 'cell.getContext')\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  /**\n   * The resolved accessor function to use when extracting the value for the column from each row. Will only be defined if the column def has a valid accessor key or function defined.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#accessorfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  accessorFn?: AccessorFn<TData, TValue>\n  /**\n   * The original column def used to create the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#columndef)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  columnDef: ColumnDef<TData, TValue>\n  /**\n   * The child column (if the column is a group column). Will be an empty array if the column is not a group column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#columns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  columns: Column<TData, TValue>[]\n  /**\n   * The depth of the column (if grouped) relative to the root column def array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  depth: number\n  /**\n   * Returns the flattened array of this column and all child/grand-child columns for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#getflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  getFlatColumns: () => Column<TData, TValue>[]\n  /**\n   * Returns an array of all leaf-node columns for this column. If a column has no children, it is considered the only leaf-node column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#getleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  getLeafColumns: () => Column<TData, TValue>[]\n  /**\n   * The resolved unique identifier for the column resolved in this priority:\n      - A manual `id` property from the column def\n      - The accessor key from the column def\n      - The header string from the column def\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  id: string\n  /**\n   * The parent column for this column. Will be undefined if this is a root column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#parent)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  parent?: Column<TData, TValue>\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns')\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column as Column<TData, TValue>, table)\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import {\n  RowData,\n  Column,\n  Header,\n  HeaderGroup,\n  Table,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nconst debug = 'debugHeaders'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  depth: number\n  headers: Header<TData, unknown>[]\n  id: string\n}\n\nexport interface HeaderContext<TData, TValue> {\n  /**\n   * An instance of a column.\n   */\n  column: Column<TData, TValue>\n  /**\n   * An instance of a header.\n   */\n  header: Header<TData, TValue>\n  /**\n   * The table instance.\n   */\n  table: Table<TData>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  /**\n   * The col-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#colspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  colSpan: number\n  /**\n   * The header's associated column object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  column: Column<TData, TValue>\n  /**\n   * The depth of the header, zero-indexed based.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  depth: number\n  /**\n   * Returns the rendering context (or props) for column-based components like headers, footers and filters.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getContext: () => HeaderContext<TData, TValue>\n  /**\n   * Returns the leaf headers hierarchically nested under this header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * The header's associated header group object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#headergroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  headerGroup: HeaderGroup<TData>\n  /**\n   * The unique identifier for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  id: string\n  /**\n   * The index for the header within the header group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  index: number\n  /**\n   * A boolean denoting if the header is a placeholder header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#isplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  isPlaceholder: boolean\n  /**\n   * If the header is a placeholder header, this will be a unique header ID that does not conflict with any other headers across the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#placeholderid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  placeholderId?: string\n  /**\n   * The row-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#rowspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  rowSpan: number\n  /**\n   * The header's hierarchical sub/child headers. Will be empty if the header's associated column is a leaf-column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#subheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  subHeaders: Header<TData, TValue>[]\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  /**\n   * Returns all header groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns the footer groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns headers for all columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  /**\n   * Returns headers for all leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header as Header<TData, TValue>, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      getMemoOptions(table.options, debug, 'getHeaderGroups')\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      getMemoOptions(table.options, debug, 'getCenterHeaderGroups')\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      getMemoOptions(table.options, debug, 'getLeftHeaderGroups')\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      getMemoOptions(table.options, debug, 'getRightHeaderGroups')\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getFooterGroups')\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getLeftFooterGroups')\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getCenterFooterGroups')\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getRightFooterGroups')\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getFlatHeaders')\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getLeftFlatHeaders')\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getCenterFlatHeaders')\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getRightFlatHeaders')\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getCenterLeafHeaders')\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getLeftLeafHeaders')\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getRightLeafHeaders')\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getLeafHeaders')\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, getMemoOptions, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  _uniqueValuesCache: Record<string, unknown>\n  _valuesCache: Record<string, unknown>\n  /**\n   * The depth of the row (if nested or grouped) relative to the root row array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  depth: number\n  /**\n   * Returns all of the cells for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getallcells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getAllCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns the leaf rows for the row, not including any parent rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getleafrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getLeafRows: () => Row<TData>[]\n  /**\n   * Returns the parent row for the row, if it exists.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getparentrow)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getParentRow: () => Row<TData> | undefined\n  /**\n   * Returns the parent rows for the row, all the way up to a root row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getparentrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getParentRows: () => Row<TData>[]\n  /**\n   * Returns a unique array of values from the row for a given columnId.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getuniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  /**\n   * Returns the value from the row for a given columnId.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getValue: <TValue>(columnId: string) => TValue\n  /**\n   * The resolved unique identifier for the row resolved via the `options.getRowId` option. Defaults to the row's index (or relative index if it is a subRow).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  id: string\n  /**\n   * The index of the row within its parent array (or the root data array).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  index: number\n  /**\n   * The original row object provided to the table. If the row is a grouped row, the original row object will be the first original in the group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#original)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  original: TData\n  /**\n   * An array of the original subRows as returned by the `options.getSubRows` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#originalsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  originalSubRows?: TData[]\n  /**\n   * If nested, this row's parent row id.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#parentid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  parentId?: string\n  /**\n   * Renders the value for the row in a given columnId the same as `getValue`, but will return the `renderFallbackValue` if no value is found.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#rendervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  renderValue: <TValue>(columnId: string) => TValue\n  /**\n   * An array of subRows for the row as returned and created by the `options.getSubRows` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#subrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  subRows: Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () =>\n      row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      getMemoOptions(table.options, 'debugRows', 'getAllCells')\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce(\n          (acc, cell) => {\n            acc[cell.column.id] = cell\n            return acc\n          },\n          {} as Record<string, Cell<TData, unknown>>\n        )\n      },\n      getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId')\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row as Row<TData>, table)\n  }\n\n  return row as Row<TData>\n}\n", "import { RowModel } from '..'\nimport { Column, RowData, Table, TableFeature } from '../types'\n\nexport interface FacetedColumn<TData extends RowData> {\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n  _getFacetedRowModel?: () => RowModel<TData>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  /**\n   * A function that **computes and returns** a min/max tuple derived from `column.getFacetedRowModel`. Useful for displaying faceted result values.\n   * > ⚠️ Requires that you pass a valid `getFacetedMinMaxValues` function to `options.getFacetedMinMaxValues`. A default implementation is provided via the exported `getFacetedMinMaxValues` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfacetedminmaxvalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  /**\n   * Returns the row model with all other column filters applied, excluding its own filter. Useful for displaying faceted result counts.\n   * > ⚠️ Requires that you pass a valid `getFacetedRowModel` function to `options.facetedRowModel`. A default implementation is provided via the exported `getFacetedRowModel` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfacetedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedRowModel: () => RowModel<TData>\n  /**\n   * A function that **computes and returns** a `Map` of unique values and their occurrences derived from `column.getFacetedRowModel`. Useful for displaying faceted result values.\n   * > ⚠️ Requires that you pass a valid `getFacetedUniqueValues` function to `options.getFacetedUniqueValues`. A default implementation is provided via the exported `getFacetedUniqueValues` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfaceteduniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedUniqueValues: () => Map<any, number>\n}\n\nexport interface FacetedOptions<TData extends RowData> {\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n}\n\n//\n\nexport const ColumnFaceting: TableFeature = {\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n  },\n}\n", "import { FilterFn } from './features/ColumnFiltering'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(\n    val => row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  FilterFns,\n  FilterMeta,\n  OnChangeFn,\n  Row,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface ColumnFiltersTableState {\n  columnFilters: ColumnFiltersState\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  filterFn: FilterFn<TData>\n  id: string\n  resolvedValue: unknown\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n  resolveFilterValue?: TransformFilterValueFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface ColumnFiltersColumnDef<TData extends RowData> {\n  /**\n   * Enables/disables the **column** filter for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablecolumnfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableColumnFilter?: boolean\n  /**\n   * The filter function to use with this column. Can be the name of a built-in filter function or a custom filter function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#filterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  filterFn?: FilterFnOption<TData>\n}\n\nexport interface ColumnFiltersColumn<TData extends RowData> {\n  /**\n   * Returns an automatically calculated filter function for the column based off of the columns first known value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns whether or not the column can be **column** filtered.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getcanfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getCanFilter: () => boolean\n  /**\n   * Returns the filter function (either user-defined or automatic, depending on configuration) for the columnId specified.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns the index (including `-1`) of the column filter in the table's `state.columnFilters` array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilterindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterIndex: () => number\n  /**\n   * Returns the current filter value for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfiltervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterValue: () => unknown\n  /**\n   * Returns whether or not the column is currently filtered.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getisfiltered)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getIsFiltered: () => boolean\n  /**\n   * A function that sets the current filter value for the column. You can pass it a value or an updater function for immutability-safe operations on existing values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setfiltervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setFilterValue: (updater: Updater<any>) => void\n}\n\nexport interface ColumnFiltersRow<TData extends RowData> {\n  /**\n   * The column filters map for the row. This object tracks whether a row is passing/failing specific filters by their column ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#columnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  columnFilters: Record<string, boolean>\n  /**\n   * The column filters meta map for the row. This object tracks any filter meta for a row as optionally provided during the filtering process.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#columnfiltersmeta)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface ColumnFiltersOptionsBase<TData extends RowData> {\n  /**\n   * Enables/disables **column** filtering for all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablecolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableColumnFilters?: boolean\n  /**\n   * Enables/disables all filtering for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablefilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableFilters?: boolean\n  /**\n   * By default, filtering is done from parent rows down (so if a parent row is filtered out, all of its children will be filtered out as well). Setting this option to `true` will cause filtering to be done from leaf rows up (which means parent rows will be included so long as one of their child or grand-child rows is also included).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#filterfromleafrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  filterFromLeafRows?: boolean\n  /**\n   * If provided, this function is called **once** per table and should return a **new function** which will calculate and return the row model for the table when it's filtered.\n   * - For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n   * - For client-side filtering, this function is required. A default implementation is provided via any table adapter's `{ getFilteredRowModel }` export.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Disables the `getFilteredRowModel` from being used to filter data. This may be useful if your table needs to dynamically support both client-side and server-side filtering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#manualfiltering)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  manualFiltering?: boolean\n  /**\n   * By default, filtering is done for all rows (max depth of 100), no matter if they are root level parent rows or the child leaf rows of a parent row. Setting this option to `0` will cause filtering to only be applied to the root level parent rows, with all sub-rows remaining unfiltered. Similarly, setting this option to `1` will cause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\n   * This is useful for situations where you want a row's entire child hierarchy to be visible regardless of the applied filter.\n    * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#maxleafrowfilterdepth)\n    * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  maxLeafRowFilterDepth?: number\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnFilters` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#oncolumnfilterschange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface ColumnFiltersOptions<TData extends RowData>\n  extends ColumnFiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface ColumnFiltersInstance<TData extends RowData> {\n  _getFilteredRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after **column** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilteredRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any **column** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getprefilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getPreFilteredRowModel: () => RowModel<TData>\n  /**\n   * Resets the **columnFilters** state to `initialState.columnFilters`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#resetcolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  resetColumnFilters: (defaultState?: boolean) => void\n  /**\n   * Resets the **globalFilter** state to `initialState.globalFilter`, or `true` can be passed to force a default blank state reset to `undefined`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#resetglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  resetGlobalFilter: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnFilters` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setcolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  /**\n   * Sets or updates the `state.globalFilter` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setGlobalFilter: (updater: Updater<any>) => void\n}\n\n//\n\nexport const ColumnFiltering: TableFeature = {\n  getDefaultColumnDef: <\n    TData extends RowData,\n  >(): ColumnFiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): ColumnFiltersTableState => {\n    return {\n      columnFilters: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnFiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n    } as ColumnFiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : // @ts-ignore\n            table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousFilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousFilter ? previousFilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousFilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    _table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/ColumnGrouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport {\n  AggregationFns,\n  Cell,\n  Column,\n  ColumnDefTemplate,\n  OnChangeFn,\n  Row,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  /**\n   * The cell to display each row for the column if the cell is an aggregate. If a function is passed, it will be passed a props object with the context of the cell and should return the property type for your adapter (the exact type depends on the adapter being used).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#aggregatedcell)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  /**\n   * The resolved aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#aggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  aggregationFn?: AggregationFnOption<TData>\n  /**\n   * Enables/disables grouping for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#enablegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  enableGrouping?: boolean\n  /**\n   * Specify a value to be used for grouping rows on this column. If this option is not specified, the value derived from `accessorKey` / `accessorFn` will be used instead.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  /**\n   * Returns the aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getaggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getAggregationFn: () => AggregationFn<TData> | undefined\n  /**\n   * Returns the automatically inferred aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getautoaggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  /**\n   * Returns whether or not the column can be grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getcangroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getCanGroup: () => boolean\n  /**\n   * Returns the index of the column in the grouping state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedIndex: () => number\n  /**\n   * Returns whether or not the column is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * Returns a function that toggles the grouping state of the column. This is useful for passing to the `onClick` prop of a button.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#gettogglegroupinghandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getToggleGroupingHandler: () => () => void\n  /**\n   * Toggles the grouping state of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#togglegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  toggleGrouping: () => void\n}\n\nexport interface GroupingRow {\n  _groupingValuesCache: Record<string, any>\n  /**\n   * Returns the grouping value for any row and column (including leaf rows).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupingValue: (columnId: string) => unknown\n  /**\n   * Returns whether or not the row is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * If this row is grouped, this is the id of the column that this row is grouped by.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupingcolumnid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupingColumnId?: string\n  /**\n   * If this row is grouped, this is the unique/shared value for the `groupingColumnId` for all of the rows in this group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupingValue?: unknown\n}\n\nexport interface GroupingCell {\n  /**\n   * Returns whether or not the cell is currently aggregated.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisaggregated)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsAggregated: () => boolean\n  /**\n   * Returns whether or not the cell is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * Returns whether or not the cell is currently a placeholder cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsPlaceholder: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  enableGrouping: boolean\n  onGroupingChange: OnChangeFn<GroupingState>\n}\n\ninterface GroupingOptionsBase {\n  /**\n   * Enables/disables grouping for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#enablegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  enableGrouping?: boolean\n  /**\n   * Returns the row model after grouping has taken place, but no further.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Grouping columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupedcolumnmode)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupedColumnMode?: false | 'reorder' | 'remove'\n  /**\n   * Enables manual grouping. If this option is set to `true`, the table will not automatically group rows using `getGroupedRowModel()` and instead will expect you to manually group the rows before passing them to the table. This is useful if you are doing server-side grouping and aggregation.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#manualgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  manualGrouping?: boolean\n  /**\n   * If this function is provided, it will be called when the grouping state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.grouping` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#ongroupingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  onGroupingChange?: OnChangeFn<GroupingState>\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  _getGroupedRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getpregroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getPreGroupedRowModel: () => RowModel<TData>\n  /**\n   * Resets the **grouping** state to `initialState.grouping`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#resetgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  resetGrouping: (defaultState?: boolean) => void\n  /**\n   * Updates the grouping state of the table via an update function or value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#setgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  setGrouping: (updater: Updater<GroupingState>) => void\n}\n\n//\n\nexport const ColumnGrouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        (column.columnDef.enableGrouping ?? true) &&\n        (table.options.enableGrouping ?? true) &&\n        (!!column.accessorFn || !!column.columnDef.getGroupingValue)\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nimport {\n  Column,\n  OnChangeFn,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\n\nimport { orderColumns } from './ColumnGrouping'\nimport { ColumnPinningPosition, _getVisibleLeafColumns } from '..'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnOrder` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#oncolumnorderchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderColumn {\n  /**\n   * Returns the index of the column in the order of the visible columns. Optionally pass a `position` parameter to get the index of the column in a sub-section of the table\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIndex: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Returns `true` if the column is the first column in the order of the visible columns. Optionally pass a `position` parameter to check if the column is the first in a sub-section of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getisfirstcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIsFirstColumn: (position?: ColumnPinningPosition | 'center') => boolean\n  /**\n   * Returns `true` if the column is the last column in the order of the visible columns. Optionally pass a `position` parameter to check if the column is the last in a sub-section of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getislastcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIsLastColumn: (position?: ColumnPinningPosition | 'center') => boolean\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n  /**\n   * Resets the **columnOrder** state to `initialState.columnOrder`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#resetcolumnorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  resetColumnOrder: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnOrder` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#setcolumnorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n}\n\n//\n\nexport const ColumnOrdering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getIndex = memo(\n      position => [_getVisibleLeafColumns(table, position)],\n      columns => columns.findIndex(d => d.id === column.id),\n      getMemoOptions(table.options, 'debugColumns', 'getIndex')\n    )\n    column.getIsFirstColumn = position => {\n      const columns = _getVisibleLeafColumns(table, position)\n      return columns[0]?.id === column.id\n    }\n    column.getIsLastColumn = position => {\n      const columns = _getVisibleLeafColumns(table, position)\n      return columns[columns.length - 1]?.id === column.id\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) =>\n        (columns: Column<TData, unknown>[]) => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n      getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn')\n    )\n  },\n}\n", "import {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  /**\n   * Enables/disables column pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablecolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enableColumnPinning?: boolean\n  /**\n   * @deprecated Use `enableColumnPinning` or `enableRowPinning` instead.\n   * Enables/disables all pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablepinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enablePinning?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnPinning` changes. This overrides the default internal state management, so you will also need to supply `state.columnPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#oncolumnpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/oncolumnpinningchange)\n   */\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  /**\n   * Enables/disables column pinning for this column. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablepinning-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  /**\n   * Returns whether or not the column can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcanpin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the column. (`'left'`, `'right'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getispinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getIsPinned: () => ColumnPinningPosition\n  /**\n   * Returns the numeric pinned index of the column within a pinned column group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getpinnedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a column to the `'left'` or `'right'`, or unpins the column to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#pin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcentervisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all left pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getleftvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getrightvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcenterleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether or not any columns are pinned. Optionally specify to only check for pinned columns in either the `left` or `right` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getissomecolumnspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  /**\n   * Returns all left pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getleftleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getrightleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the **columnPinning** state to `initialState.columnPinning`, or `true` can be passed to force a default blank state reset to `{ left: [], right: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#resetcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  resetColumnPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#setcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n}\n\n//\n\nconst getDefaultColumnPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const ColumnPinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enableColumnPinning ??\n            table.options.enablePinning ??\n            true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells')\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells')\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultColumnPinningState()\n          : table.initialState?.columnPinning ?? getDefaultColumnPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns')\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns')\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns')\n    )\n  },\n}\n", "import { _getVisibleLeafColumns } from '..'\nimport {\n  RowData,\n  Column,\n  Header,\n  OnChangeFn,\n  Table,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\nimport { ColumnPinningPosition } from './ColumnPinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  columnSizingStart: [string, number][]\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  startOffset: null | number\n  startSize: null | number\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnResizeDirection = 'ltr' | 'rtl'\n\nexport interface ColumnSizingOptions {\n  /**\n   * Determines when the columnSizing state is updated. `onChange` updates the state when the user is dragging the resize handle. `onEnd` updates the state when the user releases the resize handle.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#columnresizemode)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  columnResizeMode?: ColumnResizeMode\n  /**\n   * Enables or disables column resizing for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#enablecolumnresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  enableColumnResizing?: boolean\n  /**\n   * Enables or disables right-to-left support for resizing the column. defaults to 'ltr'.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#columnResizeDirection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  columnResizeDirection?: ColumnResizeDirection\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnSizing` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizing` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#oncolumnsizingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnSizingInfo` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizingInfo` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#oncolumnsizinginfochange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = Pick<\n  ColumnSizingOptions,\n  | 'columnResizeMode'\n  | 'onColumnSizingChange'\n  | 'onColumnSizingInfoChange'\n  | 'columnResizeDirection'\n>\n\nexport interface ColumnSizingInstance {\n  /**\n   * If pinning, returns the total size of the center portion of the table by calculating the sum of the sizes of all unpinned/center leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getcentertotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getCenterTotalSize: () => number\n  /**\n   * Returns the total size of the left portion of the table by calculating the sum of the sizes of all left leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getlefttotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getLeftTotalSize: () => number\n  /**\n   * Returns the total size of the right portion of the table by calculating the sum of the sizes of all right leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getrighttotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getRightTotalSize: () => number\n  /**\n   * Returns the total size of the table by calculating the sum of the sizes of all leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#gettotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getTotalSize: () => number\n  /**\n   * Resets column sizing to its initial state. If `defaultState` is `true`, the default state for the table will be used instead of the initialValue provided to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetcolumnsizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetColumnSizing: (defaultState?: boolean) => void\n  /**\n   * Resets column sizing info to its initial state. If `defaultState` is `true`, the default state for the table will be used instead of the initialValue provided to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetheadersizeinfo)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  /**\n   * Sets the column sizing state using an updater function or a value. This will trigger the underlying `onColumnSizingChange` function if one is passed to the table options, otherwise the state will be managed automatically by the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#setcolumnsizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  /**\n   * Sets the column sizing info state using an updater function or a value. This will trigger the underlying `onColumnSizingInfoChange` function if one is passed to the table options, otherwise the state will be managed automatically by the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#setcolumnsizinginfo)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n}\n\nexport interface ColumnSizingColumnDef {\n  /**\n   * Enables or disables column resizing for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#enableresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  enableResizing?: boolean\n  /**\n   * The maximum allowed size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#maxsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  maxSize?: number\n  /**\n   * The minimum allowed size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#minsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  minSize?: number\n  /**\n   * The desired size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#size)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  size?: number\n}\n\nexport interface ColumnSizingColumn {\n  /**\n   * Returns `true` if the column can be resized.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getcanresize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getCanResize: () => boolean\n  /**\n   * Returns `true` if the column is currently being resized.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getisresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getIsResizing: () => boolean\n  /**\n   * Returns the current size of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getSize: () => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all preceding (left) headers in relation to the current column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getstart)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getStart: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all succeeding (right) headers in relation to the current column.\n   */\n  getAfter: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Resets the column to its initial size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  /**\n   * Returns an event handler function that can be used to resize the header. It can be used as an:\n   * - `onMouseDown` handler\n   * - `onTouchStart` handler\n   *\n   * The dragging and release events are automatically handled for you.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getresizehandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getResizeHandler: (context?: Document) => (event: unknown) => void\n  /**\n   * Returns the current size of the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getSize: () => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all preceding headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getstart)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getStart: (position?: ColumnPinningPosition) => number\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n\n    column.getStart = memo(\n      position => [\n        position,\n        _getVisibleLeafColumns(table, position),\n        table.getState().columnSizing,\n      ],\n      (position, columns) =>\n        columns\n          .slice(0, column.getIndex(position))\n          .reduce((sum, column) => sum + column.getSize(), 0),\n      getMemoOptions(table.options, 'debugColumns', 'getStart')\n    )\n\n    column.getAfter = memo(\n      position => [\n        position,\n        _getVisibleLeafColumns(table, position),\n        table.getState().columnSizing,\n      ],\n      (position, columns) =>\n        columns\n          .slice(column.getIndex(position) + 1)\n          .reduce((sum, column) => sum + column.getSize(), 0),\n      getMemoOptions(table.options, 'debugColumns', 'getAfter')\n    )\n\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaDirection =\n              table.options.columnResizeDirection === 'rtl' ? -1 : 1\n            const deltaOffset =\n              (clientXPos - (old?.startOffset ?? 0)) * deltaDirection\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const contextDocument =\n          _contextDocument || typeof document !== 'undefined' ? document : null\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            contextDocument?.removeEventListener(\n              'mousemove',\n              mouseEvents.moveHandler\n            )\n            contextDocument?.removeEventListener(\n              'mouseup',\n              mouseEvents.upHandler\n            )\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            contextDocument?.removeEventListener(\n              'touchmove',\n              touchEvents.moveHandler\n            )\n            contextDocument?.removeEventListener(\n              'touchend',\n              touchEvents.upHandler\n            )\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          contextDocument?.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          contextDocument?.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          contextDocument?.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          contextDocument?.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { ColumnPinningPosition } from '..'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  /**\n   * Whether to enable column hiding. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#enablehiding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  enableHiding?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnVisibility` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#oncolumnvisibilitychange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityDefaultOptions = Pick<\n  VisibilityOptions,\n  'onColumnVisibilityChange'\n>\n\nexport interface VisibilityInstance<TData extends RowData> {\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the unpinned/center portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getcentervisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether all columns are visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getisallcolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsAllColumnsVisible: () => boolean\n  /**\n   * Returns whether any columns are visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getissomecolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsSomeColumnsVisible: () => boolean\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the left portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getleftvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the right portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getrightvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a handler for toggling the visibility of all columns, meant to be bound to a `input[type=checkbox]` element.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#gettoggleallcolumnsvisibilityhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n  /**\n   * Returns a flat array of columns that are visible, including parent columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisibleflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a flat array of leaf-node columns that are visible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the column visibility state to the initial state. If `defaultState` is provided, the state will be reset to `{}`\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#resetcolumnvisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  resetColumnVisibility: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnVisibility` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#setcolumnvisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  /**\n   * Toggles the visibility of all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#toggleallcolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  toggleAllColumnsVisible: (value?: boolean) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns an array of cells that account for column visibility for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  /**\n   * Returns whether the column can be hidden\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getcanhide)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getCanHide: () => boolean\n  /**\n   * Returns whether the column is visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getisvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsVisible: () => boolean\n  /**\n   * Returns a function that can be used to toggle the column visibility. This function can be used to bind to an event handler to a checkbox.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#gettogglevisibilityhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getToggleVisibilityHandler: () => (event: unknown) => void\n  /**\n   * Toggles the visibility of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#togglevisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  toggleVisibility: (value?: boolean) => void\n}\n\n//\n\nexport const ColumnVisibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      const childColumns = column.columns\n      return (\n        (childColumns.length\n          ? childColumns.some(c => c.getIsVisible())\n          : table.getState().columnVisibility?.[column.id]) ?? true\n      )\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells')\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      getMemoOptions(table.options, 'debugRows', 'getVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        getMemoOptions(table.options, 'debugColumns', key)\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nexport function _getVisibleLeafColumns<TData extends RowData>(\n  table: Table<TData>,\n  position?: ColumnPinningPosition | 'center'\n) {\n  return !position\n    ? table.getVisibleLeafColumns()\n    : position === 'center'\n      ? table.getCenterVisibleLeafColumns()\n      : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n}\n", "import { RowModel } from '..'\nimport { Table, RowData, TableFeature } from '../types'\n\nexport interface GlobalFacetingInstance<TData extends RowData> {\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  /**\n   * Currently, this function returns the built-in `includesString` filter function. In future releases, it may return more dynamic filter functions based on the nature of the data provided.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  /**\n   * Returns the row model for the table after **global** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalfacetedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  /**\n   * Returns the faceted unique values for the global filter.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalfaceteduniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n}\n\n//\n\nexport const GlobalFaceting: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n", "import { FilterFn, FilterFnOption } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport interface GlobalFilterTableState {\n  globalFilter: any\n}\n\nexport interface GlobalFilterColumnDef {\n  /**\n   * Enables/disables the **global** filter for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#enableglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  enableGlobalFilter?: boolean\n}\n\nexport interface GlobalFilterColumn {\n  /**\n   * Returns whether or not the column can be **globally** filtered. Set to `false` to disable a column from being scanned during global filtering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getcanglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getCanGlobalFilter: () => boolean\n}\n\nexport interface GlobalFilterOptions<TData extends RowData> {\n  /**\n   * Enables/disables **global** filtering for all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#enableglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  enableGlobalFilter?: boolean\n  /**\n   * If provided, this function will be called with the column and should return `true` or `false` to indicate whether this column should be used for global filtering.\n   *\n   * This is useful if the column can contain data that is not `string` or `number` (i.e. `undefined`).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getcolumncanglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n  /**\n   * The filter function to use for global filtering.\n   * - A `string` referencing a built-in filter function\n   * - A `string` that references a custom filter functions provided via the `tableOptions.filterFns` option\n   * - A custom filter function\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#globalfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  globalFilterFn?: FilterFnOption<TData>\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.globalFilter` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#onglobalfilterchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  onGlobalFilterChange?: OnChangeFn<any>\n}\n\nexport interface GlobalFilterInstance<TData extends RowData> {\n  /**\n   * Currently, this function returns the built-in `includesString` filter function. In future releases, it may return more dynamic filter functions based on the nature of the data provided.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getglobalautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns the filter function (either user-defined or automatic, depending on configuration) for the global filter.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getglobalfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Resets the **globalFilter** state to `initialState.globalFilter`, or `true` can be passed to force a default blank state reset to `undefined`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#resetglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  resetGlobalFilter: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.globalFilter` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#setglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  setGlobalFilter: (updater: Updater<any>) => void\n}\n\n//\n\nexport const GlobalFiltering: TableFeature = {\n  getInitialState: (state): GlobalFilterTableState => {\n    return {\n      globalFilter: undefined,\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GlobalFilterOptions<TData> => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as GlobalFilterOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n  },\n}\n", "import { RowModel } from '..'\nimport {\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  /**\n   * Returns whether the row can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getcanexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getCanExpand: () => boolean\n  /**\n   * Returns whether all parent rows of the row are expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisallparentsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsAllParentsExpanded: () => boolean\n  /**\n   * Returns whether the row is expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsExpanded: () => boolean\n  /**\n   * Returns a function that can be used to toggle the expanded state of the row. This function can be used to bind to an event handler to a button.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#gettoggleexpandedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getToggleExpandedHandler: () => () => void\n  /**\n   * Toggles the expanded state (or sets it if `expanded` is provided) for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#toggleexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  toggleExpanded: (expanded?: boolean) => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  /**\n   * Enable this setting to automatically reset the expanded state of the table when expanding state changes.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#autoresetexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  autoResetExpanded?: boolean\n  /**\n   * Enable/disable expanding for all rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#enableexpanding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  enableExpanding?: boolean\n  /**\n   * This function is responsible for returning the expanded row model. If this function is not provided, the table will not expand rows. You can use the default exported `getExpandedRowModel` function to get the expanded row model or implement your own.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * If provided, allows you to override the default behavior of determining whether a row is currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisrowexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  /**\n   * If provided, allows you to override the default behavior of determining whether a row can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getrowcanexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  /**\n   * Enables manual row expansion. If this is set to `true`, `getExpandedRowModel` will not be used to expand rows and you would be expected to perform the expansion in your own data model. This is useful if you are doing server-side expansion.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#manualexpanding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  manualExpanding?: boolean\n  /**\n   * This function is called when the `expanded` table state changes. If a function is provided, you will be responsible for managing this state on your own. To pass the managed state back to the table, use the `tableOptions.state.expanded` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#onexpandedchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  /**\n   * If `true` expanded rows will be paginated along with the rest of the table (which means expanded rows may span multiple pages). If `false` expanded rows will not be considered for pagination (which means expanded rows will always render on their parents page. This also means more rows will be rendered than the set page size)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#paginateexpandedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  _getExpandedRowModel?: () => RowModel<TData>\n  /**\n   * Returns whether there are any rows that can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getcansomerowsexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getCanSomeRowsExpand: () => boolean\n  /**\n   * Returns the maximum depth of the expanded rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandeddepth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedDepth: () => number\n  /**\n   * Returns the row model after expansion has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedRowModel: () => RowModel<TData>\n  /**\n   * Returns whether all rows are currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisallrowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsAllRowsExpanded: () => boolean\n  /**\n   * Returns whether there are any rows that are currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getissomerowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsSomeRowsExpanded: () => boolean\n  /**\n   * Returns the row model before expansion has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getpreexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getPreExpandedRowModel: () => RowModel<TData>\n  /**\n   * Returns a handler that can be used to toggle the expanded state of all rows. This handler is meant to be used with an `input[type=checkbox]` element.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#gettoggleallrowsexpandedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  /**\n   * Resets the expanded state of the table to the initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#resetexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  resetExpanded: (defaultState?: boolean) => void\n  /**\n   * Updates the expanded state of the table via an update function or value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#setexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  /**\n   * Toggles the expanded state for all rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#toggleallrowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n}\n\n//\n\nexport const RowExpanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true\n      let currentRow = row\n\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true)\n        isFullyExpanded = currentRow.getIsExpanded()\n      }\n\n      return isFullyExpanded\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n", "import {\n  OnChangeFn,\n  Table,\n  RowModel,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport {\n  functionalUpdate,\n  getMemoOptions,\n  makeStateUpdater,\n  memo,\n} from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  /**\n   * If set to `true`, pagination will be reset to the first page when page-altering state changes eg. `data` is updated, filters change, grouping changes, etc.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#autoresetpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  autoResetPageIndex?: boolean\n  /**\n   * Returns the row model after pagination has taken place, but no further.\n   *\n   * Pagination columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Enables manual pagination. If this option is set to `true`, the table will not automatically paginate rows using `getPaginationRowModel()` and instead will expect you to manually paginate the rows before passing them to the table. This is useful if you are doing server-side pagination and aggregation.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#manualpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  manualPagination?: boolean\n  /**\n   * If this function is provided, it will be called when the pagination state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.pagination` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#onpaginationchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  onPaginationChange?: OnChangeFn<PaginationState>\n  /**\n   * When manually controlling pagination, you can supply a total `pageCount` value to the table if you know it (Or supply a `rowCount` and `pageCount` will be calculated). If you do not know how many pages there are, you can set this to `-1`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#pagecount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  pageCount?: number\n  /**\n   * When manually controlling pagination, you can supply a total `rowCount` value to the table if you know it. The `pageCount` can be calculated from this value and the `pageSize`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#rowcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  rowCount?: number\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  _getPaginationRowModel?: () => RowModel<TData>\n  /**\n   * Returns whether the table can go to the next page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getcannextpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getCanNextPage: () => boolean\n  /**\n   * Returns whether the table can go to the previous page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getcanpreviouspage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getCanPreviousPage: () => boolean\n  /**\n   * Returns the page count. If manually paginating or controlling the pagination state, this will come directly from the `options.pageCount` table option, otherwise it will be calculated from the table data using the total row count and current page size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpagecount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPageCount: () => number\n  /**\n   * Returns the row count. If manually paginating or controlling the pagination state, this will come directly from the `options.rowCount` table option, otherwise it will be calculated from the table data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getrowcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getRowCount: () => number\n  /**\n   * Returns an array of page options (zero-index-based) for the current page size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpageoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPageOptions: () => number[]\n  /**\n   * Returns the row model for the table after pagination has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPaginationRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any pagination has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getprepaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPrePaginationRowModel: () => RowModel<TData>\n  /**\n   * Increments the page index by one, if possible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#nextpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  nextPage: () => void\n  /**\n   * Decrements the page index by one, if possible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#previouspage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  previousPage: () => void\n  /**\n   * Sets the page index to `0`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#firstpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  firstPage: () => void\n  /**\n   * Sets the page index to the last page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#lastpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  lastPage: () => void\n  /**\n   * Resets the page index to its initial state. If `defaultState` is `true`, the page index will be reset to `0` regardless of initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPageIndex: (defaultState?: boolean) => void\n  /**\n   * Resets the page size to its initial state. If `defaultState` is `true`, the page size will be reset to `10` regardless of initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpagesize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPageSize: (defaultState?: boolean) => void\n  /**\n   * Resets the **pagination** state to `initialState.pagination`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPagination: (defaultState?: boolean) => void\n  /**\n   * @deprecated The page count no longer exists in the pagination state. Just pass as a table option instead.\n   */\n  setPageCount: (updater: Updater<number>) => void\n  /**\n   * Updates the page index using the provided function or value in the `state.pagination.pageIndex` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPageIndex: (updater: Updater<number>) => void\n  /**\n   * Updates the page size using the provided function or value in the `state.pagination.pageSize` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpagesize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPageSize: (updater: Updater<number>) => void\n  /**\n   * Sets or updates the `state.pagination` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPagination: (updater: Updater<PaginationState>) => void\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const RowPagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    //deprecated\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      getMemoOptions(table.options, 'debugTable', 'getPageOptions')\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.firstPage = () => {\n      return table.setPageIndex(0)\n    }\n\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1)\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(table.getRowCount() / table.getState().pagination.pageSize)\n      )\n    }\n\n    table.getRowCount = () => {\n      return (\n        table.options.rowCount ?? table.getPrePaginationRowModel().rows.length\n      )\n    }\n  },\n}\n", "import {\n  OnChangeFn,\n  Updater,\n  Table,\n  Row,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport interface RowPinningState {\n  bottom?: string[]\n  top?: string[]\n}\n\nexport interface RowPinningTableState {\n  rowPinning: RowPinningState\n}\n\nexport interface RowPinningOptions<TData extends RowData> {\n  /**\n   * Enables/disables row pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#enablerowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  enableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * When `false`, pinned rows will not be visible if they are filtered or paginated out of the table. When `true`, pinned rows will always be visible regardless of filtering or pagination. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#keeppinnedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  keepPinnedRows?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowPinning` changes. This overrides the default internal state management, so you will also need to supply `state.rowPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#onrowpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/onrowpinningchange)\n   */\n  onRowPinningChange?: OnChangeFn<RowPinningState>\n}\n\nexport interface RowPinningDefaultOptions {\n  onRowPinningChange: OnChangeFn<RowPinningState>\n}\n\nexport interface RowPinningRow {\n  /**\n   * Returns whether or not the row can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getcanpin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the row. (`'top'`, `'bottom'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getispinned-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getIsPinned: () => RowPinningPosition\n  /**\n   * Returns the numeric pinned index of the row within a pinned row group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getpinnedindex-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a row to the `'top'` or `'bottom'`, or unpins the row to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#pin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  pin: (\n    position: RowPinningPosition,\n    includeLeafRows?: boolean,\n    includeParentRows?: boolean\n  ) => void\n}\n\nexport interface RowPinningInstance<TData extends RowData> {\n  _getPinnedRows: (position: 'top' | 'bottom') => Row<TData>[]\n  /**\n   * Returns all bottom pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getbottomrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getBottomRows: () => Row<TData>[]\n  /**\n   * Returns all rows that are not pinned to the top or bottom.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getcenterrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getCenterRows: () => Row<TData>[]\n  /**\n   * Returns whether or not any rows are pinned. Optionally specify to only check for pinned rows in either the `top` or `bottom` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getissomerowspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n  /**\n   * Returns all top pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#gettoprows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getTopRows: () => Row<TData>[]\n  /**\n   * Resets the **rowPinning** state to `initialState.rowPinning`, or `true` can be passed to force a default blank state reset to `{ top: [], bottom: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#resetrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  resetRowPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#setrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  setRowPinning: (updater: Updater<RowPinningState>) => void\n}\n\n//\n\nconst getDefaultRowPinningState = (): RowPinningState => ({\n  top: [],\n  bottom: [],\n})\n\nexport const RowPinning: TableFeature = {\n  getInitialState: (state): RowPinningTableState => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowPinningDefaultOptions => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows\n        ? row.getLeafRows().map(({ id }) => id)\n        : []\n      const parentRowIds = includeParentRows\n        ? row.getParentRows().map(({ id }) => id)\n        : []\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds])\n\n      table.setRowPinning(old => {\n        if (position === 'bottom') {\n          return {\n            top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n            bottom: [\n              ...(old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n          }\n        }\n\n        if (position === 'top') {\n          return {\n            top: [\n              ...(old?.top ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n            bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n          }\n        }\n\n        return {\n          top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n          bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n        }\n      })\n    }\n    row.getCanPin = () => {\n      const { enableRowPinning, enablePinning } = table.options\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row)\n      }\n      return enableRowPinning ?? enablePinning ?? true\n    }\n    row.getIsPinned = () => {\n      const rowIds = [row.id]\n\n      const { top, bottom } = table.getState().rowPinning\n\n      const isTop = rowIds.some(d => top?.includes(d))\n      const isBottom = rowIds.some(d => bottom?.includes(d))\n\n      return isTop ? 'top' : isBottom ? 'bottom' : false\n    }\n    row.getPinnedIndex = () => {\n      const position = row.getIsPinned()\n      if (!position) return -1\n\n      const visiblePinnedRowIds = table\n        ._getPinnedRows(position)\n        ?.map(({ id }) => id)\n\n      return visiblePinnedRowIds?.indexOf(row.id) ?? -1\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowPinning = updater => table.options.onRowPinningChange?.(updater)\n\n    table.resetRowPinning = defaultState =>\n      table.setRowPinning(\n        defaultState\n          ? getDefaultRowPinningState()\n          : table.initialState?.rowPinning ?? getDefaultRowPinningState()\n      )\n\n    table.getIsSomeRowsPinned = position => {\n      const pinningState = table.getState().rowPinning\n\n      if (!position) {\n        return Boolean(pinningState.top?.length || pinningState.bottom?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table._getPinnedRows = memo(\n      position => [\n        table.getRowModel().rows,\n        table.getState().rowPinning[position!],\n        position,\n      ],\n      (visibleRows, pinnedRowIds, position) => {\n        const rows =\n          table.options.keepPinnedRows ?? true\n            ? //get all rows that are pinned even if they would not be otherwise visible\n              //account for expanded parent rows, but not pagination or filtering\n              (pinnedRowIds ?? []).map(rowId => {\n                const row = table.getRow(rowId, true)\n                return row.getIsAllParentsExpanded() ? row : null\n              })\n            : //else get only visible rows that are pinned\n              (pinnedRowIds ?? []).map(\n                rowId => visibleRows.find(row => row.id === rowId)!\n              )\n\n        return rows\n          .filter(Boolean)\n          .map(d => ({ ...d, position })) as Row<TData>[]\n      },\n      getMemoOptions(table.options, 'debugRows', '_getPinnedRows')\n    )\n\n    table.getTopRows = () => table._getPinnedRows('top')\n\n    table.getBottomRows = () => table._getPinnedRows('bottom')\n\n    table.getCenterRows = memo(\n      () => [\n        table.getRowModel().rows,\n        table.getState().rowPinning.top,\n        table.getState().rowPinning.bottom,\n      ],\n      (allRows, top, bottom) => {\n        const topAndBottom = new Set([...(top ?? []), ...(bottom ?? [])])\n        return allRows.filter(d => !topAndBottom.has(d.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterRows')\n    )\n  },\n}\n", "import {\n  OnChangeFn,\n  Table,\n  Row,\n  RowModel,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  /**\n   * - Enables/disables multiple row selection for all rows in the table OR\n   * - A function that given a row, returns whether to enable/disable multiple row selection for that row's children/grandchildren\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablemultirowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * - Enables/disables row selection for all rows in the table OR\n   * - A function that given a row, returns whether to enable/disable row selection for that row\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablerowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * Enables/disables automatic sub-row selection when a parent row is selected, or a function that enables/disables automatic sub-row selection for each row.\n   * (Use in combination with expanding or grouping features)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablesubrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowSelection` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#onrowselectionchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  /**\n   * Returns whether or not the row can multi-select.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanmultiselect)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanMultiSelect: () => boolean\n  /**\n   * Returns whether or not the row can be selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanselect)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanSelect: () => boolean\n  /**\n   * Returns whether or not the row can select sub rows automatically when the parent row is selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanselectsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanSelectSubRows: () => boolean\n  /**\n   * Returns whether or not all of the row's sub rows are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallsubrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllSubRowsSelected: () => boolean\n  /**\n   * Returns whether or not the row is selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSelected: () => boolean\n  /**\n   * Returns whether or not some of the row's sub rows are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomeselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomeSelected: () => boolean\n  /**\n   * Returns a handler that can be used to toggle the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleSelectedHandler: () => (event: unknown) => void\n  /**\n   * Selects/deselects the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleSelected: (value?: boolean, opts?: { selectChildren?: boolean }) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  /**\n   * Returns the row model of all rows that are selected after filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getfilteredselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model of all rows that are selected after grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getgroupedselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getGroupedSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns whether or not all rows on the current page are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallpagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllPageRowsSelected: () => boolean\n  /**\n   * Returns whether or not all rows in the table are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllRowsSelected: () => boolean\n  /**\n   * Returns whether or not any rows on the current page are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomepagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomePageRowsSelected: () => boolean\n  /**\n   * Returns whether or not any rows in the table are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomeRowsSelected: () => boolean\n  /**\n   * Returns the core row model of all rows before row selection has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getpreselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getPreSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model of all rows that are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns a handler that can be used to toggle all rows on the current page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleallpagerowsselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  /**\n   * Returns a handler that can be used to toggle all rows in the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleallrowsselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  /**\n   * Resets the **rowSelection** state to the `initialState.rowSelection`, or `true` can be passed to force a default blank state reset to `{}`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#resetrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  resetRowSelection: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowSelection` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#setrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  /**\n   * Selects/deselects all rows on the current page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleallpagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  /**\n   * Selects/deselects all rows in the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleallrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleAllRowsSelected: (value?: boolean) => void\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel')\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel')\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel')\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (row.getCanSelect() && isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(\n          selectedRowIds,\n          row.id,\n          value,\n          opts?.selectChildren ?? true,\n          table\n        )\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  includeChildren: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id, true)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (includeChildren && row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (!row.subRows?.length) return false\n\n  let allChildrenSelected = true\n  let someSelected = false\n\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return\n    }\n\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection, table)\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true\n        allChildrenSelected = false\n      } else {\n        allChildrenSelected = false\n      }\n    }\n  })\n\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n}\n", "import { SortingFn } from './features/RowSorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n  TableFeature,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  desc: boolean\n  id: string\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  /**\n   * Enables/Disables multi-sorting for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiSort?: boolean\n  /**\n   * Enables/Disables sorting for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSorting?: boolean\n  /**\n   * Inverts the order of the sorting for this column. This is useful for values that have an inverted best/worst scale where lower numbers are better, eg. a ranking (1st, 2nd, 3rd) or golf-like scoring\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#invertsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  invertSorting?: boolean\n  /**\n   * Set to `true` for sorting toggles on this column to start in the descending direction.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortdescfirst)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortDescFirst?: boolean\n  /**\n   * The sorting function to use with this column.\n   * - A `string` referencing a built-in sorting function\n   * - A custom sorting function\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortingFn?: SortingFnOption<TData>\n  /**\n   * The priority of undefined values when sorting this column.\n   * - `false`\n   *   - Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n   * - `-1`\n   *   - Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n   * - `1`\n   *   - Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortundefined)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortUndefined?: false | -1 | 1 | 'first' | 'last'\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  /**\n   * Removes this column from the table's sorting state\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#clearsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  clearSorting: () => void\n  /**\n   * Returns a sort direction automatically inferred based on the columns values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getautosortdir)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getAutoSortDir: () => SortDirection\n  /**\n   * Returns a sorting function automatically inferred based on the columns values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getautosortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getAutoSortingFn: () => SortingFn<TData>\n  /**\n   * Returns whether this column can be multi-sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getcanmultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getCanMultiSort: () => boolean\n  /**\n   * Returns whether this column can be sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getcansort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getCanSort: () => boolean\n  /**\n   * Returns the first direction that should be used when sorting this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getfirstsortdir)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getFirstSortDir: () => SortDirection\n  /**\n   * Returns the current sort direction of this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getissorted)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getIsSorted: () => false | SortDirection\n  /**\n   * Returns the next sorting order.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getnextsortingorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getNextSortingOrder: () => SortDirection | false\n  /**\n   * Returns the index position of this column's sorting within the sorting state\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortIndex: () => number\n  /**\n   * Returns the resolved sorting function to be used for this column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortingFn: () => SortingFn<TData>\n  /**\n   * Returns a function that can be used to toggle this column's sorting state. This is useful for attaching a click handler to the column header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#gettogglesortinghandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n  /**\n   * Toggles this columns sorting state. If `desc` is provided, it will force the sort direction to that value. If `isMulti` is provided, it will additivity multi-sort the column (or toggle it if it is already sorted).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#togglesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n}\n\ninterface SortingOptionsBase {\n  /**\n   * Enables/disables the ability to remove multi-sorts\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultiremove)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiRemove?: boolean\n  /**\n   * Enables/Disables multi-sorting for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiSort?: boolean\n  /**\n   * Enables/Disables sorting for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSorting?: boolean\n  /**\n   * Enables/Disables the ability to remove sorting for the table.\n   * - If `true` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'none' -> ...\n   * - If `false` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesortingremoval)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSortingRemoval?: boolean\n  /**\n   * This function is used to retrieve the sorted row model. If using server-side sorting, this function is not required. To use client-side sorting, pass the exported `getSortedRowModel()` from your adapter to your table or implement your own.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Pass a custom function that will be used to determine if a multi-sort event should be triggered. It is passed the event from the sort toggle handler and should return `true` if the event should trigger a multi-sort.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#ismultisortevent)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  isMultiSortEvent?: (e: unknown) => boolean\n  /**\n   * Enables manual sorting for the table. If this is `true`, you will be expected to sort your data before it is passed to the table. This is useful if you are doing server-side sorting.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#manualsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  manualSorting?: boolean\n  /**\n   * Set a maximum number of columns that can be multi-sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#maxmultisortcolcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  maxMultiSortColCount?: number\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.sorting` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#onsortingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  onSortingChange?: OnChangeFn<SortingState>\n  /**\n   * If `true`, all sorts will default to descending as their first toggle state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortdescfirst)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortDescFirst?: boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  _getSortedRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any sorting has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getpresortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getPreSortedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after sorting has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortedRowModel: () => RowModel<TData>\n  /**\n   * Resets the **sorting** state to `initialState.sorting`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#resetsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  resetSorting: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.sorting` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#setsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  setSorting: (updater: Updater<SortingState>) => void\n}\n\n//\n\nexport const RowSorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n", "import { functionalUpdate, getMemoOptions, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n  TableFeature,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnFaceting } from '../features/ColumnFaceting'\nimport { ColumnFiltering } from '../features/ColumnFiltering'\nimport { ColumnGrouping } from '../features/ColumnGrouping'\nimport { ColumnOrdering } from '../features/ColumnOrdering'\nimport { ColumnPinning } from '../features/ColumnPinning'\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { ColumnVisibility } from '../features/ColumnVisibility'\nimport { GlobalFaceting } from '../features/GlobalFaceting'\nimport { GlobalFiltering } from '../features/GlobalFiltering'\nimport { RowExpanding } from '../features/RowExpanding'\nimport { RowPagination } from '../features/RowPagination'\nimport { RowPinning } from '../features/RowPinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { RowSorting } from '../features/RowSorting'\n\nconst builtInFeatures = [\n  Headers,\n  ColumnVisibility,\n  ColumnOrdering,\n  ColumnPinning,\n  ColumnFaceting,\n  ColumnFiltering,\n  GlobalFaceting, //depends on ColumnFaceting\n  GlobalFiltering, //depends on ColumnFiltering\n  RowSorting,\n  ColumnGrouping, //depends on RowSorting\n  RowExpanding,\n  RowPagination,\n  RowPinning,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  /**\n   * An array of extra features that you can add to the table instance.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#_features)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  _features?: TableFeature[]\n  /**\n   * Set this option to override any of the `autoReset...` feature options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#autoresetall)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  autoResetAll?: boolean\n  /**\n   * The array of column defs to use for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#columns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  columns: ColumnDef<TData, any>[]\n  /**\n   * The data for the table to display. This array should match the type you provided to `table.setRowType<...>`. Columns can access this data via string/index or a functional accessor. When the `data` option changes reference, the table will reprocess the data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#data)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  data: TData[]\n  /**\n   * Set this option to `true` to output all debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugall)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugAll?: boolean\n  /**\n   * Set this option to `true` to output cell debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugcells]\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugCells?: boolean\n  /**\n   * Set this option to `true` to output column debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugColumns?: boolean\n  /**\n   * Set this option to `true` to output header debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugHeaders?: boolean\n  /**\n   * Set this option to `true` to output row debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugRows?: boolean\n  /**\n   * Set this option to `true` to output table debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugtable)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugTable?: boolean\n  /**\n   * Default column options to use for all column defs supplied to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#defaultcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  /**\n   * This required option is a factory for a function that computes and returns the core row model for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcorerowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  /**\n   * This optional function is used to derive a unique ID for any given row. If not provided the rows index is used (nested rows join together with `.` using their grandparents' index eg. `index.index.index`). If you need to identify individual rows that are originating from any server-side operations, it's suggested you use this function to return an ID that makes sense regardless of network IO/ambiguity eg. a userId, taskId, database ID field, etc.\n   * @example getRowId: row => row.userId\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrowid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  /**\n   * This optional function is used to access the sub rows for any given row. If you are using nested rows, you will need to use this function to return the sub rows object (or undefined) from the row.\n   * @example getSubRows: row => row.subRows\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  /**\n   * Use this option to optionally pass initial state to the table. This state will be used when resetting various table states either automatically by the table (eg. `options.autoResetPageIndex`) or via functions like `table.resetRowSelection()`. Most reset function allow you optionally pass a flag to reset to a blank/default state instead of the initial state.\n   *\n   * Table state will not be reset when this object changes, which also means that the initial state object does not need to be stable.\n   *\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#initialstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  initialState?: InitialTableState\n  /**\n   * This option is used to optionally implement the merging of table options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#mergeoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  /**\n   * You can pass any object to `options.meta` and access it anywhere the `table` is available via `table.options.meta`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#meta)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  meta?: TableMeta<TData>\n  /**\n   * The `onStateChange` option can be used to optionally listen to state changes within the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#onstatechange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  onStateChange: (updater: Updater<TableState>) => void\n  /**\n   * Value used when the desired value is not found in the data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#renderfallbackvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  renderFallbackValue: any\n  /**\n   * The `state` option can be used to optionally _control_ part or all of the table state. The state you pass here will merge with and overwrite the internal automatically-managed state to produce the final state for the table. You can also listen to state changes via the `onStateChange` option.\n   * > Note: Any state passed in here will override both the internal state and any other `initialState` you provide.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#state)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  state: Partial<TableState>\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  _features: readonly TableFeature[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getCoreRowModel?: () => RowModel<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  _queue: (cb: () => void) => void\n  /**\n   * Returns all columns in the table in their normalized and nested hierarchy.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all columns in the table flattened to a single level.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all leaf-node columns in the table flattened to a single level. This does not include parent columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a single column by its ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n  /**\n   * Returns the core row model before any processing has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcorerowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getCoreRowModel: () => RowModel<TData>\n  /**\n   * Returns the row with the given ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrow)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRow: (id: string, searchAll?: boolean) => Row<TData>\n  /**\n   * Returns the final model after all processing from other used features has been applied. This is the row model that is most commonly used for rendering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRowModel: () => RowModel<TData>\n  /**\n   * Call this function to get the table's current state. It's recommended to use this function and its state, especially when managing the table state manually. It is the exact same state used internally by the table for every feature and function it provides.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getState: () => TableState\n  /**\n   * This is the resolved initial state of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#initialstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  initialState: TableState\n  /**\n   * A read-only reference to the table's current options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#options)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  /**\n   * Call this function to reset the table state to the initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#reset)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  reset: () => void\n  /**\n   * This function can be used to update the table options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#setoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  /**\n   * Call this function to update the table state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#setstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  setState: (updater: Updater<TableState>) => void\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (options.debugAll || options.debugTable)\n  ) {\n    console.info('Creating Table Instance...')\n  }\n\n  const _features = [...builtInFeatures, ...(options._features ?? [])]\n\n  let table = { _features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = (feature.getInitialState?.(initialState) ??\n      initialState) as TableState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id: string, searchAll?: boolean) => {\n      let row = (\n        searchAll ? table.getPrePaginationRowModel() : table.getRowModel()\n      ).rowsById[id]\n\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id]\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`)\n          }\n          throw new Error()\n        }\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllColumns')\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce(\n          (acc, column) => {\n            acc[column.id] = column\n            return acc\n          },\n          {} as Record<string, Column<TData, unknown>>\n        )\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      getMemoOptions(table.options, 'debugTable', 'getRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel')\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues')\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nfunction filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nfunction filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel')\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      getMemoOptions(\n        table.options,\n        'debugTable',\n        `getFacetedUniqueValues_${columnId}`\n      )\n    )\n}\n", "import { ResolvedColumnFilter } from '../features/ColumnFiltering'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, getMemoOptions, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n        table._queue(() => {\n          table._autoResetExpanded()\n          table._autoResetPageIndex()\n        })\n      })\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel')\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/RowSorting'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(\n          sort => table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1 | 'first' | 'last'\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.map(row => ({ ...row }))\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const sortUndefined = columnInfo.sortUndefined\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  if (sortUndefined === 'first') return aUndefined ? -1 : 1\n                  if (sortUndefined === 'last') return aUndefined ? 1 : -1\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                        ? sortUndefined\n                        : -sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "const characterMap: Record<string, string> = {\n  À: 'A',\n  Á: 'A',\n  Â: 'A',\n  Ã: 'A',\n  Ä: 'A',\n  Å: 'A',\n  Ấ: 'A',\n  Ắ: 'A',\n  Ẳ: 'A',\n  Ẵ: 'A',\n  Ặ: 'A',\n  Æ: 'AE',\n  Ầ: 'A',\n  Ằ: 'A',\n  Ȃ: 'A',\n  Ç: 'C',\n  Ḉ: 'C',\n  È: 'E',\n  É: 'E',\n  Ê: 'E',\n  Ë: 'E',\n  Ế: 'E',\n  Ḗ: 'E',\n  Ề: 'E',\n  Ḕ: 'E',\n  Ḝ: 'E',\n  Ȇ: 'E',\n  Ì: 'I',\n  Í: 'I',\n  Î: 'I',\n  Ï: 'I',\n  Ḯ: 'I',\n  Ȋ: 'I',\n  Ð: 'D',\n  Ñ: 'N',\n  Ò: 'O',\n  Ó: 'O',\n  Ô: 'O',\n  Õ: 'O',\n  Ö: 'O',\n  Ø: 'O',\n  Ố: 'O',\n  Ṍ: 'O',\n  Ṓ: 'O',\n  Ȏ: 'O',\n  Ù: 'U',\n  Ú: 'U',\n  Û: 'U',\n  Ü: 'U',\n  Ý: 'Y',\n  à: 'a',\n  á: 'a',\n  â: 'a',\n  ã: 'a',\n  ä: 'a',\n  å: 'a',\n  ấ: 'a',\n  ắ: 'a',\n  ẳ: 'a',\n  ẵ: 'a',\n  ặ: 'a',\n  æ: 'ae',\n  ầ: 'a',\n  ằ: 'a',\n  ȃ: 'a',\n  ç: 'c',\n  ḉ: 'c',\n  è: 'e',\n  é: 'e',\n  ê: 'e',\n  ë: 'e',\n  ế: 'e',\n  ḗ: 'e',\n  ề: 'e',\n  ḕ: 'e',\n  ḝ: 'e',\n  ȇ: 'e',\n  ì: 'i',\n  í: 'i',\n  î: 'i',\n  ï: 'i',\n  ḯ: 'i',\n  ȋ: 'i',\n  ð: 'd',\n  ñ: 'n',\n  ò: 'o',\n  ó: 'o',\n  ô: 'o',\n  õ: 'o',\n  ö: 'o',\n  ø: 'o',\n  ố: 'o',\n  ṍ: 'o',\n  ṓ: 'o',\n  ȏ: 'o',\n  ù: 'u',\n  ú: 'u',\n  û: 'u',\n  ü: 'u',\n  ý: 'y',\n  ÿ: 'y',\n  Ā: 'A',\n  ā: 'a',\n  Ă: 'A',\n  ă: 'a',\n  Ą: 'A',\n  ą: 'a',\n  Ć: 'C',\n  ć: 'c',\n  Ĉ: 'C',\n  ĉ: 'c',\n  Ċ: 'C',\n  ċ: 'c',\n  Č: 'C',\n  č: 'c',\n  C̆: 'C',\n  c̆: 'c',\n  Ď: 'D',\n  ď: 'd',\n  Đ: 'D',\n  đ: 'd',\n  Ē: 'E',\n  ē: 'e',\n  Ĕ: 'E',\n  ĕ: 'e',\n  Ė: 'E',\n  ė: 'e',\n  Ę: 'E',\n  ę: 'e',\n  Ě: 'E',\n  ě: 'e',\n  Ĝ: 'G',\n  Ǵ: 'G',\n  ĝ: 'g',\n  ǵ: 'g',\n  Ğ: 'G',\n  ğ: 'g',\n  Ġ: 'G',\n  ġ: 'g',\n  Ģ: 'G',\n  ģ: 'g',\n  Ĥ: 'H',\n  ĥ: 'h',\n  Ħ: 'H',\n  ħ: 'h',\n  Ḫ: 'H',\n  ḫ: 'h',\n  Ĩ: 'I',\n  ĩ: 'i',\n  Ī: 'I',\n  ī: 'i',\n  Ĭ: 'I',\n  ĭ: 'i',\n  Į: 'I',\n  į: 'i',\n  İ: 'I',\n  ı: 'i',\n  Ĳ: 'IJ',\n  ĳ: 'ij',\n  Ĵ: 'J',\n  ĵ: 'j',\n  Ķ: 'K',\n  ķ: 'k',\n  Ḱ: 'K',\n  ḱ: 'k',\n  K̆: 'K',\n  k̆: 'k',\n  Ĺ: 'L',\n  ĺ: 'l',\n  Ļ: 'L',\n  ļ: 'l',\n  Ľ: 'L',\n  ľ: 'l',\n  Ŀ: 'L',\n  ŀ: 'l',\n  Ł: 'l',\n  ł: 'l',\n  Ḿ: 'M',\n  ḿ: 'm',\n  M̆: 'M',\n  m̆: 'm',\n  Ń: 'N',\n  ń: 'n',\n  Ņ: 'N',\n  ņ: 'n',\n  Ň: 'N',\n  ň: 'n',\n  ŉ: 'n',\n  N̆: 'N',\n  n̆: 'n',\n  Ō: 'O',\n  ō: 'o',\n  Ŏ: 'O',\n  ŏ: 'o',\n  Ő: 'O',\n  ő: 'o',\n  Œ: 'OE',\n  œ: 'oe',\n  P̆: 'P',\n  p̆: 'p',\n  Ŕ: 'R',\n  ŕ: 'r',\n  Ŗ: 'R',\n  ŗ: 'r',\n  Ř: 'R',\n  ř: 'r',\n  R̆: 'R',\n  r̆: 'r',\n  Ȓ: 'R',\n  ȓ: 'r',\n  Ś: 'S',\n  ś: 's',\n  Ŝ: 'S',\n  ŝ: 's',\n  Ş: 'S',\n  Ș: 'S',\n  ș: 's',\n  ş: 's',\n  Š: 'S',\n  š: 's',\n  Ţ: 'T',\n  ţ: 't',\n  ț: 't',\n  Ț: 'T',\n  Ť: 'T',\n  ť: 't',\n  Ŧ: 'T',\n  ŧ: 't',\n  T̆: 'T',\n  t̆: 't',\n  Ũ: 'U',\n  ũ: 'u',\n  Ū: 'U',\n  ū: 'u',\n  Ŭ: 'U',\n  ŭ: 'u',\n  Ů: 'U',\n  ů: 'u',\n  Ű: 'U',\n  ű: 'u',\n  Ų: 'U',\n  ų: 'u',\n  Ȗ: 'U',\n  ȗ: 'u',\n  V̆: 'V',\n  v̆: 'v',\n  Ŵ: 'W',\n  ŵ: 'w',\n  Ẃ: 'W',\n  ẃ: 'w',\n  X̆: 'X',\n  x̆: 'x',\n  Ŷ: 'Y',\n  ŷ: 'y',\n  Ÿ: 'Y',\n  Y̆: 'Y',\n  y̆: 'y',\n  Ź: 'Z',\n  ź: 'z',\n  Ż: 'Z',\n  ż: 'z',\n  Ž: 'Z',\n  ž: 'z',\n  ſ: 's',\n  ƒ: 'f',\n  Ơ: 'O',\n  ơ: 'o',\n  Ư: 'U',\n  ư: 'u',\n  Ǎ: 'A',\n  ǎ: 'a',\n  Ǐ: 'I',\n  ǐ: 'i',\n  Ǒ: 'O',\n  ǒ: 'o',\n  Ǔ: 'U',\n  ǔ: 'u',\n  Ǖ: 'U',\n  ǖ: 'u',\n  Ǘ: 'U',\n  ǘ: 'u',\n  Ǚ: 'U',\n  ǚ: 'u',\n  Ǜ: 'U',\n  ǜ: 'u',\n  Ứ: 'U',\n  ứ: 'u',\n  Ṹ: 'U',\n  ṹ: 'u',\n  Ǻ: 'A',\n  ǻ: 'a',\n  Ǽ: 'AE',\n  ǽ: 'ae',\n  Ǿ: 'O',\n  ǿ: 'o',\n  Þ: 'TH',\n  þ: 'th',\n  Ṕ: 'P',\n  ṕ: 'p',\n  Ṥ: 'S',\n  ṥ: 's',\n  X́: 'X',\n  x́: 'x',\n  Ѓ: 'Г',\n  ѓ: 'г',\n  Ќ: 'К',\n  ќ: 'к',\n  A̋: 'A',\n  a̋: 'a',\n  E̋: 'E',\n  e̋: 'e',\n  I̋: 'I',\n  i̋: 'i',\n  Ǹ: 'N',\n  ǹ: 'n',\n  Ồ: 'O',\n  ồ: 'o',\n  Ṑ: 'O',\n  ṑ: 'o',\n  Ừ: 'U',\n  ừ: 'u',\n  Ẁ: 'W',\n  ẁ: 'w',\n  Ỳ: 'Y',\n  ỳ: 'y',\n  Ȁ: 'A',\n  ȁ: 'a',\n  Ȅ: 'E',\n  ȅ: 'e',\n  Ȉ: 'I',\n  ȉ: 'i',\n  Ȍ: 'O',\n  ȍ: 'o',\n  Ȑ: 'R',\n  ȑ: 'r',\n  Ȕ: 'U',\n  ȕ: 'u',\n  B̌: 'B',\n  b̌: 'b',\n  Č̣: 'C',\n  č̣: 'c',\n  Ê̌: 'E',\n  ê̌: 'e',\n  F̌: 'F',\n  f̌: 'f',\n  Ǧ: 'G',\n  ǧ: 'g',\n  Ȟ: 'H',\n  ȟ: 'h',\n  J̌: 'J',\n  ǰ: 'j',\n  Ǩ: 'K',\n  ǩ: 'k',\n  M̌: 'M',\n  m̌: 'm',\n  P̌: 'P',\n  p̌: 'p',\n  Q̌: 'Q',\n  q̌: 'q',\n  Ř̩: 'R',\n  ř̩: 'r',\n  Ṧ: 'S',\n  ṧ: 's',\n  V̌: 'V',\n  v̌: 'v',\n  W̌: 'W',\n  w̌: 'w',\n  X̌: 'X',\n  x̌: 'x',\n  Y̌: 'Y',\n  y̌: 'y',\n  A̧: 'A',\n  a̧: 'a',\n  B̧: 'B',\n  b̧: 'b',\n  Ḑ: 'D',\n  ḑ: 'd',\n  Ȩ: 'E',\n  ȩ: 'e',\n  Ɛ̧: 'E',\n  ɛ̧: 'e',\n  Ḩ: 'H',\n  ḩ: 'h',\n  I̧: 'I',\n  i̧: 'i',\n  Ɨ̧: 'I',\n  ɨ̧: 'i',\n  M̧: 'M',\n  m̧: 'm',\n  O̧: 'O',\n  o̧: 'o',\n  Q̧: 'Q',\n  q̧: 'q',\n  U̧: 'U',\n  u̧: 'u',\n  X̧: 'X',\n  x̧: 'x',\n  Z̧: 'Z',\n  z̧: 'z',\n}\n\nconst chars = Object.keys(characterMap).join('|')\nconst allAccents = new RegExp(chars, 'g')\n\nexport function removeAccents(str: string) {\n  return str.replace(allAccents, match => {\n    return characterMap[match]!\n  })\n}\n", "/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2099 Kent C. Dodds\n * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n */\n\n// This is a fork of match-sorter. Instead of offering\n// a unified API for filtering and sorting in a single pass,\n// match-sorter-utils provides the lower-level utilities of\n// ranking items and comparing ranks in a way that can\n// be incrementally applied to a system rather than\n// all-at-once.\n\n// 1. Use the rankItem function to rank an item\n// 2. Use the resulting rankingInfo.passed to filter\n// 3. Use the resulting rankingInfo.rank to sort\n\n// For bundling purposes (mainly remove-accents not being esm safe/ready),\n// we've also hard-coded remove-accents into this source.\n// The remove-accents package is still included as a dependency\n// for attribution purposes, but it will not be imported and bundled.\n\nimport { removeAccents } from './remove-accents'\n\nexport type AccessorAttributes = {\n  threshold?: Ranking\n  maxRanking: Ranking\n  minRanking: Ranking\n}\n\nexport interface RankingInfo {\n  rankedValue: any\n  rank: Ranking\n  accessorIndex: number\n  accessorThreshold: Ranking | undefined\n  passed: boolean\n}\n\nexport interface AccessorOptions<TItem> {\n  accessor: AccessorFn<TItem>\n  threshold?: Ranking\n  maxRanking?: Ranking\n  minRanking?: Ranking\n}\n\nexport type AccessorFn<TItem> = (item: TItem) => string | Array<string>\n\nexport type Accessor<TItem> = AccessorFn<TItem> | AccessorOptions<TItem>\n\nexport interface RankItemOptions<TItem = unknown> {\n  accessors?: ReadonlyArray<Accessor<TItem>>\n  threshold?: Ranking\n  keepDiacritics?: boolean\n}\n\nexport const rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0,\n} as const\n\nexport type Ranking = (typeof rankings)[keyof typeof rankings]\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, accessorIndex: Number, accessorThreshold: Number}} - the highest ranking\n */\nexport function rankItem<TItem>(\n  item: TItem,\n  value: string,\n  options?: RankItemOptions<TItem>\n): RankingInfo {\n  options = options || {}\n\n  options.threshold = options.threshold ?? rankings.MATCHES\n\n  if (!options.accessors) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    const rank = getMatchRanking(item as unknown as string, value, options)\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: item,\n      rank,\n      accessorIndex: -1,\n      accessorThreshold: options.threshold,\n      passed: rank >= options.threshold,\n    }\n  }\n\n  const valuesToRank = getAllValuesToRank(item, options.accessors)\n\n  const rankingInfo: RankingInfo = {\n    rankedValue: item,\n    rank: rankings.NO_MATCH as Ranking,\n    accessorIndex: -1,\n    accessorThreshold: options.threshold,\n    passed: false,\n  }\n\n  for (let i = 0; i < valuesToRank.length; i++) {\n    const rankValue = valuesToRank[i]!\n\n    let newRank = getMatchRanking(rankValue.itemValue, value, options)\n\n    const {\n      minRanking,\n      maxRanking,\n      threshold = options.threshold,\n    } = rankValue.attributes\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking\n    }\n\n    newRank = Math.min(newRank, maxRanking) as Ranking\n\n    if (newRank >= threshold && newRank > rankingInfo.rank) {\n      rankingInfo.rank = newRank\n      rankingInfo.passed = true\n      rankingInfo.accessorIndex = i\n      rankingInfo.accessorThreshold = threshold\n      rankingInfo.rankedValue = rankValue.itemValue\n    }\n  }\n\n  return rankingInfo\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking<TItem>(\n  testString: string,\n  stringToRank: string,\n  options: RankItemOptions<TItem>\n): Ranking {\n  testString = prepareValueForComparison(testString, options)\n  stringToRank = prepareValueForComparison(stringToRank, options)\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL\n  }\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase()\n  stringToRank = stringToRank.toLowerCase()\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL\n  }\n\n  // starts with\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH\n  }\n\n  // word starts with\n  if (testString.includes(` ${stringToRank}`)) {\n    return rankings.WORD_STARTS_WITH\n  }\n\n  // contains\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH\n  }\n\n  // acronym\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank)\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string: string): string {\n  let acronym = ''\n  const wordsInString = string.split(' ')\n  wordsInString.forEach(wordInString => {\n    const splitByHyphenWords = wordInString.split('-')\n    splitByHyphenWords.forEach(splitByHyphenWord => {\n      acronym += splitByHyphenWord.substr(0, 1)\n    })\n  })\n  return acronym\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(\n  testString: string,\n  stringToRank: string\n): Ranking {\n  let matchingInOrderCharCount = 0\n  let charNumber = 0\n  function findMatchingCharacter(\n    matchChar: undefined | string,\n    string: string,\n    index: number\n  ) {\n    for (let j = index, J = string.length; j < J; j++) {\n      const stringChar = string[j]\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1\n        return j + 1\n      }\n    }\n    return -1\n  }\n  function getRanking(spread: number) {\n    const spreadPercentage = 1 / spread\n    const inOrderPercentage = matchingInOrderCharCount / stringToRank.length\n    const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage\n    return ranking as Ranking\n  }\n  const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0)\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH\n  }\n  charNumber = firstIndex\n  for (let i = 1, I = stringToRank.length; i < I; i++) {\n    const matchChar = stringToRank[i]\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber)\n    const found = charNumber > -1\n    if (!found) {\n      return rankings.NO_MATCH\n    }\n  }\n\n  const spread = charNumber - firstIndex\n  return getRanking(spread)\n}\n\n/**\n * Sorts items that have a rank, index, and accessorIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\nexport function compareItems<TItem>(a: RankingInfo, b: RankingInfo): number {\n  return a.rank === b.rank ? 0 : a.rank > b.rank ? -1 : 1\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison<TItem>(\n  value: string,\n  { keepDiacritics }: RankItemOptions<TItem>\n): string {\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = `${value}` // toString\n  if (!keepDiacritics) {\n    value = removeAccents(value)\n  }\n  return value\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues<TItem>(\n  item: TItem,\n  accessor: Accessor<TItem>\n): Array<string> {\n  let accessorFn = accessor as AccessorFn<TItem>\n\n  if (typeof accessor === 'object') {\n    accessorFn = accessor.accessor\n  }\n\n  const value = accessorFn(item)\n\n  // because `value` can also be undefined\n  if (value == null) {\n    return []\n  }\n\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [String(value)]\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank<TItem>(\n  item: TItem,\n  accessors: ReadonlyArray<Accessor<TItem>>\n) {\n  const allValues: Array<{\n    itemValue: string\n    attributes: AccessorAttributes\n  }> = []\n  for (let j = 0, J = accessors.length; j < J; j++) {\n    const accessor = accessors[j]!\n    const attributes = getAccessorAttributes(accessor)\n    const itemValues = getItemValues(item, accessor)\n    for (let i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i]!,\n        attributes,\n      })\n    }\n  }\n  return allValues\n}\n\nconst defaultKeyAttributes = {\n  maxRanking: Infinity as Ranking,\n  minRanking: -Infinity as Ranking,\n}\n/**\n * Gets all the attributes for the given accessor\n * @param accessor - the accessor from which the attributes will be retrieved\n * @return object containing the accessor's attributes\n */\nfunction getAccessorAttributes<TItem>(\n  accessor: Accessor<TItem>\n): AccessorAttributes {\n  if (typeof accessor === 'function') {\n    return defaultKeyAttributes\n  }\n  return { ...defaultKeyAttributes, ...accessor }\n}\n", "export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n\nexport const debounce = (fn: Function, ms: number) => {\n  let timeoutId: ReturnType<typeof setTimeout>\n  return function (this: any, ...args: any[]) {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => fn.apply(this, args), ms)\n  }\n}\n", "import { approxEqual, memo, notUndefined, debounce } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (typeof ResizeObserver === 'undefined') {\n    return () => {}\n  }\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(() => {\n        cb(offset, false)\n      }, instance.options.isScrollingResetDelay)\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(() => {\n        cb(offset, false)\n      }, instance.options.isScrollingResetDelay)\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number, isScrolling: boolean) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n  isScrollingResetDelay?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset =\n      typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.notify(false, false)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      ...opts,\n    }\n  }\n\n  private notify = (force: boolean, sync: boolean) => {\n    const { startIndex, endIndex } = this.range ?? {\n      startIndex: undefined,\n      endIndex: undefined,\n    }\n    const range = this.calculateRange()\n\n    if (\n      force ||\n      startIndex !== range?.startIndex ||\n      endIndex !== range?.endIndex\n    ) {\n      this.options.onChange?.(this, sync)\n    }\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.notify(false, false)\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.scrollOffset < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n\n          const prevIsScrolling = this.isScrolling\n          this.isScrolling = isScrolling\n\n          this.notify(prevIsScrolling !== isScrolling, isScrolling)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            startIndex: range.startIndex,\n            endIndex: range.endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const item = this.measurementsCache[this.indexFromElement(node)]\n\n    if (!item || !node.isConnected) {\n      this.measureElementCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.measureElementCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    this.resizeItem(item, measuredItemSize)\n  }\n\n  resizeItem = (item: VirtualItem, size: number) => {\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.scrollOffset + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(true, false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.options.onChange?.(this, false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n", "import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n", "import dayjs from 'dayjs';\nimport { DatePickerType, DatePickerValue } from '../types';\n\ninterface DateFormatterInput {\n  type: DatePickerType;\n  date: DatePickerValue<DatePickerType>;\n  locale: string;\n  format: string;\n  labelSeparator: string;\n}\n\nexport type DateFormatter = (input: DateFormatterInput) => string;\n\nexport function defaultDateFormatter({\n  type,\n  date,\n  locale,\n  format,\n  labelSeparator,\n}: DateFormatterInput) {\n  const formatDate = (value: Date) => dayjs(value).locale(locale).format(format);\n\n  if (type === 'default') {\n    return date === null ? '' : formatDate(date as Date);\n  }\n\n  if (type === 'multiple') {\n    return (date as Date[]).map(formatDate).join(', ');\n  }\n\n  if (type === 'range' && Array.isArray(date)) {\n    if (date[0] && date[1]) {\n      return `${formatDate(date[0])} ${labelSeparator} ${formatDate(date[1])}`;\n    }\n\n    if (date[0]) {\n      return `${formatDate(date[0])} ${labelSeparator} `;\n    }\n\n    return '';\n  }\n\n  return '';\n}\n\ninterface GetFormattedDateInput extends DateFormatterInput {\n  formatter?: DateFormatter;\n}\n\nexport function getFormattedDate({ formatter, ...others }: GetFormattedDateInput) {\n  return (formatter || defaultDateFormatter)(others);\n}\n", "import { RefObject } from 'react';\n\ntype ControlsRef = RefObject<HTMLButtonElement[][][]>;\ntype Direction = 'up' | 'down' | 'left' | 'right';\n\ntype NextIndexInput = Omit<ShiftFocusInput, 'controlsRef'>;\n\nfunction getNextIndex({ direction, levelIndex, rowIndex, cellIndex, size }: NextIndexInput) {\n  switch (direction) {\n    case 'up':\n      if (levelIndex === 0 && rowIndex === 0) {\n        return null;\n      }\n      if (rowIndex === 0) {\n        return {\n          levelIndex: levelIndex - 1,\n          rowIndex:\n            cellIndex <= size[levelIndex - 1][size[levelIndex - 1].length - 1] - 1\n              ? size[levelIndex - 1].length - 1\n              : size[levelIndex - 1].length - 2,\n          cellIndex,\n        };\n      }\n      return {\n        levelIndex,\n        rowIndex: rowIndex - 1,\n        cellIndex,\n      };\n\n    case 'down':\n      if (rowIndex === size[levelIndex].length - 1) {\n        return {\n          levelIndex: levelIndex + 1,\n          rowIndex: 0,\n          cellIndex,\n        };\n      }\n      if (\n        rowIndex === size[levelIndex].length - 2 &&\n        cellIndex >= size[levelIndex][size[levelIndex].length - 1]\n      ) {\n        return {\n          levelIndex: levelIndex + 1,\n          rowIndex: 0,\n          cellIndex,\n        };\n      }\n      return {\n        levelIndex,\n        rowIndex: rowIndex + 1,\n        cellIndex,\n      };\n\n    case 'left':\n      if (levelIndex === 0 && rowIndex === 0 && cellIndex === 0) {\n        return null;\n      }\n      if (rowIndex === 0 && cellIndex === 0) {\n        return {\n          levelIndex: levelIndex - 1,\n          rowIndex: size[levelIndex - 1].length - 1,\n          cellIndex: size[levelIndex - 1][size[levelIndex - 1].length - 1] - 1,\n        };\n      }\n      if (cellIndex === 0) {\n        return {\n          levelIndex,\n          rowIndex: rowIndex - 1,\n          cellIndex: size[levelIndex][rowIndex - 1] - 1,\n        };\n      }\n      return {\n        levelIndex,\n        rowIndex,\n        cellIndex: cellIndex - 1,\n      };\n\n    case 'right':\n      if (\n        rowIndex === size[levelIndex].length - 1 &&\n        cellIndex === size[levelIndex][rowIndex] - 1\n      ) {\n        return {\n          levelIndex: levelIndex + 1,\n          rowIndex: 0,\n          cellIndex: 0,\n        };\n      }\n      if (cellIndex === size[levelIndex][rowIndex] - 1) {\n        return {\n          levelIndex,\n          rowIndex: rowIndex + 1,\n          cellIndex: 0,\n        };\n      }\n      return {\n        levelIndex,\n        rowIndex,\n        cellIndex: cellIndex + 1,\n      };\n\n    default:\n      return { levelIndex, rowIndex, cellIndex };\n  }\n}\n\ninterface ShiftFocusInput {\n  controlsRef: ControlsRef;\n  direction: Direction;\n  levelIndex: number;\n  rowIndex: number;\n  cellIndex: number;\n  size: number[][];\n}\n\nfunction focusOnNextFocusableControl({\n  controlsRef,\n  direction,\n  levelIndex,\n  rowIndex,\n  cellIndex,\n  size,\n}: ShiftFocusInput) {\n  const nextIndex = getNextIndex({ direction, size, rowIndex, cellIndex, levelIndex });\n\n  if (!nextIndex) {\n    return;\n  }\n\n  const controlToFocus =\n    controlsRef.current?.[nextIndex.levelIndex]?.[nextIndex.rowIndex]?.[nextIndex.cellIndex];\n\n  if (!controlToFocus) {\n    return;\n  }\n\n  if (\n    controlToFocus.disabled ||\n    controlToFocus.getAttribute('data-hidden') ||\n    controlToFocus.getAttribute('data-outside')\n  ) {\n    focusOnNextFocusableControl({\n      controlsRef,\n      direction,\n      levelIndex: nextIndex.levelIndex,\n      cellIndex: nextIndex.cellIndex,\n      rowIndex: nextIndex.rowIndex,\n      size,\n    });\n  } else {\n    controlToFocus.focus();\n  }\n}\n\nfunction getDirection(key: KeyboardEvent['key']): Direction {\n  switch (key) {\n    case 'ArrowDown':\n      return 'down';\n    case 'ArrowUp':\n      return 'up';\n    case 'ArrowRight':\n      return 'right';\n    case 'ArrowLeft':\n      return 'left';\n    default:\n      return null!;\n  }\n}\n\nfunction getControlsSize(controlsRef: ControlsRef) {\n  return controlsRef.current?.map((column) => column.map((row) => row.length));\n}\n\ninterface HandleControlKeyDownInput {\n  controlsRef: ControlsRef;\n  levelIndex: number;\n  rowIndex: number;\n  cellIndex: number;\n  event: React.KeyboardEvent<HTMLButtonElement>;\n}\n\nexport function handleControlKeyDown({\n  controlsRef,\n  levelIndex,\n  rowIndex,\n  cellIndex,\n  event,\n}: HandleControlKeyDownInput) {\n  const direction = getDirection(event.key);\n\n  if (direction) {\n    event.preventDefault();\n\n    const size = getControlsSize(controlsRef)!;\n\n    focusOnNextFocusableControl({\n      controlsRef,\n      direction,\n      levelIndex,\n      rowIndex,\n      cellIndex,\n      size,\n    });\n  }\n}\n", "export function assignTime(originalDate: Date, resultDate: Date) {\n  if (!originalDate || !resultDate) {\n    return resultDate;\n  }\n\n  const hours = originalDate.getHours();\n  const minutes = originalDate.getMinutes();\n  const seconds = originalDate.getSeconds();\n  const ms = originalDate.getMilliseconds();\n\n  const result = new Date(resultDate);\n  result.setHours(hours);\n  result.setMinutes(minutes);\n  result.setSeconds(seconds);\n  result.setMilliseconds(ms);\n\n  return result;\n}\n", "import dayjs from 'dayjs';\nimport timezonePlugin from 'dayjs/plugin/timezone.js';\nimport utcPlugin from 'dayjs/plugin/utc.js';\n\ndayjs.extend(utcPlugin);\ndayjs.extend(timezonePlugin);\n\nexport function getTimezoneOffset(date: Date, timezone?: string) {\n  if (timezone) {\n    return dayjs(date).tz(timezone).utcOffset() + date.getTimezoneOffset();\n  }\n  return 0;\n}\n", "import dayjs from 'dayjs';\nimport { DatesRangeValue, DateValue } from '../types';\nimport { getTimezoneOffset } from './get-timezone-offset';\n\ntype TimeShiftDirection = 'add' | 'remove';\n\nconst updateTimezone = (\n  date: DateValue | undefined,\n  timezone?: string,\n  direction?: TimeShiftDirection\n): DateValue => {\n  if (!date) {\n    return null;\n  }\n  if (!timezone) {\n    return date;\n  }\n  let offset = getTimezoneOffset(date, timezone);\n  if (direction === 'remove') {\n    offset *= -1;\n  }\n  return dayjs(date).add(offset, 'minutes').toDate();\n};\n\nexport function shiftTimezone<T extends DateValue | Date[] | DatesRangeValue | undefined>(\n  direction: TimeShiftDirection,\n  date: T,\n  timezone?: string,\n  disabled?: boolean\n): T {\n  if (disabled || !date) {\n    return date;\n  }\n  if (Array.isArray(date)) {\n    return date.map((d) => updateTimezone(d, timezone, direction)) as T;\n  }\n  return updateTimezone(date, timezone, direction) as T;\n}\n", "import dayjs from 'dayjs';\nimport { shiftTimezone } from './shift-timezone';\n\ninterface GetDefaultClampedDate {\n  minDate: Date | undefined;\n  maxDate: Date | undefined;\n  timezone?: string;\n}\n\nexport function getDefaultClampedDate({ minDate, maxDate, timezone }: GetDefaultClampedDate) {\n  const today = shiftTimezone('add', new Date(), timezone);\n\n  if (!minDate && !maxDate) {\n    return today;\n  }\n\n  if (minDate && dayjs(today).isBefore(minDate)) {\n    return minDate;\n  }\n\n  if (maxDate && dayjs(today).isAfter(maxDate)) {\n    return maxDate;\n  }\n\n  return today;\n}\n", "import { createContext } from 'react';\nimport { DayOfWeek } from '../../types';\n\nexport interface DatesProviderValue {\n  locale: string;\n  timezone: string | null;\n  firstDayOfWeek: DayOfWeek;\n  weekendDays: DayOfWeek[];\n  labelSeparator: string;\n  consistentWeeks: boolean;\n}\n\nexport type DatesProviderSettings = Partial<DatesProviderValue>;\n\nexport const DATES_PROVIDER_DEFAULT_SETTINGS: DatesProviderValue = {\n  locale: 'en',\n  timezone: null,\n  firstDayOfWeek: 1,\n  weekendDays: [0, 6],\n  labelSeparator: '–',\n  consistentWeeks: false,\n};\n\nexport const DatesProviderContext = createContext(DATES_PROVIDER_DEFAULT_SETTINGS);\n\nexport interface DatesProviderProps {\n  settings: DatesProviderSettings;\n  children?: React.ReactNode;\n}\n\nexport function DatesProvider({ settings, children }: DatesProviderProps) {\n  return (\n    <DatesProviderContext.Provider value={{ ...DATES_PROVIDER_DEFAULT_SETTINGS, ...settings }}>\n      {children}\n    </DatesProviderContext.Provider>\n  );\n}\n", "import { useCallback, useContext } from 'react';\nimport { DayOfWeek } from '../../types';\nimport { DatesProviderContext } from './DatesProvider';\n\nexport function useDatesContext() {\n  const ctx = useContext(DatesProviderContext);\n  const getLocale = useCallback((input?: string) => input || ctx.locale, [ctx.locale]);\n\n  const getTimezone = useCallback(\n    (input?: string) => input || ctx.timezone || undefined,\n    [ctx.timezone]\n  );\n\n  const getFirstDayOfWeek = useCallback(\n    (input?: DayOfWeek) => (typeof input === 'number' ? input : ctx.firstDayOfWeek),\n    [ctx.firstDayOfWeek]\n  );\n\n  const getWeekendDays = useCallback(\n    (input?: DayOfWeek[]) => (Array.isArray(input) ? input : ctx.weekendDays),\n    [ctx.weekendDays]\n  );\n\n  const getLabelSeparator = useCallback(\n    (input?: string) => (typeof input === 'string' ? input : ctx.labelSeparator),\n    [ctx.labelSeparator]\n  );\n\n  return {\n    ...ctx,\n    getLocale,\n    getTimezone,\n    getFirstDayOfWeek,\n    getWeekendDays,\n    getLabelSeparator,\n  };\n}\n", "import { DatePickerType, DatesRangeValue, DateValue } from '../../types';\n\nexport type HiddenDatesInputValue = DatesRangeValue | DateValue | DateValue[];\n\nexport interface HiddenDatesInputProps {\n  value: HiddenDatesInputValue;\n  type: DatePickerType;\n  name: string | undefined;\n  form: string | undefined;\n}\n\nfunction formatValue(value: HiddenDatesInputValue, type: DatePickerType) {\n  if (type === 'range' && Array.isArray(value)) {\n    const [startDate, endDate] = value;\n    if (!startDate) {\n      return '';\n    }\n\n    if (!endDate) {\n      return `${startDate.toISOString()} –`;\n    }\n\n    return `${startDate.toISOString()} – ${endDate.toISOString()}`;\n  }\n\n  if (type === 'multiple' && Array.isArray(value)) {\n    return value\n      .map((date) => date?.toISOString())\n      .filter(Boolean)\n      .join(', ');\n  }\n\n  if (!Array.isArray(value) && value) {\n    return value.toISOString();\n  }\n\n  return '';\n}\n\nexport function HiddenDatesInput({ value, type, name, form }: HiddenDatesInputProps) {\n  return <input type=\"hidden\" value={formatValue(value, type)} name={name} form={form} />;\n}\n\nHiddenDatesInput.displayName = '@mantine/dates/HiddenDatesInput';\n", "'use client';\nvar classes = {\"input\":\"m_468e7eda\"};\n\nexport { classes as default };\n//# sourceMappingURL=TimeInput.module.css.mjs.map\n", "import cx from 'clsx';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  InputBase,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport classes from './TimeInput.module.css';\n\nexport interface TimeInputProps\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<TimeInputFactory>,\n    ElementProps<'input', 'size'> {\n  /** Determines whether seconds input should be rendered */\n  withSeconds?: boolean;\n\n  /** Minimum possible string time, if withSeconds is true, time should be in format HH:mm:ss, otherwise HH:mm */\n  minTime?: string;\n\n  /** Maximum possible string time, if withSeconds is true, time should be in format HH:mm:ss, otherwise HH:mm */\n  maxTime?: string;\n}\n\nexport type TimeInputFactory = Factory<{\n  props: TimeInputProps;\n  ref: HTMLInputElement;\n  stylesNames: __InputStylesNames;\n}>;\n\nconst defaultProps: Partial<TimeInputProps> = {};\n\nexport const TimeInput = factory<TimeInputFactory>((_props, ref) => {\n  const props = useProps('TimeInput', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    withSeconds,\n    minTime,\n    maxTime,\n    value,\n    onChange,\n    ...others\n  } = props;\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<TimeInputFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  /**\n   * Check if time is within limits or not\n   * If the given value is within limits, return 0\n   * If the given value is greater than the maxTime, return 1\n   * If the given value is less than the minTime, return -1\n   */\n  const checkIfTimeLimitExceeded = (val: string) => {\n    if (minTime !== undefined || maxTime !== undefined) {\n      const [hours, minutes, seconds] = val.split(':').map(Number);\n\n      if (minTime) {\n        const [minHours, minMinutes, minSeconds] = minTime.split(':').map(Number);\n\n        if (\n          hours < minHours ||\n          (hours === minHours && minutes < minMinutes) ||\n          (withSeconds && hours === minHours && minutes === minMinutes && seconds < minSeconds)\n        ) {\n          return -1;\n        }\n      }\n\n      if (maxTime) {\n        const [maxHours, maxMinutes, maxSeconds] = maxTime.split(':').map(Number);\n\n        if (\n          hours > maxHours ||\n          (hours === maxHours && minutes > maxMinutes) ||\n          (withSeconds && hours === maxHours && minutes === maxMinutes && seconds > maxSeconds)\n        ) {\n          return 1;\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  const onTimeBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    props.onBlur?.(event);\n    if (minTime !== undefined || maxTime !== undefined) {\n      const val = event.currentTarget.value;\n\n      if (val) {\n        const check = checkIfTimeLimitExceeded(val);\n        if (check === 1) {\n          event.currentTarget.value = maxTime!;\n          props.onChange?.(event);\n        } else if (check === -1) {\n          event.currentTarget.value = minTime!;\n          props.onChange?.(event);\n        }\n      }\n    }\n  };\n\n  return (\n    <InputBase\n      classNames={{ ...resolvedClassNames, input: cx(classes.input, resolvedClassNames?.input) }}\n      styles={resolvedStyles}\n      unstyled={unstyled}\n      ref={ref}\n      value={value}\n      {...others}\n      step={withSeconds ? 1 : 60}\n      onChange={onChange}\n      onBlur={onTimeBlur}\n      type=\"time\"\n      __staticSelector=\"TimeInput\"\n    />\n  );\n});\n\nTimeInput.classes = InputBase.classes;\nTimeInput.displayName = '@mantine/dates/TimeInput';\n", "'use client';\nvar classes = {\"day\":\"m_396ce5cb\"};\n\nexport { classes as default };\n//# sourceMappingURL=Day.module.css.mjs.map\n", "import dayjs from 'dayjs';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSize,\n  MantineSize,\n  StylesApiProps,\n  UnstyledButton,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { shiftTimezone } from '../../utils';\nimport { useDatesContext } from '../DatesProvider';\nimport classes from './Day.module.css';\n\nexport type DayStylesNames = 'day';\nexport type DayCssVariables = {\n  day: '--day-size';\n};\n\nexport interface DayProps extends BoxProps, StylesApiProps<DayFactory>, ElementProps<'button'> {\n  __staticSelector?: string;\n\n  /** Determines which element should be used as root, `'button'` by default, `'div'` if static prop is set */\n  static?: boolean;\n\n  /** Date that should be displayed */\n  date: Date;\n\n  /** Control width and height of the day, `'sm'` by default */\n  size?: MantineSize;\n\n  /** Determines whether the day should be considered to be a weekend, `false` by default */\n  weekend?: boolean;\n\n  /** Determines whether the day is outside of the current month, `false` by default */\n  outside?: boolean;\n\n  /** Determines whether the day is selected, `false` by default */\n  selected?: boolean;\n\n  /** Determines whether the day should not be displayed, `false` by default */\n  hidden?: boolean;\n\n  /** Determines whether the day is selected in range, `false` by default */\n  inRange?: boolean;\n\n  /** Determines whether the day is first in range selection, `false` by default */\n  firstInRange?: boolean;\n\n  /** Determines whether the day is last in range selection, `false` by default */\n  lastInRange?: boolean;\n\n  /** Controls day value rendering */\n  renderDay?: (date: Date) => React.ReactNode;\n}\n\nexport type DayFactory = Factory<{\n  props: DayProps;\n  ref: HTMLButtonElement;\n  stylesNames: DayStylesNames;\n  vars: DayCssVariables;\n}>;\n\nconst defaultProps: Partial<DayProps> = {};\n\nconst varsResolver = createVarsResolver<DayFactory>((_, { size }) => ({\n  day: {\n    '--day-size': getSize(size, 'day-size'),\n  },\n}));\n\nexport const Day = factory<DayFactory>((_props, ref) => {\n  const props = useProps('Day', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    date,\n    disabled,\n    __staticSelector,\n    weekend,\n    outside,\n    selected,\n    renderDay,\n    inRange,\n    firstInRange,\n    lastInRange,\n    hidden,\n    static: isStatic,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<DayFactory>({\n    name: __staticSelector || 'Day',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'day',\n  });\n\n  const ctx = useDatesContext();\n\n  return (\n    <UnstyledButton<any>\n      {...getStyles('day', { style: hidden ? { display: 'none' } : undefined })}\n      component={isStatic ? 'div' : 'button'}\n      ref={ref}\n      disabled={disabled}\n      data-today={\n        dayjs(date).isSame(shiftTimezone('add', new Date(), ctx.getTimezone()), 'day') || undefined\n      }\n      data-hidden={hidden || undefined}\n      data-disabled={disabled || undefined}\n      data-weekend={(!disabled && !outside && weekend) || undefined}\n      data-outside={(!disabled && outside) || undefined}\n      data-selected={(!disabled && selected) || undefined}\n      data-in-range={(inRange && !disabled) || undefined}\n      data-first-in-range={(firstInRange && !disabled) || undefined}\n      data-last-in-range={(lastInRange && !disabled) || undefined}\n      data-static={isStatic || undefined}\n      unstyled={unstyled}\n      {...others}\n    >\n      {renderDay?.(date) || date.getDate()}\n    </UnstyledButton>\n  );\n});\n\nDay.classes = classes;\nDay.displayName = '@mantine/dates/Day';\n", "import dayjs from 'dayjs';\nimport type { DayOfWeek } from '../../../types';\n\ninterface GetWeekdaysNamesInput {\n  locale: string;\n  format?: string | ((date: Date) => React.ReactNode);\n  firstDayOfWeek?: DayOfWeek;\n}\n\nexport function getWeekdayNames({\n  locale,\n  format = 'dd',\n  firstDayOfWeek = 1,\n}: GetWeekdaysNamesInput) {\n  const baseDate = dayjs().day(firstDayOfWeek);\n  const labels: Array<string | React.ReactNode> = [];\n\n  for (let i = 0; i < 7; i += 1) {\n    if (typeof format === 'string') {\n      labels.push(dayjs(baseDate).add(i, 'days').locale(locale).format(format));\n    } else {\n      labels.push(format(dayjs(baseDate).add(i, 'days').toDate()));\n    }\n  }\n\n  return labels;\n}\n", "'use client';\nvar classes = {\"weekday\":\"m_18a3eca\"};\n\nexport { classes as default };\n//# sourceMappingURL=WeekdaysRow.module.css.mjs.map\n", "import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  getSpacing,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport type { DayOfWeek } from '../../types';\nimport { useDatesContext } from '../DatesProvider';\nimport { getWeekdayNames } from './get-weekdays-names/get-weekdays-names';\nimport classes from './WeekdaysRow.module.css';\n\nexport type WeekdaysRowStylesNames = 'weekday' | 'weekdaysRow';\nexport type WeekdaysRowCssVariables = {\n  weekdaysRow: '--wr-fz' | '--wr-spacing';\n};\n\nexport interface WeekdaysRowProps\n  extends BoxProps,\n    StylesApiProps<WeekdaysRowFactory>,\n    ElementProps<'tr'> {\n  __staticSelector?: string;\n\n  /** Controls size */\n  size?: MantineSize;\n\n  /** dayjs locale, defaults to value defined in DatesProvider */\n  locale?: string;\n\n  /** number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday */\n  firstDayOfWeek?: DayOfWeek;\n\n  /** dayjs format to get weekday name, defaults to \"dd\" */\n  weekdayFormat?: string | ((date: Date) => React.ReactNode);\n\n  /** Choose cell type that will be used to render weekdays, defaults to th */\n  cellComponent?: 'td' | 'th';\n}\n\nexport type WeekdaysRowFactory = Factory<{\n  props: WeekdaysRowProps;\n  ref: HTMLTableRowElement;\n  stylesNames: WeekdaysRowStylesNames;\n  vars: WeekdaysRowCssVariables;\n}>;\n\nconst defaultProps: Partial<WeekdaysRowProps> = {};\n\nconst varsResolver = createVarsResolver<WeekdaysRowFactory>((_, { size }) => ({\n  weekdaysRow: {\n    '--wr-fz': getFontSize(size),\n    '--wr-spacing': getSpacing(size),\n  },\n}));\n\nexport const WeekdaysRow = factory<WeekdaysRowFactory>((_props, ref) => {\n  const props = useProps('WeekdaysRow', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    locale,\n    firstDayOfWeek,\n    weekdayFormat,\n    cellComponent: CellComponent = 'th',\n    __staticSelector,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<WeekdaysRowFactory>({\n    name: __staticSelector || 'WeekdaysRow',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'weekdaysRow',\n  });\n\n  const ctx = useDatesContext();\n\n  const weekdays = getWeekdayNames({\n    locale: ctx.getLocale(locale),\n    format: weekdayFormat,\n    firstDayOfWeek: ctx.getFirstDayOfWeek(firstDayOfWeek),\n  }).map((weekday, index) => (\n    <CellComponent key={index} {...getStyles('weekday')}>\n      {weekday}\n    </CellComponent>\n  ));\n\n  return (\n    <Box component=\"tr\" ref={ref} {...getStyles('weekdaysRow')} {...others}>\n      {weekdays}\n    </Box>\n  );\n});\n\nWeekdaysRow.classes = classes;\nWeekdaysRow.displayName = '@mantine/dates/WeekdaysRow';\n", "import type { DayOfWeek } from '../../../types';\n\nexport function getEndOfWeek(date: Date, firstDayOfWeek: DayOfWeek = 1) {\n  const value = new Date(date);\n  const lastDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\n\n  while (value.getDay() !== lastDayOfWeek) {\n    value.setDate(value.getDate() + 1);\n  }\n\n  return value;\n}\n", "import type { DayOfWeek } from '../../../types';\n\nexport function getStartOfWeek(date: Date, firstDayOfWeek: DayOfWeek = 1) {\n  const value = new Date(date);\n\n  while (value.getDay() !== firstDayOfWeek) {\n    value.setDate(value.getDate() - 1);\n  }\n\n  return value;\n}\n", "import { DayOfWeek } from '../../../types';\nimport { getEndOfWeek } from '../get-end-of-week/get-end-of-week';\nimport { getStartOfWeek } from '../get-start-of-week/get-start-of-week';\n\ninterface GetMonthDaysInput {\n  month: Date;\n  firstDayOfWeek: DayOfWeek | undefined;\n  consistentWeeks: boolean | undefined;\n}\n\nexport function getMonthDays({\n  month,\n  firstDayOfWeek = 1,\n  consistentWeeks,\n}: GetMonthDaysInput): Date[][] {\n  const currentMonth = month.getMonth();\n  const startOfMonth = new Date(month.getFullYear(), currentMonth, 1);\n  const endOfMonth = new Date(month.getFullYear(), month.getMonth() + 1, 0);\n  const endDate = getEndOfWeek(endOfMonth, firstDayOfWeek);\n  const date = getStartOfWeek(startOfMonth, firstDayOfWeek);\n  const weeks: Date[][] = [];\n\n  while (date <= endDate) {\n    const days: Date[] = [];\n\n    for (let i = 0; i < 7; i += 1) {\n      days.push(new Date(date));\n      date.setDate(date.getDate() + 1);\n    }\n\n    weeks.push(days);\n  }\n\n  if (consistentWeeks && weeks.length < 6) {\n    const lastWeek = weeks[weeks.length - 1];\n    const lastDay = lastWeek[lastWeek.length - 1];\n    const nextDay = new Date(lastDay);\n    nextDay.setDate(nextDay.getDate() + 1);\n\n    while (weeks.length < 6) {\n      const days: Date[] = [];\n\n      for (let i = 0; i < 7; i += 1) {\n        days.push(new Date(nextDay));\n        nextDay.setDate(nextDay.getDate() + 1);\n      }\n\n      weeks.push(days);\n    }\n  }\n\n  return weeks;\n}\n", "export function isSameMonth(date: Date, comparison: Date) {\n  return (\n    date.getFullYear() === comparison.getFullYear() && date.getMonth() === comparison.getMonth()\n  );\n}\n", "import dayjs from 'dayjs';\n\nexport function isAfterMinDate(date: Date, minDate?: Date) {\n  return minDate instanceof Date\n    ? dayjs(date).isAfter(dayjs(minDate).subtract(1, 'day'), 'day')\n    : true;\n}\n", "import dayjs from 'dayjs';\n\nexport function isBeforeMaxDate(date: Date, maxDate?: Date) {\n  return maxDate instanceof Date ? dayjs(date).isBefore(dayjs(maxDate).add(1, 'day'), 'day') : true;\n}\n", "import dayjs from 'dayjs';\nimport { DayProps } from '../../Day/Day';\nimport { isAfterMinDate } from '../is-after-min-date/is-after-min-date';\nimport { isBeforeMaxDate } from '../is-before-max-date/is-before-max-date';\nimport { isSameMonth } from '../is-same-month/is-same-month';\n\nexport function getDateInTabOrder(\n  dates: Date[][],\n  minDate: Date | undefined,\n  maxDate: Date | undefined,\n  getDateControlProps: ((date: Date) => Partial<DayProps>) | undefined,\n  excludeDate: ((date: Date) => boolean) | undefined,\n  hideOutsideDates: boolean | undefined,\n  month: Date\n) {\n  const enabledDates = dates\n    .flat()\n    .filter(\n      (date) =>\n        isBeforeMaxDate(date, maxDate) &&\n        isAfterMinDate(date, minDate) &&\n        !excludeDate?.(date) &&\n        !getDateControlProps?.(date)?.disabled &&\n        (!hideOutsideDates || isSameMonth(date, month))\n    );\n\n  const selectedDate = enabledDates.find((date) => getDateControlProps?.(date)?.selected);\n\n  if (selectedDate) {\n    return selectedDate;\n  }\n\n  const currentDate = enabledDates.find((date) => dayjs().isSame(date, 'date'));\n\n  if (currentDate) {\n    return currentDate;\n  }\n\n  return enabledDates[0];\n}\n", "'use client';\nvar classes = {\"month\":\"m_cc9820d3\",\"monthCell\":\"m_8f457cd5\"};\n\nexport { classes as default };\n//# sourceMappingURL=Month.module.css.mjs.map\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ControlKeydownPayload, DayOfWeek } from '../../types';\nimport { useDatesContext } from '../DatesProvider';\nimport { Day, DayProps, DayStylesNames } from '../Day';\nimport { WeekdaysRow } from '../WeekdaysRow';\nimport { getDateInTabOrder } from './get-date-in-tab-order/get-date-in-tab-order';\nimport { getMonthDays } from './get-month-days/get-month-days';\nimport { isAfterMinDate } from './is-after-min-date/is-after-min-date';\nimport { isBeforeMaxDate } from './is-before-max-date/is-before-max-date';\nimport { isSameMonth } from './is-same-month/is-same-month';\nimport classes from './Month.module.css';\n\nexport type MonthStylesNames =\n  | 'month'\n  | 'weekday'\n  | 'weekdaysRow'\n  | 'monthRow'\n  | 'month'\n  | 'monthThead'\n  | 'monthTbody'\n  | 'monthCell'\n  | DayStylesNames;\n\nexport interface MonthSettings {\n  /** Determines whether propagation for Escape key should be stopped */\n  __stopPropagation?: boolean;\n\n  /** Prevents focus shift when buttons are clicked */\n  __preventFocus?: boolean;\n\n  /** Called when day is clicked with click event and date */\n  __onDayClick?: (event: React.MouseEvent<HTMLButtonElement>, date: Date) => void;\n\n  /** Called when mouse enters day */\n  __onDayMouseEnter?: (event: React.MouseEvent<HTMLButtonElement>, date: Date) => void;\n\n  /** Called when any keydown event is registered on day, used for arrows navigation */\n  __onDayKeyDown?: (\n    event: React.KeyboardEvent<HTMLButtonElement>,\n    payload: ControlKeydownPayload\n  ) => void;\n\n  /** Assigns ref of every day based on its position in the table, used for arrows navigation */\n  __getDayRef?: (rowIndex: number, cellIndex: number, node: HTMLButtonElement) => void;\n\n  /** dayjs locale, defaults to value defined in DatesProvider */\n  locale?: string;\n\n  /** number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday */\n  firstDayOfWeek?: DayOfWeek;\n\n  /** dayjs format for weekdays names, defaults to \"dd\" */\n  weekdayFormat?: string | ((date: Date) => React.ReactNode);\n\n  /** Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider */\n  weekendDays?: DayOfWeek[];\n\n  /** Adds props to Day component based on date */\n  getDayProps?: (date: Date) => Omit<Partial<DayProps>, 'classNames' | 'styles' | 'vars'>;\n\n  /** Callback function to determine whether the day should be disabled */\n  excludeDate?: (date: Date) => boolean;\n\n  /** Minimum possible date */\n  minDate?: Date;\n\n  /** Maximum possible date */\n  maxDate?: Date;\n\n  /** Controls day value rendering */\n  renderDay?: (date: Date) => React.ReactNode;\n\n  /** Determines whether outside dates should be hidden, defaults to false */\n  hideOutsideDates?: boolean;\n\n  /** Determines whether weekdays row should be hidden, defaults to false */\n  hideWeekdays?: boolean;\n\n  /** Assigns aria-label to days based on date */\n  getDayAriaLabel?: (date: Date) => string;\n\n  /** Controls size */\n  size?: MantineSize;\n\n  /** Determines whether controls should be separated by spacing, true by default */\n  withCellSpacing?: boolean;\n}\n\nexport interface MonthProps\n  extends BoxProps,\n    MonthSettings,\n    StylesApiProps<MonthFactory>,\n    ElementProps<'div'> {\n  __staticSelector?: string;\n\n  /** Month to display */\n  month: Date;\n\n  /** Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way  */\n  static?: boolean;\n}\n\nexport type MonthFactory = Factory<{\n  props: MonthProps;\n  ref: HTMLTableElement;\n  stylesNames: MonthStylesNames;\n}>;\n\nconst defaultProps: Partial<MonthProps> = {\n  withCellSpacing: true,\n};\n\nexport const Month = factory<MonthFactory>((_props, ref) => {\n  const props = useProps('Month', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    __staticSelector,\n    locale,\n    firstDayOfWeek,\n    weekdayFormat,\n    month,\n    weekendDays,\n    getDayProps,\n    excludeDate,\n    minDate,\n    maxDate,\n    renderDay,\n    hideOutsideDates,\n    hideWeekdays,\n    getDayAriaLabel,\n    static: isStatic,\n    __getDayRef,\n    __onDayKeyDown,\n    __onDayClick,\n    __onDayMouseEnter,\n    __preventFocus,\n    __stopPropagation,\n    withCellSpacing,\n    size,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<MonthFactory>({\n    name: __staticSelector || 'Month',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    rootSelector: 'month',\n  });\n\n  const ctx = useDatesContext();\n  const dates = getMonthDays({\n    month,\n    firstDayOfWeek: ctx.getFirstDayOfWeek(firstDayOfWeek),\n    consistentWeeks: ctx.consistentWeeks,\n  });\n\n  const dateInTabOrder = getDateInTabOrder(\n    dates,\n    minDate,\n    maxDate,\n    getDayProps,\n    excludeDate,\n    hideOutsideDates,\n    month\n  );\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<MonthFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const rows = dates.map((row, rowIndex) => {\n    const cells = row.map((date, cellIndex) => {\n      const outside = !isSameMonth(date, month);\n      const ariaLabel =\n        getDayAriaLabel?.(date) ||\n        dayjs(date)\n          .locale(locale || ctx.locale)\n          .format('D MMMM YYYY');\n      const dayProps = getDayProps?.(date);\n      const isDateInTabOrder = dayjs(date).isSame(dateInTabOrder, 'date');\n\n      return (\n        <td\n          key={date.toString()}\n          {...getStyles('monthCell')}\n          data-with-spacing={withCellSpacing || undefined}\n        >\n          <Day\n            __staticSelector={__staticSelector || 'Month'}\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n            data-mantine-stop-propagation={__stopPropagation || undefined}\n            renderDay={renderDay}\n            date={date}\n            size={size}\n            weekend={ctx.getWeekendDays(weekendDays).includes(date.getDay() as DayOfWeek)}\n            outside={outside}\n            hidden={hideOutsideDates ? outside : false}\n            aria-label={ariaLabel}\n            static={isStatic}\n            disabled={\n              excludeDate?.(date) ||\n              !isBeforeMaxDate(date, maxDate) ||\n              !isAfterMinDate(date, minDate)\n            }\n            ref={(node) => __getDayRef?.(rowIndex, cellIndex, node!)}\n            {...dayProps}\n            onKeyDown={(event) => {\n              dayProps?.onKeyDown?.(event);\n              __onDayKeyDown?.(event, { rowIndex, cellIndex, date });\n            }}\n            onMouseEnter={(event) => {\n              dayProps?.onMouseEnter?.(event);\n              __onDayMouseEnter?.(event, date);\n            }}\n            onClick={(event) => {\n              dayProps?.onClick?.(event);\n\n              __onDayClick?.(event, date);\n            }}\n            onMouseDown={(event) => {\n              dayProps?.onMouseDown?.(event);\n              __preventFocus && event.preventDefault();\n            }}\n            tabIndex={__preventFocus || !isDateInTabOrder ? -1 : 0}\n          />\n        </td>\n      );\n    });\n\n    return (\n      <tr key={rowIndex} {...getStyles('monthRow')}>\n        {cells}\n      </tr>\n    );\n  });\n\n  return (\n    <Box component=\"table\" {...getStyles('month')} size={size} ref={ref} {...others}>\n      {!hideWeekdays && (\n        <thead {...getStyles('monthThead')}>\n          <WeekdaysRow\n            __staticSelector={__staticSelector || 'Month'}\n            locale={locale}\n            firstDayOfWeek={firstDayOfWeek}\n            weekdayFormat={weekdayFormat}\n            size={size}\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n          />\n        </thead>\n      )}\n      <tbody {...getStyles('monthTbody')}>{rows}</tbody>\n    </Box>\n  );\n});\n\nMonth.classes = classes;\nMonth.displayName = '@mantine/dates/Month';\n", "'use client';\nvar classes = {\"pickerControl\":\"m_dc6a3c71\"};\n\nexport { classes as default };\n//# sourceMappingURL=PickerControl.module.css.mjs.map\n", "import {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  getSize,\n  MantineSize,\n  StylesApiProps,\n  UnstyledButton,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport classes from './PickerControl.module.css';\n\nexport type PickerControlStylesNames = 'pickerControl';\nexport type PickerControlCssVariables = {\n  pickerControl: '--dpc-size' | '--dpc-fz';\n};\n\nexport interface PickerControlProps\n  extends BoxProps,\n    StylesApiProps<PickerControlFactory>,\n    ElementProps<'button'> {\n  __staticSelector?: string;\n\n  /** Control children */\n  children?: React.ReactNode;\n\n  /** Determines whether control should be disabled */\n  disabled?: boolean;\n\n  /** Determines whether control should have selected styles */\n  selected?: boolean;\n\n  /** Determines whether control is selected in range */\n  inRange?: boolean;\n\n  /** Determines whether control is first in range selection */\n  firstInRange?: boolean;\n\n  /** Determines whether control is last in range selection */\n  lastInRange?: boolean;\n\n  /** Component size */\n  size?: MantineSize;\n}\n\nexport type PickerControlFactory = Factory<{\n  props: PickerControlProps;\n  ref: HTMLButtonElement;\n  stylesNames: PickerControlStylesNames;\n  vars: PickerControlCssVariables;\n}>;\n\nconst defaultProps: Partial<PickerControlProps> = {};\n\nconst varsResolver = createVarsResolver<PickerControlFactory>((_, { size }) => ({\n  pickerControl: {\n    '--dpc-fz': getFontSize(size),\n    '--dpc-size': getSize(size, 'dpc-size'),\n  },\n}));\n\nexport const PickerControl = factory<PickerControlFactory>((_props, ref) => {\n  const props = useProps('PickerControl', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    firstInRange,\n    lastInRange,\n    inRange,\n    __staticSelector,\n    selected,\n    disabled,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<PickerControlFactory>({\n    name: __staticSelector || 'PickerControl',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'pickerControl',\n  });\n\n  return (\n    <UnstyledButton\n      {...getStyles('pickerControl')}\n      ref={ref}\n      unstyled={unstyled}\n      data-picker-control\n      data-selected={(selected && !disabled) || undefined}\n      data-disabled={disabled || undefined}\n      data-in-range={(inRange && !disabled && !selected) || undefined}\n      data-first-in-range={(firstInRange && !disabled) || undefined}\n      data-last-in-range={(lastInRange && !disabled) || undefined}\n      disabled={disabled}\n      {...others}\n    />\n  );\n});\n\nPickerControl.classes = classes;\nPickerControl.displayName = '@mantine/dates/PickerControl';\n", "import dayjs from 'dayjs';\n\nexport function isYearDisabled(\n  year: Date,\n  minDate: Date | null | undefined,\n  maxDate: Date | null | undefined\n) {\n  if (!minDate && !maxDate) {\n    return false;\n  }\n\n  if (minDate && dayjs(year).isBefore(minDate, 'year')) {\n    return true;\n  }\n\n  if (maxDate && dayjs(year).isAfter(maxDate, 'year')) {\n    return true;\n  }\n\n  return false;\n}\n", "import dayjs from 'dayjs';\nimport { PickerControlProps } from '../../PickerControl';\nimport { isYearDisabled } from '../is-year-disabled/is-year-disabled';\n\nexport function getYearInTabOrder(\n  years: Date[][],\n  minDate: Date | undefined,\n  maxDate: Date | undefined,\n  getYearControlProps: ((year: Date) => Partial<PickerControlProps>) | undefined\n) {\n  const enabledYears = years\n    .flat()\n    .filter(\n      (year) => !isYearDisabled(year, minDate, maxDate) && !getYearControlProps?.(year)?.disabled\n    );\n\n  const selectedYear = enabledYears.find((year) => getYearControlProps?.(year)?.selected);\n\n  if (selectedYear) {\n    return selectedYear;\n  }\n\n  const currentYear = enabledYears.find((year) => dayjs().isSame(year, 'year'));\n\n  if (currentYear) {\n    return currentYear;\n  }\n\n  return enabledYears[0];\n}\n", "export function getYearsData(decade: Date) {\n  const year = decade.getFullYear();\n\n  const rounded = year - (year % 10);\n\n  let currentYearIndex = 0;\n  const results: Date[][] = [[], [], [], []];\n\n  for (let i = 0; i < 4; i += 1) {\n    const max = i === 3 ? 1 : 3;\n    for (let j = 0; j < max; j += 1) {\n      results[i].push(new Date(rounded + currentYearIndex, 0));\n      currentYearIndex += 1;\n    }\n  }\n\n  return results;\n}\n", "'use client';\nvar classes = {\"yearsList\":\"m_9206547b\",\"yearsListCell\":\"m_c5a19c7d\"};\n\nexport { classes as default };\n//# sourceMappingURL=YearsList.module.css.mjs.map\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ControlsGroupSettings } from '../../types';\nimport { useDatesContext } from '../DatesProvider';\nimport { PickerControl, PickerControlProps } from '../PickerControl';\nimport { getYearInTabOrder } from './get-year-in-tab-order/get-year-in-tab-order';\nimport { getYearsData } from './get-years-data/get-years-data';\nimport { isYearDisabled } from './is-year-disabled/is-year-disabled';\nimport classes from './YearsList.module.css';\n\nexport type YearsListStylesNames =\n  | 'yearsListControl'\n  | 'yearsList'\n  | 'yearsListCell'\n  | 'yearsListRow';\n\nexport interface YearsListSettings extends ControlsGroupSettings {\n  /** Prevents focus shift when buttons are clicked */\n  __preventFocus?: boolean;\n\n  /** Determines whether propagation for Escape key should be stopped */\n  __stopPropagation?: boolean;\n\n  /** dayjs format for years list, `'YYYY'` by default  */\n  yearsListFormat?: string;\n\n  /** Adds props to year picker control based on date */\n  getYearControlProps?: (date: Date) => Partial<PickerControlProps>;\n\n  /** Component size */\n  size?: MantineSize;\n\n  /** Determines whether controls should be separated by spacing, true by default */\n  withCellSpacing?: boolean;\n}\n\nexport interface YearsListProps\n  extends BoxProps,\n    YearsListSettings,\n    StylesApiProps<YearsListFactory>,\n    ElementProps<'table'> {\n  __staticSelector?: string;\n\n  /** Decade for which years list should be displayed */\n  decade: Date;\n}\n\nexport type YearsListFactory = Factory<{\n  props: YearsListProps;\n  ref: HTMLTableElement;\n  stylesNames: YearsListStylesNames;\n}>;\n\nconst defaultProps: Partial<YearsListProps> = {\n  yearsListFormat: 'YYYY',\n  withCellSpacing: true,\n};\n\nexport const YearsList = factory<YearsListFactory>((_props, ref) => {\n  const props = useProps('YearsList', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    decade,\n    yearsListFormat,\n    locale,\n    minDate,\n    maxDate,\n    getYearControlProps,\n    __staticSelector,\n    __getControlRef,\n    __onControlKeyDown,\n    __onControlClick,\n    __onControlMouseEnter,\n    __preventFocus,\n    __stopPropagation,\n    withCellSpacing,\n    size,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<YearsListFactory>({\n    name: __staticSelector || 'YearsList',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    rootSelector: 'yearsList',\n  });\n\n  const ctx = useDatesContext();\n\n  const years = getYearsData(decade);\n\n  const yearInTabOrder = getYearInTabOrder(years, minDate, maxDate, getYearControlProps);\n\n  const rows = years.map((yearsRow, rowIndex) => {\n    const cells = yearsRow.map((year, cellIndex) => {\n      const controlProps = getYearControlProps?.(year);\n      const isYearInTabOrder = dayjs(year).isSame(yearInTabOrder, 'year');\n      return (\n        <td\n          key={cellIndex}\n          {...getStyles('yearsListCell')}\n          data-with-spacing={withCellSpacing || undefined}\n        >\n          <PickerControl\n            {...getStyles('yearsListControl')}\n            size={size}\n            unstyled={unstyled}\n            data-mantine-stop-propagation={__stopPropagation || undefined}\n            disabled={isYearDisabled(year, minDate, maxDate)}\n            ref={(node) => __getControlRef?.(rowIndex, cellIndex, node!)}\n            {...controlProps}\n            onKeyDown={(event) => {\n              controlProps?.onKeyDown?.(event);\n              __onControlKeyDown?.(event, { rowIndex, cellIndex, date: year });\n            }}\n            onClick={(event) => {\n              controlProps?.onClick?.(event);\n              __onControlClick?.(event, year);\n            }}\n            onMouseEnter={(event) => {\n              controlProps?.onMouseEnter?.(event);\n              __onControlMouseEnter?.(event, year);\n            }}\n            onMouseDown={(event) => {\n              controlProps?.onMouseDown?.(event);\n              __preventFocus && event.preventDefault();\n            }}\n            tabIndex={__preventFocus || !isYearInTabOrder ? -1 : 0}\n          >\n            {dayjs(year).locale(ctx.getLocale(locale)).format(yearsListFormat)}\n          </PickerControl>\n        </td>\n      );\n    });\n\n    return (\n      <tr key={rowIndex} {...getStyles('yearsListRow')}>\n        {cells}\n      </tr>\n    );\n  });\n\n  return (\n    <Box component=\"table\" ref={ref} size={size} {...getStyles('yearsList')} {...others}>\n      <tbody>{rows}</tbody>\n    </Box>\n  );\n});\n\nYearsList.classes = classes;\nYearsList.displayName = '@mantine/dates/YearsList';\n", "import dayjs from 'dayjs';\n\nexport function isMonthDisabled(\n  month: Date,\n  minDate: Date | null | undefined,\n  maxDate: Date | null | undefined\n) {\n  if (!minDate && !maxDate) {\n    return false;\n  }\n\n  if (minDate && dayjs(month).isBefore(minDate, 'month')) {\n    return true;\n  }\n\n  if (maxDate && dayjs(month).isAfter(maxDate, 'month')) {\n    return true;\n  }\n\n  return false;\n}\n", "import dayjs from 'dayjs';\nimport { PickerControlProps } from '../../PickerControl';\nimport { isMonthDisabled } from '../is-month-disabled/is-month-disabled';\n\nexport function getMonthInTabOrder(\n  months: Date[][],\n  minDate: Date | undefined,\n  maxDate: Date | undefined,\n  getMonthControlProps: ((month: Date) => Partial<PickerControlProps>) | undefined\n) {\n  const enabledMonths = months\n    .flat()\n    .filter(\n      (month) =>\n        !isMonthDisabled(month, minDate, maxDate) && !getMonthControlProps?.(month)?.disabled\n    );\n\n  const selectedMonth = enabledMonths.find((month) => getMonthControlProps?.(month)?.selected);\n\n  if (selectedMonth) {\n    return selectedMonth;\n  }\n\n  const currentMonth = enabledMonths.find((month) => dayjs().isSame(month, 'month'));\n\n  if (currentMonth) {\n    return currentMonth;\n  }\n\n  return enabledMonths[0];\n}\n", "import dayjs from 'dayjs';\n\nexport function getMonthsData(year: Date) {\n  const startOfYear = dayjs(year).startOf('year').toDate();\n\n  const results: Date[][] = [[], [], [], []];\n  let currentMonthIndex = 0;\n\n  for (let i = 0; i < 4; i += 1) {\n    for (let j = 0; j < 3; j += 1) {\n      results[i].push(dayjs(startOfYear).add(currentMonthIndex, 'months').toDate());\n      currentMonthIndex += 1;\n    }\n  }\n\n  return results;\n}\n", "'use client';\nvar classes = {\"monthsList\":\"m_2a6c32d\",\"monthsListCell\":\"m_fe27622f\"};\n\nexport { classes as default };\n//# sourceMappingURL=MonthsList.module.css.mjs.map\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ControlsGroupSettings } from '../../types';\nimport { useDatesContext } from '../DatesProvider';\nimport { PickerControl, PickerControlProps } from '../PickerControl';\nimport { getMonthInTabOrder } from './get-month-in-tab-order/get-month-in-tab-order';\nimport { getMonthsData } from './get-months-data/get-months-data';\nimport { isMonthDisabled } from './is-month-disabled/is-month-disabled';\nimport classes from './MonthsList.module.css';\n\nexport type MonthsListStylesNames =\n  | 'monthsList'\n  | 'monthsListCell'\n  | 'monthsListRow'\n  | 'monthsListControl';\n\nexport interface MonthsListSettings extends ControlsGroupSettings {\n  /** dayjs format for months list  */\n  monthsListFormat?: string;\n\n  /** Adds props to month picker control based on date */\n  getMonthControlProps?: (date: Date) => Partial<PickerControlProps>;\n\n  /** Determines whether propagation for Escape key should be stopped */\n  __stopPropagation?: boolean;\n\n  /** Determines whether controls should be separated by spacing, true by default */\n  withCellSpacing?: boolean;\n}\n\nexport interface MonthsListProps\n  extends BoxProps,\n    MonthsListSettings,\n    StylesApiProps<MonthsListFactory>,\n    ElementProps<'table'> {\n  __staticSelector?: string;\n\n  /** Prevents focus shift when buttons are clicked */\n  __preventFocus?: boolean;\n\n  /** Year for which months list should be displayed */\n  year: Date;\n\n  /** Component size */\n  size?: MantineSize;\n}\n\nexport type MonthsListFactory = Factory<{\n  props: MonthsListProps;\n  ref: HTMLTableElement;\n  stylesNames: MonthsListStylesNames;\n}>;\n\nconst defaultProps: Partial<MonthsListProps> = {\n  monthsListFormat: 'MMM',\n  withCellSpacing: true,\n};\n\nexport const MonthsList = factory<MonthsListFactory>((_props, ref) => {\n  const props = useProps('MonthsList', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    __staticSelector,\n    year,\n    monthsListFormat,\n    locale,\n    minDate,\n    maxDate,\n    getMonthControlProps,\n    __getControlRef,\n    __onControlKeyDown,\n    __onControlClick,\n    __onControlMouseEnter,\n    __preventFocus,\n    __stopPropagation,\n    withCellSpacing,\n    size,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<MonthsListFactory>({\n    name: __staticSelector || 'MonthsList',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    rootSelector: 'monthsList',\n  });\n\n  const ctx = useDatesContext();\n\n  const months = getMonthsData(year);\n\n  const monthInTabOrder = getMonthInTabOrder(months, minDate, maxDate, getMonthControlProps);\n\n  const rows = months.map((monthsRow, rowIndex) => {\n    const cells = monthsRow.map((month, cellIndex) => {\n      const controlProps = getMonthControlProps?.(month);\n      const isMonthInTabOrder = dayjs(month).isSame(monthInTabOrder, 'month');\n      return (\n        <td\n          key={cellIndex}\n          {...getStyles('monthsListCell')}\n          data-with-spacing={withCellSpacing || undefined}\n        >\n          <PickerControl\n            {...getStyles('monthsListControl')}\n            size={size}\n            unstyled={unstyled}\n            __staticSelector={__staticSelector || 'MonthsList'}\n            data-mantine-stop-propagation={__stopPropagation || undefined}\n            disabled={isMonthDisabled(month, minDate, maxDate)}\n            ref={(node) => __getControlRef?.(rowIndex, cellIndex, node!)}\n            {...controlProps}\n            onKeyDown={(event) => {\n              controlProps?.onKeyDown?.(event);\n              __onControlKeyDown?.(event, { rowIndex, cellIndex, date: month });\n            }}\n            onClick={(event) => {\n              controlProps?.onClick?.(event);\n              __onControlClick?.(event, month);\n            }}\n            onMouseEnter={(event) => {\n              controlProps?.onMouseEnter?.(event);\n              __onControlMouseEnter?.(event, month);\n            }}\n            onMouseDown={(event) => {\n              controlProps?.onMouseDown?.(event);\n              __preventFocus && event.preventDefault();\n            }}\n            tabIndex={__preventFocus || !isMonthInTabOrder ? -1 : 0}\n          >\n            {dayjs(month).locale(ctx.getLocale(locale)).format(monthsListFormat)}\n          </PickerControl>\n        </td>\n      );\n    });\n\n    return (\n      <tr key={rowIndex} {...getStyles('monthsListRow')}>\n        {cells}\n      </tr>\n    );\n  });\n\n  return (\n    <Box component=\"table\" ref={ref} size={size} {...getStyles('monthsList')} {...others}>\n      <tbody>{rows}</tbody>\n    </Box>\n  );\n});\n\nMonthsList.classes = classes;\nMonthsList.displayName = '@mantine/dates/MonthsList';\n", "'use client';\nvar classes = {\"calendarHeader\":\"m_730a79ed\",\"calendarHeaderLevel\":\"m_f6645d97\",\"calendarHeaderControl\":\"m_2351eeb0\",\"calendarHeaderControlIcon\":\"m_367dc749\"};\n\nexport { classes as default };\n//# sourceMappingURL=CalendarHeader.module.css.mjs.map\n", "import {\n  AccordionChevron,\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  getSize,\n  MantineSize,\n  StylesApiProps,\n  UnstyledButton,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport classes from './CalendarHeader.module.css';\n\nexport type CalendarHeaderStylesNames =\n  | 'calendarHeader'\n  | 'calendarHeaderControl'\n  | 'calendarHeaderLevel'\n  | 'calendarHeaderControlIcon';\nexport type CalendarHeaderCssVariables = {\n  calendarHeader: '--dch-control-size' | '--dch-fz';\n};\n\nexport interface CalendarHeaderSettings {\n  __preventFocus?: boolean;\n\n  /** Determines whether propagation for Escape key should be stopped */\n  __stopPropagation?: boolean;\n\n  /** Change next icon */\n  nextIcon?: React.ReactNode;\n\n  /** Change previous icon */\n  previousIcon?: React.ReactNode;\n\n  /** aria-label for next button */\n  nextLabel?: string;\n\n  /** aria-label for previous button */\n  previousLabel?: string;\n\n  /** Called when next button is clicked */\n  onNext?: () => void;\n\n  /** Called when previous button is clicked */\n  onPrevious?: () => void;\n\n  /** Called when level button is clicked */\n  onLevelClick?: () => void;\n\n  /** Determines whether next control should be disabled, defaults to false */\n  nextDisabled?: boolean;\n\n  /** Determines whether previous control should be disabled, defaults to false */\n  previousDisabled?: boolean;\n\n  /** Determines whether next level button should be enabled, defaults to true */\n  hasNextLevel?: boolean;\n\n  /** Determines whether next control should be rendered, defaults to true */\n  withNext?: boolean;\n\n  /** Determines whether previous control should be rendered, defaults to true */\n  withPrevious?: boolean;\n\n  /** Component size */\n  size?: MantineSize;\n}\n\nexport interface CalendarHeaderProps\n  extends BoxProps,\n    CalendarHeaderSettings,\n    StylesApiProps<CalendarHeaderFactory>,\n    ElementProps<'div'> {\n  __staticSelector?: string;\n\n  /** Label displayed between next and previous buttons */\n  label: React.ReactNode;\n\n  /** aria-label for level control */\n  levelControlAriaLabel?: string;\n}\n\nexport type CalendarHeaderFactory = Factory<{\n  props: CalendarHeaderProps;\n  ref: HTMLDivElement;\n  stylesNames: CalendarHeaderStylesNames;\n  vars: CalendarHeaderCssVariables;\n}>;\n\nconst defaultProps: Partial<CalendarHeaderProps> = {\n  nextDisabled: false,\n  previousDisabled: false,\n  hasNextLevel: true,\n  withNext: true,\n  withPrevious: true,\n};\n\nconst varsResolver = createVarsResolver<CalendarHeaderFactory>((_, { size }) => ({\n  calendarHeader: {\n    '--dch-control-size': getSize(size, 'dch-control-size'),\n    '--dch-fz': getFontSize(size),\n  },\n}));\n\nexport const CalendarHeader = factory<CalendarHeaderFactory>((_props, ref) => {\n  const props = useProps('CalendarHeader', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    onLevelClick,\n    label,\n    nextDisabled,\n    previousDisabled,\n    hasNextLevel,\n    levelControlAriaLabel,\n    withNext,\n    withPrevious,\n    __staticSelector,\n    __preventFocus,\n    __stopPropagation,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<CalendarHeaderFactory>({\n    name: __staticSelector || 'CalendarHeader',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'calendarHeader',\n  });\n\n  const preventFocus = __preventFocus\n    ? (event: React.MouseEvent<HTMLElement>) => event.preventDefault()\n    : undefined;\n\n  return (\n    <Box {...getStyles('calendarHeader')} ref={ref} {...others}>\n      {withPrevious && (\n        <UnstyledButton\n          {...getStyles('calendarHeaderControl')}\n          data-direction=\"previous\"\n          aria-label={previousLabel}\n          onClick={onPrevious}\n          unstyled={unstyled}\n          onMouseDown={preventFocus}\n          disabled={previousDisabled}\n          data-disabled={previousDisabled || undefined}\n          tabIndex={__preventFocus || previousDisabled ? -1 : 0}\n          data-mantine-stop-propagation={__stopPropagation || undefined}\n        >\n          {previousIcon || (\n            <AccordionChevron\n              {...getStyles('calendarHeaderControlIcon')}\n              data-direction=\"previous\"\n              size=\"45%\"\n            />\n          )}\n        </UnstyledButton>\n      )}\n\n      <UnstyledButton\n        component={hasNextLevel ? 'button' : 'div'}\n        {...getStyles('calendarHeaderLevel')}\n        onClick={hasNextLevel ? onLevelClick : undefined}\n        unstyled={unstyled}\n        onMouseDown={hasNextLevel ? preventFocus : undefined}\n        disabled={!hasNextLevel}\n        data-static={!hasNextLevel || undefined}\n        aria-label={levelControlAriaLabel}\n        tabIndex={__preventFocus || !hasNextLevel ? -1 : 0}\n        data-mantine-stop-propagation={__stopPropagation || undefined}\n      >\n        {label}\n      </UnstyledButton>\n\n      {withNext && (\n        <UnstyledButton\n          {...getStyles('calendarHeaderControl')}\n          data-direction=\"next\"\n          aria-label={nextLabel}\n          onClick={onNext}\n          unstyled={unstyled}\n          onMouseDown={preventFocus}\n          disabled={nextDisabled}\n          data-disabled={nextDisabled || undefined}\n          tabIndex={__preventFocus || nextDisabled ? -1 : 0}\n          data-mantine-stop-propagation={__stopPropagation || undefined}\n        >\n          {nextIcon || (\n            <AccordionChevron\n              {...getStyles('calendarHeaderControlIcon')}\n              data-direction=\"next\"\n              size=\"45%\"\n            />\n          )}\n        </UnstyledButton>\n      )}\n    </Box>\n  );\n});\n\nCalendarHeader.classes = classes;\nCalendarHeader.displayName = '@mantine/dates/CalendarHeader';\n", "import { getYearsData } from '../../YearsList/get-years-data/get-years-data';\n\nexport function getDecadeRange(decade: Date) {\n  const years = getYearsData(decade);\n  return [years[0][0], years[3][0]] as const;\n}\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n} from '@mantine/core';\nimport {\n  CalendarHeader,\n  CalendarHeaderSettings,\n  CalendarHeaderStylesNames,\n} from '../CalendarHeader';\nimport { useDatesContext } from '../DatesProvider';\nimport { YearsList, YearsListSettings, YearsListStylesNames } from '../YearsList';\nimport { getDecadeRange } from './get-decade-range/get-decade-range';\n\nexport type DecadeLevelStylesNames = YearsListStylesNames | CalendarHeaderStylesNames;\n\nexport interface DecadeLevelBaseSettings extends YearsListSettings {\n  /** dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \"YYYY\" */\n  decadeLabelFormat?: string | ((startOfDecade: Date, endOfDecade: Date) => React.ReactNode);\n}\n\nexport interface DecadeLevelSettings\n  extends DecadeLevelBaseSettings,\n    Omit<CalendarHeaderSettings, 'onLevelClick' | 'hasNextLevel'> {}\n\nexport interface DecadeLevelProps\n  extends BoxProps,\n    DecadeLevelSettings,\n    Omit<StylesApiProps<DecadeLevelFactory>, 'classNames' | 'styles'>,\n    ElementProps<'div'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n\n  /** Decade that is currently displayed */\n  decade: Date;\n\n  /** aria-label for change level control */\n  levelControlAriaLabel?: string;\n}\n\nexport type DecadeLevelFactory = Factory<{\n  props: DecadeLevelProps;\n  ref: HTMLDivElement;\n  stylesNames: DecadeLevelStylesNames;\n}>;\n\nconst defaultProps: Partial<DecadeLevelProps> = {\n  decadeLabelFormat: 'YYYY',\n};\n\nexport const DecadeLevel = factory<DecadeLevelFactory>((_props, ref) => {\n  const props = useProps('DecadeLevel', defaultProps, _props);\n  const {\n    // YearsList settings\n    decade,\n    locale,\n    minDate,\n    maxDate,\n    yearsListFormat,\n    getYearControlProps,\n    __getControlRef,\n    __onControlKeyDown,\n    __onControlClick,\n    __onControlMouseEnter,\n    withCellSpacing,\n\n    // CalendarHeader settings\n    __preventFocus,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    nextDisabled,\n    previousDisabled,\n    levelControlAriaLabel,\n    withNext,\n    withPrevious,\n\n    // Other props\n    decadeLabelFormat,\n    classNames,\n    styles,\n    unstyled,\n    __staticSelector,\n    __stopPropagation,\n    size,\n    ...others\n  } = props;\n\n  const ctx = useDatesContext();\n  const [startOfDecade, endOfDecade] = getDecadeRange(decade);\n\n  const stylesApiProps = {\n    __staticSelector: __staticSelector || 'DecadeLevel',\n    classNames,\n    styles,\n    unstyled,\n    size,\n  };\n\n  const _nextDisabled =\n    typeof nextDisabled === 'boolean'\n      ? nextDisabled\n      : maxDate\n        ? !dayjs(endOfDecade).endOf('year').isBefore(maxDate)\n        : false;\n\n  const _previousDisabled =\n    typeof previousDisabled === 'boolean'\n      ? previousDisabled\n      : minDate\n        ? !dayjs(startOfDecade).startOf('year').isAfter(minDate)\n        : false;\n\n  const formatDecade = (date: Date, format: string) =>\n    dayjs(date)\n      .locale(locale || ctx.locale)\n      .format(format);\n\n  return (\n    <Box data-decade-level size={size} ref={ref} {...others}>\n      <CalendarHeader\n        label={\n          typeof decadeLabelFormat === 'function'\n            ? decadeLabelFormat(startOfDecade, endOfDecade)\n            : `${formatDecade(startOfDecade, decadeLabelFormat!)} – ${formatDecade(\n                endOfDecade,\n                decadeLabelFormat!\n              )}`\n        }\n        __preventFocus={__preventFocus}\n        __stopPropagation={__stopPropagation}\n        nextIcon={nextIcon}\n        previousIcon={previousIcon}\n        nextLabel={nextLabel}\n        previousLabel={previousLabel}\n        onNext={onNext}\n        onPrevious={onPrevious}\n        nextDisabled={_nextDisabled}\n        previousDisabled={_previousDisabled}\n        hasNextLevel={false}\n        levelControlAriaLabel={levelControlAriaLabel}\n        withNext={withNext}\n        withPrevious={withPrevious}\n        {...stylesApiProps}\n      />\n\n      <YearsList\n        decade={decade}\n        locale={locale}\n        minDate={minDate}\n        maxDate={maxDate}\n        yearsListFormat={yearsListFormat}\n        getYearControlProps={getYearControlProps}\n        __getControlRef={__getControlRef}\n        __onControlKeyDown={__onControlKeyDown}\n        __onControlClick={__onControlClick}\n        __onControlMouseEnter={__onControlMouseEnter}\n        __preventFocus={__preventFocus}\n        __stopPropagation={__stopPropagation}\n        withCellSpacing={withCellSpacing}\n        {...stylesApiProps}\n      />\n    </Box>\n  );\n});\n\nDecadeLevel.classes = { ...YearsList.classes, ...CalendarHeader.classes };\nDecadeLevel.displayName = '@mantine/dates/DecadeLevel';\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n} from '@mantine/core';\nimport {\n  CalendarHeader,\n  CalendarHeaderSettings,\n  CalendarHeaderStylesNames,\n} from '../CalendarHeader';\nimport { useDatesContext } from '../DatesProvider';\nimport { MonthsList, MonthsListSettings, MonthsListStylesNames } from '../MonthsList';\n\nexport type YearLevelStylesNames = MonthsListStylesNames | CalendarHeaderStylesNames;\n\nexport interface YearLevelBaseSettings extends MonthsListSettings {\n  /** dayjs label format to display year label or a function that returns year label based on year value, defaults to \"YYYY\" */\n  yearLabelFormat?: string | ((year: Date) => React.ReactNode);\n}\n\nexport interface YearLevelSettings extends YearLevelBaseSettings, CalendarHeaderSettings {}\n\nexport interface YearLevelProps\n  extends BoxProps,\n    YearLevelSettings,\n    Omit<StylesApiProps<YearLevelFactory>, 'classNames' | 'styles'>,\n    ElementProps<'div'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n\n  /** Year that is currently displayed */\n  year: Date;\n\n  /** aria-label for change level control */\n  levelControlAriaLabel?: string;\n}\n\nexport type YearLevelFactory = Factory<{\n  props: YearLevelProps;\n  ref: HTMLDivElement;\n  stylesNames: YearLevelStylesNames;\n}>;\n\nconst defaultProps: Partial<YearLevelProps> = {\n  yearLabelFormat: 'YYYY',\n};\n\nexport const YearLevel = factory<YearLevelFactory>((_props, ref) => {\n  const props = useProps('YearLevel', defaultProps, _props);\n  const {\n    // MonthsList settings\n    year,\n    locale,\n    minDate,\n    maxDate,\n    monthsListFormat,\n    getMonthControlProps,\n    __getControlRef,\n    __onControlKeyDown,\n    __onControlClick,\n    __onControlMouseEnter,\n    withCellSpacing,\n\n    // CalendarHeader settings\n    __preventFocus,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    onLevelClick,\n    nextDisabled,\n    previousDisabled,\n    hasNextLevel,\n    levelControlAriaLabel,\n    withNext,\n    withPrevious,\n\n    // Other props\n    yearLabelFormat,\n    __staticSelector,\n    __stopPropagation,\n    size,\n    classNames,\n    styles,\n    unstyled,\n    ...others\n  } = props;\n\n  const ctx = useDatesContext();\n\n  const stylesApiProps = {\n    __staticSelector: __staticSelector || 'YearLevel',\n    classNames,\n    styles,\n    unstyled,\n    size,\n  };\n\n  const _nextDisabled =\n    typeof nextDisabled === 'boolean'\n      ? nextDisabled\n      : maxDate\n        ? !dayjs(year).endOf('year').isBefore(maxDate)\n        : false;\n\n  const _previousDisabled =\n    typeof previousDisabled === 'boolean'\n      ? previousDisabled\n      : minDate\n        ? !dayjs(year).startOf('year').isAfter(minDate)\n        : false;\n\n  return (\n    <Box data-year-level size={size} ref={ref} {...others}>\n      <CalendarHeader\n        label={\n          typeof yearLabelFormat === 'function'\n            ? yearLabelFormat(year)\n            : dayjs(year)\n                .locale(locale || ctx.locale)\n                .format(yearLabelFormat)\n        }\n        __preventFocus={__preventFocus}\n        __stopPropagation={__stopPropagation}\n        nextIcon={nextIcon}\n        previousIcon={previousIcon}\n        nextLabel={nextLabel}\n        previousLabel={previousLabel}\n        onNext={onNext}\n        onPrevious={onPrevious}\n        onLevelClick={onLevelClick}\n        nextDisabled={_nextDisabled}\n        previousDisabled={_previousDisabled}\n        hasNextLevel={hasNextLevel}\n        levelControlAriaLabel={levelControlAriaLabel}\n        withNext={withNext}\n        withPrevious={withPrevious}\n        {...stylesApiProps}\n      />\n\n      <MonthsList\n        year={year}\n        locale={locale}\n        minDate={minDate}\n        maxDate={maxDate}\n        monthsListFormat={monthsListFormat}\n        getMonthControlProps={getMonthControlProps}\n        __getControlRef={__getControlRef}\n        __onControlKeyDown={__onControlKeyDown}\n        __onControlClick={__onControlClick}\n        __onControlMouseEnter={__onControlMouseEnter}\n        __preventFocus={__preventFocus}\n        __stopPropagation={__stopPropagation}\n        withCellSpacing={withCellSpacing}\n        {...stylesApiProps}\n      />\n    </Box>\n  );\n});\n\nYearLevel.classes = { ...CalendarHeader.classes, ...MonthsList.classes };\nYearLevel.displayName = '@mantine/dates/YearLevel';\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n} from '@mantine/core';\nimport {\n  CalendarHeader,\n  CalendarHeaderSettings,\n  CalendarHeaderStylesNames,\n} from '../CalendarHeader';\nimport { useDatesContext } from '../DatesProvider';\nimport { Month, MonthSettings, MonthStylesNames } from '../Month';\n\nexport type MonthLevelStylesNames = MonthStylesNames | CalendarHeaderStylesNames;\n\nexport interface MonthLevelBaseSettings extends MonthSettings {\n  /** dayjs label format to display month label or a function that returns month label based on month value, defaults to \"MMMM YYYY\" */\n  monthLabelFormat?: string | ((month: Date) => React.ReactNode);\n}\n\nexport interface MonthLevelSettings extends MonthLevelBaseSettings, CalendarHeaderSettings {}\n\nexport interface MonthLevelProps\n  extends BoxProps,\n    MonthLevelSettings,\n    Omit<StylesApiProps<MonthLevelFactory>, 'classNames' | 'styles'>,\n    ElementProps<'div'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n\n  /** Month that is currently displayed */\n  month: Date;\n\n  /** aria-label for change level control */\n  levelControlAriaLabel?: string;\n\n  /** Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way  */\n  static?: boolean;\n}\n\nexport type MonthLevelFactory = Factory<{\n  props: MonthLevelProps;\n  ref: HTMLDivElement;\n  stylesNames: MonthLevelStylesNames;\n}>;\n\nconst defaultProps: Partial<MonthLevelProps> = {\n  monthLabelFormat: 'MMMM YYYY',\n};\n\nexport const MonthLevel = factory<MonthLevelFactory>((_props, ref) => {\n  const props = useProps('MonthLevel', defaultProps, _props);\n  const {\n    // Month settings\n    month,\n    locale,\n    firstDayOfWeek,\n    weekdayFormat,\n    weekendDays,\n    getDayProps,\n    excludeDate,\n    minDate,\n    maxDate,\n    renderDay,\n    hideOutsideDates,\n    hideWeekdays,\n    getDayAriaLabel,\n    __getDayRef,\n    __onDayKeyDown,\n    __onDayClick,\n    __onDayMouseEnter,\n    withCellSpacing,\n\n    // CalendarHeader settings\n    __preventFocus,\n    __stopPropagation,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    onLevelClick,\n    nextDisabled,\n    previousDisabled,\n    hasNextLevel,\n    levelControlAriaLabel,\n    withNext,\n    withPrevious,\n\n    // Other props\n    monthLabelFormat,\n    classNames,\n    styles,\n    unstyled,\n    __staticSelector,\n    size,\n    static: isStatic,\n    ...others\n  } = props;\n\n  const ctx = useDatesContext();\n\n  const stylesApiProps = {\n    __staticSelector: __staticSelector || 'MonthLevel',\n    classNames,\n    styles,\n    unstyled,\n    size,\n  };\n\n  const _nextDisabled =\n    typeof nextDisabled === 'boolean'\n      ? nextDisabled\n      : maxDate\n        ? !dayjs(month).endOf('month').isBefore(maxDate)\n        : false;\n\n  const _previousDisabled =\n    typeof previousDisabled === 'boolean'\n      ? previousDisabled\n      : minDate\n        ? !dayjs(month).startOf('month').isAfter(minDate)\n        : false;\n\n  return (\n    <Box data-month-level size={size} ref={ref} {...others}>\n      <CalendarHeader\n        label={\n          typeof monthLabelFormat === 'function'\n            ? monthLabelFormat(month)\n            : dayjs(month)\n                .locale(locale || ctx.locale)\n                .format(monthLabelFormat)\n        }\n        __preventFocus={__preventFocus}\n        __stopPropagation={__stopPropagation}\n        nextIcon={nextIcon}\n        previousIcon={previousIcon}\n        nextLabel={nextLabel}\n        previousLabel={previousLabel}\n        onNext={onNext}\n        onPrevious={onPrevious}\n        onLevelClick={onLevelClick}\n        nextDisabled={_nextDisabled}\n        previousDisabled={_previousDisabled}\n        hasNextLevel={hasNextLevel}\n        levelControlAriaLabel={levelControlAriaLabel}\n        withNext={withNext}\n        withPrevious={withPrevious}\n        {...stylesApiProps}\n      />\n\n      <Month\n        month={month}\n        locale={locale}\n        firstDayOfWeek={firstDayOfWeek}\n        weekdayFormat={weekdayFormat}\n        weekendDays={weekendDays}\n        getDayProps={getDayProps}\n        excludeDate={excludeDate}\n        minDate={minDate}\n        maxDate={maxDate}\n        renderDay={renderDay}\n        hideOutsideDates={hideOutsideDates}\n        hideWeekdays={hideWeekdays}\n        getDayAriaLabel={getDayAriaLabel}\n        __getDayRef={__getDayRef}\n        __onDayKeyDown={__onDayKeyDown}\n        __onDayClick={__onDayClick}\n        __onDayMouseEnter={__onDayMouseEnter}\n        __preventFocus={__preventFocus}\n        __stopPropagation={__stopPropagation}\n        static={isStatic}\n        withCellSpacing={withCellSpacing}\n        {...stylesApiProps}\n      />\n    </Box>\n  );\n});\n\nMonthLevel.classes = { ...Month.classes, ...CalendarHeader.classes };\nMonthLevel.displayName = '@mantine/dates/MonthLevel';\n", "'use client';\nvar classes = {\"levelsGroup\":\"m_30b26e33\"};\n\nexport { classes as default };\n//# sourceMappingURL=LevelsGroup.module.css.mjs.map\n", "import {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport classes from './LevelsGroup.module.css';\n\nexport type LevelsGroupStylesNames = 'levelsGroup';\n\nexport interface LevelsGroupProps\n  extends BoxProps,\n    StylesApiProps<LevelsGroupFactory>,\n    ElementProps<'div'> {\n  __staticSelector?: string;\n  size?: MantineSize;\n}\n\nexport type LevelsGroupFactory = Factory<{\n  props: LevelsGroupProps;\n  ref: HTMLDivElement;\n  stylesNames: LevelsGroupStylesNames;\n}>;\n\nconst defaultProps: Partial<LevelsGroupProps> = {};\n\nexport const LevelsGroup = factory<LevelsGroupFactory>((_props, ref) => {\n  const props = useProps('LevelsGroup', defaultProps, _props);\n  const { classNames, className, style, styles, unstyled, vars, __staticSelector, ...others } =\n    props;\n\n  const getStyles = useStyles<LevelsGroupFactory>({\n    name: __staticSelector || 'LevelsGroup',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    rootSelector: 'levelsGroup',\n  });\n\n  return <Box ref={ref} {...getStyles('levelsGroup')} {...others} />;\n});\n\nLevelsGroup.classes = classes;\nLevelsGroup.displayName = '@mantine/dates/LevelsGroup';\n", "import dayjs from 'dayjs';\nimport { useRef } from 'react';\nimport { BoxProps, ElementProps, factory, Factory, StylesApiProps, useProps } from '@mantine/core';\nimport { handleControlKeyDown } from '../../utils';\nimport { DecadeLevel, DecadeLevelSettings, DecadeLevelStylesNames } from '../DecadeLevel';\nimport { LevelsGroup, LevelsGroupStylesNames } from '../LevelsGroup';\n\nexport type DecadeLevelGroupStylesNames = LevelsGroupStylesNames | DecadeLevelStylesNames;\n\nexport interface DecadeLevelGroupProps\n  extends BoxProps,\n    Omit<StylesApiProps<DecadeLevelGroupFactory>, 'classNames' | 'styles'>,\n    Omit<\n      DecadeLevelSettings,\n      'withPrevious' | 'withNext' | '__onControlKeyDown' | '__getControlRef'\n    >,\n    ElementProps<'div'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n\n  /** Number of columns to render next to each other */\n  numberOfColumns?: number;\n\n  /** Decade that is currently displayed */\n  decade: Date;\n\n  /** Function that returns level control aria-label based on year date */\n  levelControlAriaLabel?: ((decade: Date) => string) | string;\n}\n\nexport type DecadeLevelGroupFactory = Factory<{\n  props: DecadeLevelGroupProps;\n  ref: HTMLDivElement;\n  stylesNames: DecadeLevelGroupStylesNames;\n}>;\n\nconst defaultProps: Partial<DecadeLevelGroupProps> = {\n  numberOfColumns: 1,\n};\n\nexport const DecadeLevelGroup = factory<DecadeLevelGroupFactory>((_props, ref) => {\n  const props = useProps('DecadeLevelGroup', defaultProps, _props);\n  const {\n    // DecadeLevel settings\n    decade,\n    locale,\n    minDate,\n    maxDate,\n    yearsListFormat,\n    getYearControlProps,\n    __onControlClick,\n    __onControlMouseEnter,\n    withCellSpacing,\n\n    // CalendarHeader settings\n    __preventFocus,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    nextDisabled,\n    previousDisabled,\n\n    // Other settings\n    classNames,\n    styles,\n    unstyled,\n    __staticSelector,\n    __stopPropagation,\n    numberOfColumns,\n    levelControlAriaLabel,\n    decadeLabelFormat,\n    size,\n    vars,\n    ...others\n  } = props;\n\n  const controlsRef = useRef<HTMLButtonElement[][][]>([]);\n\n  const decades = Array(numberOfColumns)\n    .fill(0)\n    .map((_, decadeIndex) => {\n      const currentDecade = dayjs(decade)\n        .add(decadeIndex * 10, 'years')\n        .toDate();\n\n      return (\n        <DecadeLevel\n          key={decadeIndex}\n          size={size}\n          yearsListFormat={yearsListFormat}\n          decade={currentDecade}\n          withNext={decadeIndex === numberOfColumns! - 1}\n          withPrevious={decadeIndex === 0}\n          decadeLabelFormat={decadeLabelFormat}\n          __onControlClick={__onControlClick}\n          __onControlMouseEnter={__onControlMouseEnter}\n          __onControlKeyDown={(event, payload) =>\n            handleControlKeyDown({\n              levelIndex: decadeIndex,\n              rowIndex: payload.rowIndex,\n              cellIndex: payload.cellIndex,\n              event,\n              controlsRef,\n            })\n          }\n          __getControlRef={(rowIndex, cellIndex, node) => {\n            if (!Array.isArray(controlsRef.current[decadeIndex])) {\n              controlsRef.current[decadeIndex] = [];\n            }\n\n            if (!Array.isArray(controlsRef.current[decadeIndex][rowIndex])) {\n              controlsRef.current[decadeIndex][rowIndex] = [];\n            }\n\n            controlsRef.current[decadeIndex][rowIndex][cellIndex] = node;\n          }}\n          levelControlAriaLabel={\n            typeof levelControlAriaLabel === 'function'\n              ? levelControlAriaLabel(currentDecade)\n              : levelControlAriaLabel\n          }\n          locale={locale}\n          minDate={minDate}\n          maxDate={maxDate}\n          __preventFocus={__preventFocus}\n          __stopPropagation={__stopPropagation}\n          nextIcon={nextIcon}\n          previousIcon={previousIcon}\n          nextLabel={nextLabel}\n          previousLabel={previousLabel}\n          onNext={onNext}\n          onPrevious={onPrevious}\n          nextDisabled={nextDisabled}\n          previousDisabled={previousDisabled}\n          getYearControlProps={getYearControlProps}\n          __staticSelector={__staticSelector || 'DecadeLevelGroup'}\n          classNames={classNames}\n          styles={styles}\n          unstyled={unstyled}\n          withCellSpacing={withCellSpacing}\n        />\n      );\n    });\n\n  return (\n    <LevelsGroup\n      classNames={classNames}\n      styles={styles}\n      __staticSelector={__staticSelector || 'DecadeLevelGroup'}\n      ref={ref}\n      size={size}\n      unstyled={unstyled}\n      {...others}\n    >\n      {decades}\n    </LevelsGroup>\n  );\n});\n\nDecadeLevelGroup.classes = { ...LevelsGroup.classes, ...DecadeLevel.classes };\nDecadeLevelGroup.displayName = '@mantine/dates/DecadeLevelGroup';\n", "import dayjs from 'dayjs';\nimport { useRef } from 'react';\nimport { BoxProps, ElementProps, factory, Factory, StylesApiProps, useProps } from '@mantine/core';\nimport { handleControlKeyDown } from '../../utils';\nimport { LevelsGroup, LevelsGroupStylesNames } from '../LevelsGroup';\nimport { YearLevel, YearLevelSettings, YearLevelStylesNames } from '../YearLevel';\n\nexport type YearLevelGroupStylesNames = YearLevelStylesNames | LevelsGroupStylesNames;\n\nexport interface YearLevelGroupProps\n  extends BoxProps,\n    Omit<YearLevelSettings, 'withPrevious' | 'withNext' | '__onControlKeyDown' | '__getControlRef'>,\n    Omit<StylesApiProps<YearLevelGroupFactory>, 'classNames' | 'styles'>,\n    ElementProps<'div'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n\n  /** Number of columns to render next to each other */\n  numberOfColumns?: number;\n\n  /** Year that is currently displayed */\n  year: Date;\n\n  /** Function that returns level control aria-label based on year date */\n  levelControlAriaLabel?: ((year: Date) => string) | string;\n}\n\nexport type YearLevelGroupFactory = Factory<{\n  props: YearLevelGroupProps;\n  ref: HTMLDivElement;\n  stylesNames: YearLevelGroupStylesNames;\n}>;\n\nconst defaultProps: Partial<YearLevelGroupProps> = {\n  numberOfColumns: 1,\n};\n\nexport const YearLevelGroup = factory<YearLevelGroupFactory>((_props, ref) => {\n  const props = useProps('YearLevelGroup', defaultProps, _props);\n  const {\n    // YearLevel settings\n    year,\n    locale,\n    minDate,\n    maxDate,\n    monthsListFormat,\n    getMonthControlProps,\n    __onControlClick,\n    __onControlMouseEnter,\n    withCellSpacing,\n\n    // CalendarHeader settings\n    __preventFocus,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    onLevelClick,\n    nextDisabled,\n    previousDisabled,\n    hasNextLevel,\n\n    // Other settings\n    classNames,\n    styles,\n    unstyled,\n    __staticSelector,\n    __stopPropagation,\n    numberOfColumns,\n    levelControlAriaLabel,\n    yearLabelFormat,\n    size,\n    vars,\n    ...others\n  } = props;\n\n  const controlsRef = useRef<HTMLButtonElement[][][]>([]);\n\n  const years = Array(numberOfColumns)\n    .fill(0)\n    .map((_, yearIndex) => {\n      const currentYear = dayjs(year).add(yearIndex, 'years').toDate();\n\n      return (\n        <YearLevel\n          key={yearIndex}\n          size={size}\n          monthsListFormat={monthsListFormat}\n          year={currentYear}\n          withNext={yearIndex === numberOfColumns! - 1}\n          withPrevious={yearIndex === 0}\n          yearLabelFormat={yearLabelFormat}\n          __stopPropagation={__stopPropagation}\n          __onControlClick={__onControlClick}\n          __onControlMouseEnter={__onControlMouseEnter}\n          __onControlKeyDown={(event, payload) =>\n            handleControlKeyDown({\n              levelIndex: yearIndex,\n              rowIndex: payload.rowIndex,\n              cellIndex: payload.cellIndex,\n              event,\n              controlsRef,\n            })\n          }\n          __getControlRef={(rowIndex, cellIndex, node) => {\n            if (!Array.isArray(controlsRef.current[yearIndex])) {\n              controlsRef.current[yearIndex] = [];\n            }\n\n            if (!Array.isArray(controlsRef.current[yearIndex][rowIndex])) {\n              controlsRef.current[yearIndex][rowIndex] = [];\n            }\n\n            controlsRef.current[yearIndex][rowIndex][cellIndex] = node;\n          }}\n          levelControlAriaLabel={\n            typeof levelControlAriaLabel === 'function'\n              ? levelControlAriaLabel(currentYear)\n              : levelControlAriaLabel\n          }\n          locale={locale}\n          minDate={minDate}\n          maxDate={maxDate}\n          __preventFocus={__preventFocus}\n          nextIcon={nextIcon}\n          previousIcon={previousIcon}\n          nextLabel={nextLabel}\n          previousLabel={previousLabel}\n          onNext={onNext}\n          onPrevious={onPrevious}\n          onLevelClick={onLevelClick}\n          nextDisabled={nextDisabled}\n          previousDisabled={previousDisabled}\n          hasNextLevel={hasNextLevel}\n          getMonthControlProps={getMonthControlProps}\n          classNames={classNames}\n          styles={styles}\n          unstyled={unstyled}\n          __staticSelector={__staticSelector || 'YearLevelGroup'}\n          withCellSpacing={withCellSpacing}\n        />\n      );\n    });\n\n  return (\n    <LevelsGroup\n      classNames={classNames}\n      styles={styles}\n      __staticSelector={__staticSelector || 'YearLevelGroup'}\n      ref={ref}\n      size={size}\n      unstyled={unstyled}\n      {...others}\n    >\n      {years}\n    </LevelsGroup>\n  );\n});\n\nYearLevelGroup.classes = { ...YearLevel.classes, ...LevelsGroup.classes };\nYearLevelGroup.displayName = '@mantine/dates/YearLevelGroup';\n", "import dayjs from 'dayjs';\nimport { useRef } from 'react';\nimport { BoxProps, ElementProps, factory, Factory, StylesApiProps, useProps } from '@mantine/core';\nimport { handleControlKeyDown } from '../../utils';\nimport { LevelsGroup, LevelsGroupStylesNames } from '../LevelsGroup';\nimport { MonthLevel, MonthLevelSettings, MonthLevelStylesNames } from '../MonthLevel';\n\nexport type MonthLevelGroupStylesNames = MonthLevelStylesNames | LevelsGroupStylesNames;\n\nexport interface MonthLevelGroupProps\n  extends BoxProps,\n    Omit<MonthLevelSettings, 'withPrevious' | 'withNext' | '__onDayKeyDown' | '__getDayRef'>,\n    Omit<StylesApiProps<MonthLevelGroupFactory>, 'classNames' | 'styles'>,\n    ElementProps<'div'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n\n  /** Number of columns to render next to each other */\n  numberOfColumns?: number;\n\n  /** Month that is currently displayed */\n  month: Date;\n\n  /** Function that returns level control aria-label based on month date */\n  levelControlAriaLabel?: ((month: Date) => string) | string;\n\n  /** Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way  */\n  static?: boolean;\n}\n\nexport type MonthLevelGroupFactory = Factory<{\n  props: MonthLevelGroupProps;\n  ref: HTMLDivElement;\n  stylesNames: MonthLevelGroupStylesNames;\n}>;\n\nconst defaultProps: Partial<MonthLevelGroupProps> = {\n  numberOfColumns: 1,\n};\n\nexport const MonthLevelGroup = factory<MonthLevelGroupFactory>((_props, ref) => {\n  const props = useProps('MonthLevelGroup', defaultProps, _props);\n  const {\n    // Month settings\n    month,\n    locale,\n    firstDayOfWeek,\n    weekdayFormat,\n    weekendDays,\n    getDayProps,\n    excludeDate,\n    minDate,\n    maxDate,\n    renderDay,\n    hideOutsideDates,\n    hideWeekdays,\n    getDayAriaLabel,\n    __onDayClick,\n    __onDayMouseEnter,\n    withCellSpacing,\n\n    // CalendarHeader settings\n    __preventFocus,\n    nextIcon,\n    previousIcon,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    onLevelClick,\n    nextDisabled,\n    previousDisabled,\n    hasNextLevel,\n\n    // Other settings\n    classNames,\n    styles,\n    unstyled,\n    numberOfColumns,\n    levelControlAriaLabel,\n    monthLabelFormat,\n    __staticSelector,\n    __stopPropagation,\n    size,\n    static: isStatic,\n    vars,\n    ...others\n  } = props;\n\n  const daysRefs = useRef<HTMLButtonElement[][][]>([]);\n\n  const months = Array(numberOfColumns)\n    .fill(0)\n    .map((_, monthIndex) => {\n      const currentMonth = dayjs(month).add(monthIndex, 'months').toDate();\n\n      return (\n        <MonthLevel\n          key={monthIndex}\n          month={currentMonth}\n          withNext={monthIndex === numberOfColumns! - 1}\n          withPrevious={monthIndex === 0}\n          monthLabelFormat={monthLabelFormat}\n          __stopPropagation={__stopPropagation}\n          __onDayClick={__onDayClick}\n          __onDayMouseEnter={__onDayMouseEnter}\n          __onDayKeyDown={(event, payload) =>\n            handleControlKeyDown({\n              levelIndex: monthIndex,\n              rowIndex: payload.rowIndex,\n              cellIndex: payload.cellIndex,\n              event,\n              controlsRef: daysRefs,\n            })\n          }\n          __getDayRef={(rowIndex, cellIndex, node) => {\n            if (!Array.isArray(daysRefs.current[monthIndex])) {\n              daysRefs.current[monthIndex] = [];\n            }\n\n            if (!Array.isArray(daysRefs.current[monthIndex][rowIndex])) {\n              daysRefs.current[monthIndex][rowIndex] = [];\n            }\n\n            daysRefs.current[monthIndex][rowIndex][cellIndex] = node;\n          }}\n          levelControlAriaLabel={\n            typeof levelControlAriaLabel === 'function'\n              ? levelControlAriaLabel(currentMonth)\n              : levelControlAriaLabel\n          }\n          locale={locale}\n          firstDayOfWeek={firstDayOfWeek}\n          weekdayFormat={weekdayFormat}\n          weekendDays={weekendDays}\n          getDayProps={getDayProps}\n          excludeDate={excludeDate}\n          minDate={minDate}\n          maxDate={maxDate}\n          renderDay={renderDay}\n          hideOutsideDates={hideOutsideDates}\n          hideWeekdays={hideWeekdays}\n          getDayAriaLabel={getDayAriaLabel}\n          __preventFocus={__preventFocus}\n          nextIcon={nextIcon}\n          previousIcon={previousIcon}\n          nextLabel={nextLabel}\n          previousLabel={previousLabel}\n          onNext={onNext}\n          onPrevious={onPrevious}\n          onLevelClick={onLevelClick}\n          nextDisabled={nextDisabled}\n          previousDisabled={previousDisabled}\n          hasNextLevel={hasNextLevel}\n          classNames={classNames}\n          styles={styles}\n          unstyled={unstyled}\n          __staticSelector={__staticSelector || 'MonthLevelGroup'}\n          size={size}\n          static={isStatic}\n          withCellSpacing={withCellSpacing}\n        />\n      );\n    });\n\n  return (\n    <LevelsGroup\n      classNames={classNames}\n      styles={styles}\n      __staticSelector={__staticSelector || 'MonthLevelGroup'}\n      ref={ref}\n      size={size}\n      {...others}\n    >\n      {months}\n    </LevelsGroup>\n  );\n});\n\nMonthLevelGroup.classes = { ...LevelsGroup.classes, ...MonthLevel.classes };\nMonthLevelGroup.displayName = '@mantine/dates/MonthLevelGroup';\n", "'use client';\nvar classes = {\"input\":\"m_6fa5e2aa\"};\n\nexport { classes as default };\n//# sourceMappingURL=PickerInputBase.module.css.mjs.map\n", "import cx from 'clsx';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  BoxProps,\n  CloseButton,\n  ElementProps,\n  factory,\n  Factory,\n  Input,\n  InputVariant,\n  MantineSize,\n  Modal,\n  ModalProps,\n  Popover,\n  PopoverProps,\n  StylesApiProps,\n  useInputProps,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { DatePickerType } from '../../types';\nimport { DateFormatter } from '../../utils';\nimport { HiddenDatesInput, HiddenDatesInputValue } from '../HiddenDatesInput';\nimport classes from './PickerInputBase.module.css';\n\nexport type PickerInputBaseStylesNames = __InputStylesNames;\n\nexport interface DateInputSharedProps\n  extends Omit<__BaseInputProps, 'size'>,\n    ElementProps<'button', 'defaultValue' | 'value' | 'onChange' | 'type'> {\n  /** Determines whether dropdown should be closed when date is selected, not applicable when type=\"multiple\", true by default */\n  closeOnChange?: boolean;\n\n  /** Type of dropdown, defaults to popover */\n  dropdownType?: 'popover' | 'modal';\n\n  /** Props passed down to Popover component */\n  popoverProps?: Partial<Omit<PopoverProps, 'children'>>;\n\n  /** Props passed down to Modal component */\n  modalProps?: Partial<Omit<ModalProps, 'children'>>;\n\n  /** Determines whether input value can be cleared, adds clear button to right section, false by default */\n  clearable?: boolean;\n\n  /** Props passed down to clear button */\n  clearButtonProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** Determines whether the user can modify the value */\n  readOnly?: boolean;\n\n  /** Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\", true by default */\n  sortDates?: boolean;\n\n  /** Separator between range value */\n  labelSeparator?: string;\n\n  /** Input placeholder */\n  placeholder?: string;\n\n  /** A function to format selected dates values into a string. By default, date is formatted based on the input type. */\n  valueFormatter?: DateFormatter;\n}\n\nexport interface PickerInputBaseProps\n  extends BoxProps,\n    DateInputSharedProps,\n    Omit<StylesApiProps<PickerInputBaseFactory>, 'classNames' | 'styles'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n  children: React.ReactNode;\n  formattedValue: string | null | undefined;\n  dropdownHandlers: ReturnType<typeof useDisclosure>[1];\n  dropdownOpened: boolean;\n  onClear: () => void;\n  shouldClear: boolean;\n  value: HiddenDatesInputValue;\n  type: DatePickerType;\n  size?: MantineSize;\n}\n\nexport type PickerInputBaseFactory = Factory<{\n  props: PickerInputBaseProps;\n  ref: HTMLButtonElement;\n  stylesNames: PickerInputBaseStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<PickerInputBaseProps> = {};\n\nexport const PickerInputBase = factory<PickerInputBaseFactory>((_props, ref) => {\n  const {\n    inputProps,\n    wrapperProps,\n    placeholder,\n    classNames,\n    styles,\n    unstyled,\n    popoverProps,\n    modalProps,\n    dropdownType,\n    children,\n    formattedValue,\n    dropdownHandlers,\n    dropdownOpened,\n    onClick,\n    clearable,\n    onClear,\n    clearButtonProps,\n    rightSection,\n    shouldClear,\n    readOnly,\n    disabled,\n    value,\n    name,\n    form,\n    type,\n    ...others\n  } = useInputProps('PickerInputBase', defaultProps, _props);\n\n  const _rightSection =\n    rightSection ||\n    (clearable && shouldClear && !readOnly && !disabled ? (\n      <CloseButton\n        variant=\"transparent\"\n        onClick={onClear}\n        unstyled={unstyled}\n        size={inputProps.size || 'sm'}\n        {...clearButtonProps}\n      />\n    ) : null);\n\n  const handleClose = () => {\n    const isInvalidRangeValue = type === 'range' && Array.isArray(value) && value[0] && !value[1];\n    if (isInvalidRangeValue) {\n      onClear();\n    }\n\n    dropdownHandlers.close();\n  };\n\n  return (\n    <>\n      {dropdownType === 'modal' && !readOnly && (\n        <Modal\n          opened={dropdownOpened}\n          onClose={handleClose}\n          withCloseButton={false}\n          size=\"auto\"\n          data-dates-modal\n          unstyled={unstyled}\n          {...modalProps}\n        >\n          {children}\n        </Modal>\n      )}\n\n      <Input.Wrapper {...wrapperProps}>\n        <Popover\n          position=\"bottom-start\"\n          opened={dropdownOpened}\n          trapFocus\n          returnFocus\n          unstyled={unstyled}\n          {...popoverProps}\n          disabled={popoverProps?.disabled || dropdownType === 'modal' || readOnly}\n          onClose={() => {\n            popoverProps?.onClose?.();\n            handleClose();\n          }}\n        >\n          <Popover.Target>\n            <Input\n              aria-label={formattedValue || placeholder}\n              data-dates-input\n              data-read-only={readOnly || undefined}\n              disabled={disabled}\n              component=\"button\"\n              type=\"button\"\n              multiline\n              onClick={(event) => {\n                onClick?.(event);\n                dropdownHandlers.toggle();\n              }}\n              rightSection={_rightSection}\n              {...inputProps}\n              ref={ref}\n              classNames={{ ...classNames, input: cx(classes.input, (classNames as any)?.input) }}\n              {...others}\n            >\n              {formattedValue || (\n                <Input.Placeholder\n                  error={inputProps.error}\n                  unstyled={unstyled}\n                  className={(classNames as any)?.placeholder}\n                  style={(styles as any)?.placeholder}\n                >\n                  {placeholder}\n                </Input.Placeholder>\n              )}\n            </Input>\n          </Popover.Target>\n\n          <Popover.Dropdown data-dates-dropdown>{children}</Popover.Dropdown>\n        </Popover>\n      </Input.Wrapper>\n      <HiddenDatesInput value={value} name={name} form={form} type={type} />\n    </>\n  );\n});\n\nPickerInputBase.classes = classes;\nPickerInputBase.displayName = '@mantine/dates/PickerInputBase';\n", "import { useRef } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { useDatesContext } from '../../components/DatesProvider';\nimport { DatePickerType, DatePickerValue } from '../../types';\nimport { shiftTimezone } from '../../utils';\n\ninterface UseUncontrolledDates<Type extends DatePickerType = 'default'> {\n  type: Type;\n  value: DatePickerValue<Type> | undefined;\n  defaultValue: DatePickerValue<Type> | undefined;\n  onChange: ((value: DatePickerValue<Type>) => void) | undefined;\n  applyTimezone?: boolean;\n}\n\nconst getEmptyValue = <Type extends DatePickerType = 'default'>(type: Type) =>\n  type === 'range' ? [null, null] : type === 'multiple' ? [] : null;\n\nexport function useUncontrolledDates<Type extends DatePickerType = 'default'>({\n  type,\n  value,\n  defaultValue,\n  onChange,\n  applyTimezone = true,\n}: UseUncontrolledDates<Type>) {\n  const storedType = useRef<Type>(type);\n  const ctx = useDatesContext();\n  const [_value, _setValue, controlled] = useUncontrolled<any>({\n    value: shiftTimezone('add', value, ctx.getTimezone(), !applyTimezone),\n    defaultValue: shiftTimezone('add', defaultValue, ctx.getTimezone(), !applyTimezone),\n    finalValue: getEmptyValue(type),\n    onChange: (newDate) => {\n      onChange?.(shiftTimezone('remove', newDate, ctx.getTimezone(), !applyTimezone));\n    },\n  });\n\n  let _finalValue = _value;\n\n  if (storedType.current !== type) {\n    // Type has changed. Do some checks or resets\n\n    storedType.current = type;\n    if (value === undefined) {\n      // Reset uncontrolled value as types aren't compatible\n      _finalValue = defaultValue !== undefined ? defaultValue : getEmptyValue(type);\n      _setValue(_finalValue);\n    } else if (process.env.NODE_ENV === 'development') {\n      // Throw errors in dev mode in case type of value isn't correct\n      switch (type) {\n        case 'default':\n          if (value !== null && typeof value !== 'string') {\n            // eslint-disable-next-line no-console\n            console.error(\n              '[@mantine/dates/use-uncontrolled-dates] Value must be type of `null` or `string`'\n            );\n          }\n          break;\n        case 'multiple':\n          if (!(value instanceof Array)) {\n            // eslint-disable-next-line no-console\n            console.error(\n              '[@mantine/dates/use-uncontrolled-dates] Value must be type of `string[]`'\n            );\n          }\n          break;\n        case 'range':\n          if (!(value instanceof Array) || value.length !== 2) {\n            // eslint-disable-next-line no-console\n            console.error(\n              '[@mantine/dates/use-uncontrolled-dates] Value must be type of `[string, string]`'\n            );\n          }\n          break;\n      }\n    }\n  }\n\n  return [_finalValue, _setValue, controlled];\n}\n", "import { clamp } from '@mantine/hooks';\nimport type { CalendarLevel } from '../../../types';\n\n// 0 – month, 1 – year, 2 – decade;\ntype LevelNumber = 0 | 1 | 2;\n\nfunction levelToNumber(\n  level: CalendarLevel | undefined,\n  fallback: LevelNumber | undefined\n): LevelNumber {\n  if (!level) {\n    return fallback || 0;\n  }\n\n  return level === 'month' ? 0 : level === 'year' ? 1 : 2;\n}\n\nfunction levelNumberToLevel(levelNumber: LevelNumber | undefined): CalendarLevel {\n  return levelNumber === 0 ? 'month' : levelNumber === 1 ? 'year' : 'decade';\n}\n\nexport function clampLevel(\n  level: CalendarLevel | undefined,\n  minLevel: CalendarLevel | undefined,\n  maxLevel: CalendarLevel | undefined\n): CalendarLevel {\n  return levelNumberToLevel(\n    clamp(\n      levelToNumber(level, 0),\n      levelToNumber(minLevel, 0),\n      levelToNumber(maxLevel, 2)\n    ) as LevelNumber\n  );\n}\n", "import dayjs from 'dayjs';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  Factory,\n  factory,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { useUncontrolledDates } from '../../hooks';\nimport { CalendarLevel } from '../../types';\nimport { shiftTimezone } from '../../utils';\nimport { useDatesContext } from '../DatesProvider';\nimport { DecadeLevelSettings } from '../DecadeLevel';\nimport { DecadeLevelGroup, DecadeLevelGroupStylesNames } from '../DecadeLevelGroup';\nimport { MonthLevelSettings } from '../MonthLevel';\nimport { MonthLevelGroup, MonthLevelGroupStylesNames } from '../MonthLevelGroup';\nimport { YearLevelSettings } from '../YearLevel';\nimport { YearLevelGroup, YearLevelGroupStylesNames } from '../YearLevelGroup';\nimport { clampLevel } from './clamp-level/clamp-level';\n\nexport type CalendarStylesNames =\n  | MonthLevelGroupStylesNames\n  | YearLevelGroupStylesNames\n  | DecadeLevelGroupStylesNames;\n\nexport interface CalendarAriaLabels {\n  monthLevelControl?: string;\n  yearLevelControl?: string;\n\n  nextMonth?: string;\n  previousMonth?: string;\n\n  nextYear?: string;\n  previousYear?: string;\n\n  nextDecade?: string;\n  previousDecade?: string;\n}\n\ntype OmittedSettings =\n  | 'onNext'\n  | 'onPrevious'\n  | 'onLevelClick'\n  | 'withNext'\n  | 'withPrevious'\n  | 'nextDisabled'\n  | 'previousDisabled';\n\nexport interface CalendarSettings\n  extends Omit<DecadeLevelSettings, OmittedSettings>,\n    Omit<YearLevelSettings, OmittedSettings>,\n    Omit<MonthLevelSettings, OmittedSettings> {\n  /** Initial level displayed to the user (decade, year, month), used for uncontrolled component */\n  defaultLevel?: CalendarLevel;\n\n  /** Current level displayed to the user (decade, year, month), used for controlled component */\n  level?: CalendarLevel;\n\n  /** Called when level changes */\n  onLevelChange?: (level: CalendarLevel) => void;\n\n  /** Called when user clicks year on decade level */\n  onYearSelect?: (date: Date) => void;\n\n  /** Called when user clicks month on year level */\n  onMonthSelect?: (date: Date) => void;\n\n  /** Called when mouse enters year control */\n  onYearMouseEnter?: (event: React.MouseEvent<HTMLButtonElement>, date: Date) => void;\n\n  /** Called when mouse enters month control */\n  onMonthMouseEnter?: (event: React.MouseEvent<HTMLButtonElement>, date: Date) => void;\n}\n\nexport interface CalendarBaseProps {\n  __staticSelector?: string;\n\n  /** Internal Variable to check if timezones were applied by parent component */\n  __timezoneApplied?: boolean;\n\n  /** Prevents focus shift when buttons are clicked */\n  __preventFocus?: boolean;\n\n  /** Determines whether date should be updated when year control is clicked */\n  __updateDateOnYearSelect?: boolean;\n\n  /** Determines whether date should be updated when month control is clicked */\n  __updateDateOnMonthSelect?: boolean;\n\n  /** Initial date that is displayed, used for uncontrolled component */\n  defaultDate?: Date;\n\n  /** Date that is displayed, used for controlled component */\n  date?: Date;\n\n  /** Called when date changes */\n  onDateChange?: (date: Date) => void;\n\n  /** Number of columns to render next to each other */\n  numberOfColumns?: number;\n\n  /** Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns */\n  columnsToScroll?: number;\n\n  /** aria-label attributes for controls on different levels */\n  ariaLabels?: CalendarAriaLabels;\n\n  /** Called when next decade button is clicked */\n  onNextDecade?: (date: Date) => void;\n\n  /** Called when previous decade button is clicked */\n  onPreviousDecade?: (date: Date) => void;\n\n  /** Called when next year button is clicked */\n  onNextYear?: (date: Date) => void;\n\n  /** Called when previous year button is clicked */\n  onPreviousYear?: (date: Date) => void;\n\n  /** Called when next month button is clicked */\n  onNextMonth?: (date: Date) => void;\n\n  /** Called when previous month button is clicked */\n  onPreviousMonth?: (date: Date) => void;\n}\n\nexport interface CalendarProps\n  extends BoxProps,\n    CalendarSettings,\n    CalendarBaseProps,\n    StylesApiProps<CalendarFactory>,\n    ElementProps<'div'> {\n  /** Max level that user can go up to (decade, year, month), defaults to decade */\n  maxLevel?: CalendarLevel;\n\n  /** Min level that user can go down to (decade, year, month), defaults to month */\n  minLevel?: CalendarLevel;\n\n  /** Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way  */\n  static?: boolean;\n}\n\nexport type CalendarFactory = Factory<{\n  props: CalendarProps;\n  ref: HTMLDivElement;\n  stylesNames: CalendarStylesNames;\n}>;\n\nconst defaultProps: Partial<CalendarProps> = {\n  maxLevel: 'decade',\n  minLevel: 'month',\n  __updateDateOnYearSelect: true,\n  __updateDateOnMonthSelect: true,\n};\n\nexport const Calendar = factory<CalendarFactory>((_props, ref) => {\n  const props = useProps('Calendar', defaultProps, _props);\n  const {\n    vars, // CalendarLevel props\n    maxLevel,\n    minLevel,\n    defaultLevel,\n    level,\n    onLevelChange,\n    date,\n    defaultDate,\n    onDateChange,\n    numberOfColumns,\n    columnsToScroll,\n    ariaLabels,\n    onYearSelect,\n    onMonthSelect,\n    onYearMouseEnter,\n    onMonthMouseEnter,\n    __updateDateOnYearSelect,\n    __updateDateOnMonthSelect,\n\n    // MonthLevelGroup props\n    firstDayOfWeek,\n    weekdayFormat,\n    weekendDays,\n    getDayProps,\n    excludeDate,\n    renderDay,\n    hideOutsideDates,\n    hideWeekdays,\n    getDayAriaLabel,\n    monthLabelFormat,\n    nextIcon,\n    previousIcon,\n    __onDayClick,\n    __onDayMouseEnter,\n    withCellSpacing,\n\n    // YearLevelGroup props\n    monthsListFormat,\n    getMonthControlProps,\n    yearLabelFormat,\n\n    // DecadeLevelGroup props\n    yearsListFormat,\n    getYearControlProps,\n    decadeLabelFormat,\n\n    // Other props\n    classNames,\n    styles,\n    unstyled,\n    minDate,\n    maxDate,\n    locale,\n    __staticSelector,\n    size,\n    __preventFocus,\n    __stopPropagation,\n    onNextDecade,\n    onPreviousDecade,\n    onNextYear,\n    onPreviousYear,\n    onNextMonth,\n    onPreviousMonth,\n    static: isStatic,\n    __timezoneApplied,\n    ...others\n  } = props;\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<CalendarFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const [_level, setLevel] = useUncontrolled({\n    value: level ? clampLevel(level, minLevel, maxLevel) : undefined,\n    defaultValue: defaultLevel ? clampLevel(defaultLevel, minLevel, maxLevel) : undefined,\n    finalValue: clampLevel(undefined, minLevel, maxLevel),\n    onChange: onLevelChange,\n  });\n\n  const [_date, setDate] = useUncontrolledDates({\n    type: 'default',\n    value: date,\n    defaultValue: defaultDate,\n    onChange: onDateChange as any,\n    applyTimezone: !__timezoneApplied,\n  });\n\n  const stylesApiProps = {\n    __staticSelector: __staticSelector || 'Calendar',\n    styles: resolvedStyles,\n    classNames: resolvedClassNames,\n    unstyled,\n    size,\n  };\n\n  const ctx = useDatesContext();\n\n  const _columnsToScroll = columnsToScroll || numberOfColumns || 1;\n  const currentDate = _date || shiftTimezone('add', new Date(), ctx.getTimezone());\n\n  const handleNextMonth = () => {\n    const nextDate = dayjs(currentDate).add(_columnsToScroll, 'month').toDate();\n    onNextMonth?.(nextDate);\n    setDate(nextDate);\n  };\n\n  const handlePreviousMonth = () => {\n    const nextDate = dayjs(currentDate).subtract(_columnsToScroll, 'month').toDate();\n    onPreviousMonth?.(nextDate);\n    setDate(nextDate);\n  };\n\n  const handleNextYear = () => {\n    const nextDate = dayjs(currentDate).add(_columnsToScroll, 'year').toDate();\n    onNextYear?.(nextDate);\n    setDate(nextDate);\n  };\n\n  const handlePreviousYear = () => {\n    const nextDate = dayjs(currentDate).subtract(_columnsToScroll, 'year').toDate();\n    onPreviousYear?.(nextDate);\n    setDate(nextDate);\n  };\n\n  const handleNextDecade = () => {\n    const nextDate = dayjs(currentDate)\n      .add(10 * _columnsToScroll, 'year')\n      .toDate();\n    onNextDecade?.(nextDate);\n    setDate(nextDate);\n  };\n\n  const handlePreviousDecade = () => {\n    const nextDate = dayjs(currentDate)\n      .subtract(10 * _columnsToScroll, 'year')\n      .toDate();\n    onPreviousDecade?.(nextDate);\n    setDate(nextDate);\n  };\n\n  return (\n    <Box ref={ref} size={size} data-calendar {...others}>\n      {_level === 'month' && (\n        <MonthLevelGroup\n          month={currentDate}\n          minDate={minDate}\n          maxDate={maxDate}\n          firstDayOfWeek={firstDayOfWeek}\n          weekdayFormat={weekdayFormat}\n          weekendDays={weekendDays}\n          getDayProps={getDayProps}\n          excludeDate={excludeDate}\n          renderDay={renderDay}\n          hideOutsideDates={hideOutsideDates}\n          hideWeekdays={hideWeekdays}\n          getDayAriaLabel={getDayAriaLabel}\n          onNext={handleNextMonth}\n          onPrevious={handlePreviousMonth}\n          hasNextLevel={maxLevel !== 'month'}\n          onLevelClick={() => setLevel('year')}\n          numberOfColumns={numberOfColumns}\n          locale={locale}\n          levelControlAriaLabel={ariaLabels?.monthLevelControl}\n          nextLabel={ariaLabels?.nextMonth}\n          nextIcon={nextIcon}\n          previousLabel={ariaLabels?.previousMonth}\n          previousIcon={previousIcon}\n          monthLabelFormat={monthLabelFormat}\n          __onDayClick={__onDayClick}\n          __onDayMouseEnter={__onDayMouseEnter}\n          __preventFocus={__preventFocus}\n          __stopPropagation={__stopPropagation}\n          static={isStatic}\n          withCellSpacing={withCellSpacing}\n          {...stylesApiProps}\n        />\n      )}\n\n      {_level === 'year' && (\n        <YearLevelGroup\n          year={currentDate}\n          numberOfColumns={numberOfColumns}\n          minDate={minDate}\n          maxDate={maxDate}\n          monthsListFormat={monthsListFormat}\n          getMonthControlProps={getMonthControlProps}\n          locale={locale}\n          onNext={handleNextYear}\n          onPrevious={handlePreviousYear}\n          hasNextLevel={maxLevel !== 'month' && maxLevel !== 'year'}\n          onLevelClick={() => setLevel('decade')}\n          levelControlAriaLabel={ariaLabels?.yearLevelControl}\n          nextLabel={ariaLabels?.nextYear}\n          nextIcon={nextIcon}\n          previousLabel={ariaLabels?.previousYear}\n          previousIcon={previousIcon}\n          yearLabelFormat={yearLabelFormat}\n          __onControlMouseEnter={onMonthMouseEnter}\n          __onControlClick={(_event, payload) => {\n            __updateDateOnMonthSelect && setDate(payload);\n            setLevel(clampLevel('month', minLevel, maxLevel));\n            onMonthSelect?.(payload);\n          }}\n          __preventFocus={__preventFocus}\n          __stopPropagation={__stopPropagation}\n          withCellSpacing={withCellSpacing}\n          {...stylesApiProps}\n        />\n      )}\n\n      {_level === 'decade' && (\n        <DecadeLevelGroup\n          decade={currentDate}\n          minDate={minDate}\n          maxDate={maxDate}\n          yearsListFormat={yearsListFormat}\n          getYearControlProps={getYearControlProps}\n          locale={locale}\n          onNext={handleNextDecade}\n          onPrevious={handlePreviousDecade}\n          numberOfColumns={numberOfColumns}\n          nextLabel={ariaLabels?.nextDecade}\n          nextIcon={nextIcon}\n          previousLabel={ariaLabels?.previousDecade}\n          previousIcon={previousIcon}\n          decadeLabelFormat={decadeLabelFormat}\n          __onControlMouseEnter={onYearMouseEnter}\n          __onControlClick={(_event, payload) => {\n            __updateDateOnYearSelect && setDate(payload);\n            setLevel(clampLevel('year', minLevel, maxLevel));\n            onYearSelect?.(payload);\n          }}\n          __preventFocus={__preventFocus}\n          __stopPropagation={__stopPropagation}\n          withCellSpacing={withCellSpacing}\n          {...stylesApiProps}\n        />\n      )}\n    </Box>\n  );\n});\n\nCalendar.classes = {\n  ...DecadeLevelGroup.classes,\n  ...YearLevelGroup.classes,\n  ...MonthLevelGroup.classes,\n};\nCalendar.displayName = '@mantine/dates/Calendar';\n", "export function pickCalendarProps<T extends Record<string, any>>(props: T) {\n  const {\n    maxLevel,\n    minLevel,\n    defaultLevel,\n    level,\n    onLevelChange,\n    nextIcon,\n    previousIcon,\n    date,\n    defaultDate,\n    onDateChange,\n    numberOfColumns,\n    columnsToScroll,\n    ariaLabels,\n    onYearSelect,\n    onMonthSelect,\n    onYearMouseEnter,\n    onMonthMouseEnter,\n    onNextMonth,\n    onPreviousMonth,\n    onNextYear,\n    onPreviousYear,\n    onNextDecade,\n    onPreviousDecade,\n    withCellSpacing,\n    __updateDateOnYearSelect,\n    __updateDateOnMonthSelect,\n\n    // MonthLevelGroup props\n    firstDayOfWeek,\n    weekdayFormat,\n    weekendDays,\n    getDayProps,\n    excludeDate,\n    renderDay,\n    hideOutsideDates,\n    hideWeekdays,\n    getDayAriaLabel,\n    monthLabelFormat,\n\n    // YearLevelGroup props\n    monthsListFormat,\n    getMonthControlProps,\n    yearLabelFormat,\n\n    // DecadeLevelGroup props\n    yearsListFormat,\n    getYearControlProps,\n    decadeLabelFormat,\n\n    // External picker props\n    allowSingleDateInRange,\n    allowDeselect,\n\n    // Other props\n    minDate,\n    maxDate,\n    locale,\n    ...others\n  } = props;\n\n  return {\n    calendarProps: {\n      maxLevel,\n      minLevel,\n      defaultLevel,\n      level,\n      onLevelChange,\n      nextIcon,\n      previousIcon,\n      date,\n      defaultDate,\n      onDateChange,\n      numberOfColumns,\n      columnsToScroll,\n      ariaLabels,\n      onYearSelect,\n      onMonthSelect,\n      onYearMouseEnter,\n      onMonthMouseEnter,\n      onNextMonth,\n      onPreviousMonth,\n      onNextYear,\n      onPreviousYear,\n      onNextDecade,\n      onPreviousDecade,\n      withCellSpacing,\n      __updateDateOnYearSelect,\n      __updateDateOnMonthSelect,\n\n      // MonthLevelGroup props\n      firstDayOfWeek,\n      weekdayFormat,\n      weekendDays,\n      getDayProps,\n      excludeDate,\n      renderDay,\n      hideOutsideDates,\n      hideWeekdays,\n      getDayAriaLabel,\n      monthLabelFormat,\n\n      // YearLevelGroup props\n      monthsListFormat,\n      getMonthControlProps,\n      yearLabelFormat,\n\n      // DecadeLevelGroup props\n      yearsListFormat,\n      getYearControlProps,\n      decadeLabelFormat,\n\n      // External picker props\n      allowSingleDateInRange,\n      allowDeselect,\n\n      // Other props\n      minDate,\n      maxDate,\n      locale,\n    },\n    others,\n  };\n}\n", "import dayjs from 'dayjs';\n\nexport function isInRange(date: Date, range: [Date, Date]) {\n  const _range = [...range].sort((a, b) => a.getTime() - b.getTime());\n  return (\n    dayjs(_range[0]).startOf('day').subtract(1, 'ms').isBefore(date) &&\n    dayjs(_range[1]).endOf('day').add(1, 'ms').isAfter(date)\n  );\n}\n", "import dayjs from 'dayjs';\nimport { useEffect, useState } from 'react';\nimport { DatePickerType, PickerBaseProps } from '../../types';\nimport { useUncontrolledDates } from '../use-uncontrolled-dates/use-uncontrolled-dates';\nimport { isInRange } from './is-in-range/is-in-range';\n\ninterface UseDatesRangeInput<Type extends DatePickerType = 'default'>\n  extends PickerBaseProps<Type> {\n  level: 'year' | 'month' | 'day';\n  type: Type;\n  onMouseLeave?: (event: React.MouseEvent<HTMLDivElement>) => void;\n  applyTimezone?: boolean;\n}\n\nexport function useDatesState<Type extends DatePickerType = 'default'>({\n  type,\n  level,\n  value,\n  defaultValue,\n  onChange,\n  allowSingleDateInRange,\n  allowDeselect,\n  onMouseLeave,\n  applyTimezone = true,\n}: UseDatesRangeInput<Type>) {\n  const [_value, setValue] = useUncontrolledDates({\n    type,\n    value,\n    defaultValue,\n    onChange,\n    applyTimezone,\n  });\n\n  const [pickedDate, setPickedDate] = useState<Date | null>(\n    type === 'range' ? (_value[0] && !_value[1] ? _value[0] : null) : null\n  );\n  const [hoveredDate, setHoveredDate] = useState<Date | null>(null);\n\n  const onDateChange = (date: Date) => {\n    if (type === 'range') {\n      if (pickedDate instanceof Date && !_value[1]) {\n        if (dayjs(date).isSame(pickedDate, level) && !allowSingleDateInRange) {\n          setPickedDate(null);\n          setHoveredDate(null);\n          setValue([null, null]);\n          return;\n        }\n\n        const result: [Date, Date] = [date, pickedDate];\n        result.sort((a, b) => a.getTime() - b.getTime());\n        setValue(result);\n        setHoveredDate(null);\n        setPickedDate(null);\n        return;\n      }\n\n      if (\n        _value[0] &&\n        !_value[1] &&\n        dayjs(date).isSame(_value[0], level) &&\n        !allowSingleDateInRange\n      ) {\n        setPickedDate(null);\n        setHoveredDate(null);\n        setValue([null, null]);\n        return;\n      }\n\n      setValue([date, null]);\n      setHoveredDate(null);\n      setPickedDate(date);\n      return;\n    }\n\n    if (type === 'multiple') {\n      if (_value.some((selected: Date) => dayjs(selected).isSame(date, level))) {\n        setValue(_value.filter((selected: Date) => !dayjs(selected).isSame(date, level)));\n      } else {\n        setValue([..._value, date]);\n      }\n\n      return;\n    }\n\n    if (_value && allowDeselect && dayjs(date).isSame(_value, level)) {\n      setValue(null);\n    } else {\n      setValue(date);\n    }\n  };\n\n  const isDateInRange = (date: Date) => {\n    if (pickedDate instanceof Date && hoveredDate instanceof Date) {\n      return isInRange(date, [hoveredDate, pickedDate]);\n    }\n\n    if (_value[0] instanceof Date && _value[1] instanceof Date) {\n      return isInRange(date, _value);\n    }\n\n    return false;\n  };\n\n  const onRootMouseLeave =\n    type === 'range'\n      ? (event: React.MouseEvent<HTMLDivElement>) => {\n          onMouseLeave?.(event);\n          setHoveredDate(null);\n        }\n      : onMouseLeave;\n\n  const isFirstInRange = (date: Date) => {\n    if (!(_value[0] instanceof Date)) {\n      return false;\n    }\n\n    if (dayjs(date).isSame(_value[0], level)) {\n      return !(hoveredDate && dayjs(hoveredDate).isBefore(_value[0]));\n    }\n\n    return false;\n  };\n\n  const isLastInRange = (date: Date) => {\n    if (_value[1] instanceof Date) {\n      return dayjs(date).isSame(_value[1], level);\n    }\n\n    if (!(_value[0] instanceof Date) || !hoveredDate) {\n      return false;\n    }\n\n    return dayjs(hoveredDate).isBefore(_value[0]) && dayjs(date).isSame(_value[0], level);\n  };\n\n  const getControlProps = (date: Date) => {\n    if (type === 'range') {\n      return {\n        selected: _value.some(\n          (selection: Date) => selection && dayjs(selection).isSame(date, level)\n        ),\n        inRange: isDateInRange(date),\n        firstInRange: isFirstInRange(date),\n        lastInRange: isLastInRange(date),\n        'data-autofocus': (!!_value[0] && dayjs(_value[0]).isSame(date, level)) || undefined,\n      };\n    }\n\n    if (type === 'multiple') {\n      return {\n        selected: _value.some(\n          (selection: Date) => selection && dayjs(selection).isSame(date, level)\n        ),\n        'data-autofocus': (!!_value[0] && dayjs(_value[0]).isSame(date, level)) || undefined,\n      };\n    }\n\n    const selected = dayjs(_value).isSame(date, level);\n    return { selected, 'data-autofocus': selected || undefined };\n  };\n\n  const onHoveredDateChange = type === 'range' && pickedDate ? setHoveredDate : () => {};\n\n  useEffect(() => {\n    if (type === 'range' && !_value[0] && !_value[1]) {\n      setPickedDate(null);\n    }\n  }, [value]);\n\n  return {\n    onDateChange,\n    onRootMouseLeave,\n    onHoveredDateChange,\n    getControlProps,\n    _value,\n    setValue,\n  };\n}\n", "import {\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineComponentStaticProperties,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useDatesState } from '../../hooks';\nimport { DatePickerType, PickerBaseProps } from '../../types';\nimport { shiftTimezone } from '../../utils';\nimport { Calendar, CalendarBaseProps } from '../Calendar';\nimport { useDatesContext } from '../DatesProvider';\nimport { DecadeLevelBaseSettings } from '../DecadeLevel';\nimport { DecadeLevelGroupStylesNames } from '../DecadeLevelGroup';\n\nexport type YearPickerStylesNames = DecadeLevelGroupStylesNames;\n\nexport interface YearPickerBaseProps<Type extends DatePickerType = 'default'>\n  extends PickerBaseProps<Type>,\n    DecadeLevelBaseSettings,\n    Omit<CalendarBaseProps, 'onNextYear' | 'onPreviousYear' | 'onNextMonth' | 'onPreviousMonth'> {}\n\nexport interface YearPickerProps<Type extends DatePickerType = 'default'>\n  extends BoxProps,\n    YearPickerBaseProps<Type>,\n    StylesApiProps<YearPickerFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {\n  /** Called when year is selected */\n  onYearSelect?: (date: Date) => void;\n}\n\nexport type YearPickerFactory = Factory<{\n  props: YearPickerProps;\n  ref: HTMLDivElement;\n  stylesNames: YearPickerStylesNames;\n}>;\n\nconst defaultProps: Partial<YearPickerProps> = {\n  type: 'default',\n};\n\ntype YearPickerComponent = (<Type extends DatePickerType = 'default'>(\n  props: YearPickerProps<Type> & { ref?: React.ForwardedRef<HTMLDivElement> }\n) => JSX.Element) & { displayName?: string } & MantineComponentStaticProperties<YearPickerFactory>;\n\nexport const YearPicker: YearPickerComponent = factory<YearPickerFactory>((_props, ref) => {\n  const props = useProps('YearPicker', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    vars,\n    type,\n    defaultValue,\n    value,\n    onChange,\n    __staticSelector,\n    getYearControlProps,\n    allowSingleDateInRange,\n    allowDeselect,\n    onMouseLeave,\n    onYearSelect,\n    __updateDateOnYearSelect,\n    __timezoneApplied,\n    ...others\n  } = props;\n\n  const { onDateChange, onRootMouseLeave, onHoveredDateChange, getControlProps } = useDatesState({\n    type: type as any,\n    level: 'year',\n    allowDeselect,\n    allowSingleDateInRange,\n    value,\n    defaultValue,\n    onChange: onChange as any,\n    onMouseLeave,\n    applyTimezone: !__timezoneApplied,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<YearPickerFactory>({\n    classNames,\n    styles,\n    props,\n  });\n  const ctx = useDatesContext();\n\n  return (\n    <Calendar\n      ref={ref}\n      minLevel=\"decade\"\n      __updateDateOnYearSelect={__updateDateOnYearSelect ?? false}\n      __staticSelector={__staticSelector || 'YearPicker'}\n      onMouseLeave={onRootMouseLeave}\n      onYearMouseEnter={(_event, date) => onHoveredDateChange(date)}\n      onYearSelect={(date) => {\n        onDateChange(date);\n        onYearSelect?.(date);\n      }}\n      getYearControlProps={(date) => ({\n        ...getControlProps(date),\n        ...getYearControlProps?.(date),\n      })}\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      {...others}\n      date={shiftTimezone('add', others.date, ctx.getTimezone(), __timezoneApplied)}\n      __timezoneApplied\n    />\n  );\n}) as any;\n\nYearPicker.classes = Calendar.classes;\nYearPicker.displayName = '@mantine/dates/YearPicker';\n", "import {\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineComponentStaticProperties,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useDatesState } from '../../hooks';\nimport { CalendarLevel, DatePickerType, PickerBaseProps } from '../../types';\nimport { shiftTimezone } from '../../utils';\nimport { Calendar, CalendarBaseProps } from '../Calendar';\nimport { useDatesContext } from '../DatesProvider';\nimport { DecadeLevelBaseSettings } from '../DecadeLevel';\nimport { DecadeLevelGroupStylesNames } from '../DecadeLevelGroup';\nimport { YearLevelBaseSettings } from '../YearLevel';\nimport { YearLevelGroupStylesNames } from '../YearLevelGroup';\n\nexport type MonthPickerStylesNames = DecadeLevelGroupStylesNames | YearLevelGroupStylesNames;\n\ntype MonthPickerLevel = Exclude<CalendarLevel, 'month'>;\n\nexport interface MonthPickerBaseProps<Type extends DatePickerType = 'default'>\n  extends PickerBaseProps<Type>,\n    DecadeLevelBaseSettings,\n    YearLevelBaseSettings,\n    Omit<CalendarBaseProps, 'onNextMonth' | 'onPreviousMonth'> {\n  /** Max level that user can go up to (decade, year), defaults to decade */\n  maxLevel?: MonthPickerLevel;\n\n  /** Initial level displayed to the user (decade, year, month), used for uncontrolled component */\n  defaultLevel?: MonthPickerLevel;\n\n  /** Current level displayed to the user (decade, year, month), used for controlled component */\n  level?: MonthPickerLevel;\n\n  /** Called when level changes */\n  onLevelChange?: (level: MonthPickerLevel) => void;\n}\n\nexport interface MonthPickerProps<Type extends DatePickerType = 'default'>\n  extends BoxProps,\n    MonthPickerBaseProps<Type>,\n    StylesApiProps<MonthPickerFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {\n  /** Called when month is selected */\n  onMonthSelect?: (date: Date) => void;\n}\n\nexport type MonthPickerFactory = Factory<{\n  props: MonthPickerProps;\n  ref: HTMLDivElement;\n  stylesNames: MonthPickerStylesNames;\n}>;\n\nconst defaultProps: Partial<MonthPickerProps> = {\n  type: 'default',\n};\n\ntype MonthPickerComponent = (<Type extends DatePickerType = 'default'>(\n  props: MonthPickerProps<Type> & { ref?: React.ForwardedRef<HTMLDivElement> }\n) => JSX.Element) & { displayName?: string } & MantineComponentStaticProperties<MonthPickerFactory>;\n\nexport const MonthPicker: MonthPickerComponent = factory<MonthPickerFactory>((_props, ref) => {\n  const props = useProps('MonthPicker', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    vars,\n    type,\n    defaultValue,\n    value,\n    onChange,\n    __staticSelector,\n    getMonthControlProps,\n    allowSingleDateInRange,\n    allowDeselect,\n    onMouseLeave,\n    onMonthSelect,\n    __updateDateOnMonthSelect,\n    __timezoneApplied,\n    onLevelChange,\n    ...others\n  } = props;\n\n  const { onDateChange, onRootMouseLeave, onHoveredDateChange, getControlProps } = useDatesState({\n    type: type as any,\n    level: 'month',\n    allowDeselect,\n    allowSingleDateInRange,\n    value,\n    defaultValue,\n    onChange: onChange as any,\n    onMouseLeave,\n    applyTimezone: !__timezoneApplied,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<MonthPickerFactory>({\n    classNames,\n    styles,\n    props,\n  });\n  const ctx = useDatesContext();\n\n  return (\n    <Calendar\n      ref={ref}\n      minLevel=\"year\"\n      __updateDateOnMonthSelect={__updateDateOnMonthSelect ?? false}\n      __staticSelector={__staticSelector || 'MonthPicker'}\n      onMouseLeave={onRootMouseLeave}\n      onMonthMouseEnter={(_event, date) => onHoveredDateChange(date)}\n      onMonthSelect={(date) => {\n        onDateChange(date);\n        onMonthSelect?.(date);\n      }}\n      getMonthControlProps={(date) => ({\n        ...getControlProps(date),\n        ...getMonthControlProps?.(date),\n      })}\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      onLevelChange={onLevelChange as any}\n      {...others}\n      date={shiftTimezone('add', others.date, ctx.getTimezone(), __timezoneApplied)}\n    />\n  );\n}) as any;\n\nMonthPicker.classes = Calendar.classes;\nMonthPicker.displayName = '@mantine/dates/MonthPicker';\n", "import {\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineComponentStaticProperties,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useDatesState } from '../../hooks';\nimport { CalendarLevel, DatePickerType, PickerBaseProps } from '../../types';\nimport { shiftTimezone } from '../../utils';\nimport { Calendar, CalendarBaseProps, CalendarSettings, CalendarStylesNames } from '../Calendar';\nimport { useDatesContext } from '../DatesProvider';\nimport { DecadeLevelBaseSettings } from '../DecadeLevel';\nimport { MonthLevelBaseSettings } from '../MonthLevel';\nimport { YearLevelBaseSettings } from '../YearLevel';\n\nexport type DatePickerStylesNames = CalendarStylesNames;\n\nexport interface DatePickerBaseProps<Type extends DatePickerType = 'default'>\n  extends PickerBaseProps<Type>,\n    DecadeLevelBaseSettings,\n    YearLevelBaseSettings,\n    MonthLevelBaseSettings,\n    CalendarBaseProps,\n    CalendarSettings {\n  /** Max level that user can go up to (decade, year, month), defaults to decade */\n  maxLevel?: CalendarLevel;\n\n  /** Initial level displayed to the user (decade, year, month), used for uncontrolled component */\n  defaultLevel?: CalendarLevel;\n\n  /** Current level displayed to the user (decade, year, month), used for controlled component */\n  level?: CalendarLevel;\n\n  /** Called when level changes */\n  onLevelChange?: (level: CalendarLevel) => void;\n}\n\nexport interface DatePickerProps<Type extends DatePickerType = 'default'>\n  extends BoxProps,\n    DatePickerBaseProps<Type>,\n    StylesApiProps<DatePickerFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {}\n\nexport type DatePickerFactory = Factory<{\n  props: DatePickerProps;\n  ref: HTMLDivElement;\n  stylesNames: DatePickerStylesNames;\n}>;\n\nconst defaultProps: Partial<DatePickerProps> = {\n  type: 'default',\n  defaultLevel: 'month',\n  numberOfColumns: 1,\n};\n\ntype DatePickerComponent = (<Type extends DatePickerType = 'default'>(\n  props: DatePickerProps<Type> & { ref?: React.ForwardedRef<HTMLDivElement> }\n) => JSX.Element) & { displayName?: string } & MantineComponentStaticProperties<DatePickerFactory>;\n\nexport const DatePicker: DatePickerComponent = factory<DatePickerFactory>((_props, ref) => {\n  const props = useProps('DatePicker', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    vars,\n    type,\n    defaultValue,\n    value,\n    onChange,\n    __staticSelector,\n    getDayProps,\n    allowSingleDateInRange,\n    allowDeselect,\n    onMouseLeave,\n    numberOfColumns,\n    hideOutsideDates,\n    __onDayMouseEnter,\n    __onDayClick,\n    __timezoneApplied,\n    ...others\n  } = props;\n\n  const { onDateChange, onRootMouseLeave, onHoveredDateChange, getControlProps } = useDatesState({\n    type: type as any,\n    level: 'day',\n    allowDeselect,\n    allowSingleDateInRange,\n    value,\n    defaultValue,\n    onChange: onChange as any,\n    onMouseLeave,\n    applyTimezone: !__timezoneApplied,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<DatePickerFactory>({\n    classNames,\n    styles,\n    props,\n  });\n  const ctx = useDatesContext();\n\n  return (\n    <Calendar\n      ref={ref}\n      minLevel=\"month\"\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      __staticSelector={__staticSelector || 'DatePicker'}\n      onMouseLeave={onRootMouseLeave}\n      numberOfColumns={numberOfColumns}\n      hideOutsideDates={hideOutsideDates ?? numberOfColumns !== 1}\n      __onDayMouseEnter={(_event, date) => {\n        onHoveredDateChange(date);\n        __onDayMouseEnter?.(_event, date);\n      }}\n      __onDayClick={(_event, date) => {\n        onDateChange(date);\n        __onDayClick?.(_event, date);\n      }}\n      getDayProps={(date) => ({\n        ...getControlProps(date),\n        ...getDayProps?.(date),\n      })}\n      {...others}\n      date={shiftTimezone('add', others.date, ctx.getTimezone(), __timezoneApplied)}\n      __timezoneApplied\n    />\n  );\n}) as any;\n\nDatePicker.classes = Calendar.classes;\nDatePicker.displayName = '@mantine/dates/DatePicker';\n", "import { shiftTimezone } from '../../../utils';\n\nexport function dateStringParser(dateString: string | null, timezone?: string) {\n  if (dateString === null) {\n    return null;\n  }\n\n  const date = shiftTimezone('add', new Date(dateString), timezone);\n\n  if (Number.isNaN(date.getTime()) || !dateString) {\n    return null;\n  }\n\n  return date;\n}\n", "import dayjs from 'dayjs';\n\ninterface IsDateValid {\n  date: Date;\n  maxDate: Date | null | undefined;\n  minDate: Date | null | undefined;\n}\n\nexport function isDateValid({ date, maxDate, minDate }: IsDateValid) {\n  if (date == null) {\n    return false;\n  }\n\n  if (Number.isNaN(date.getTime())) {\n    return false;\n  }\n\n  if (maxDate && dayjs(date).isAfter(maxDate, 'date')) {\n    return false;\n  }\n\n  if (minDate && dayjs(date).isBefore(minDate, 'date')) {\n    return false;\n  }\n\n  return true;\n}\n", "import dayjs from 'dayjs';\nimport { useEffect, useState } from 'react';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  BoxProps,\n  CloseButton,\n  ElementProps,\n  factory,\n  Factory,\n  Input,\n  InputVariant,\n  MantineSize,\n  Popover,\n  PopoverProps,\n  StylesApiProps,\n  useInputProps,\n} from '@mantine/core';\nimport { useDidUpdate } from '@mantine/hooks';\nimport { useUncontrolledDates } from '../../hooks';\nimport { CalendarLevel, DateValue } from '../../types';\nimport { assignTime } from '../../utils';\nimport { Calendar, CalendarBaseProps, CalendarStylesNames, pickCalendarProps } from '../Calendar';\nimport { useDatesContext } from '../DatesProvider';\nimport { DecadeLevelSettings } from '../DecadeLevel';\nimport { HiddenDatesInput } from '../HiddenDatesInput';\nimport { MonthLevelSettings } from '../MonthLevel';\nimport { YearLevelSettings } from '../YearLevel';\nimport { dateStringParser } from './date-string-parser/date-string-parser';\nimport { isDateValid } from './is-date-valid/is-date-valid';\n\nexport type DateInputStylesNames = __InputStylesNames | CalendarStylesNames;\n\nexport interface DateInputProps\n  extends BoxProps,\n    Omit<__BaseInputProps, 'size'>,\n    CalendarBaseProps,\n    DecadeLevelSettings,\n    YearLevelSettings,\n    MonthLevelSettings,\n    StylesApiProps<DateInputFactory>,\n    ElementProps<'input', 'size' | 'value' | 'defaultValue' | 'onChange'> {\n  /** Parses user input to convert it to Date object */\n  dateParser?: (value: string) => Date | null;\n\n  /** Value for controlled component */\n  value?: DateValue;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: DateValue;\n\n  /** Called when value changes */\n  onChange?: (value: DateValue) => void;\n\n  /** Props added to Popover component */\n  popoverProps?: Partial<Omit<PopoverProps, 'children'>>;\n\n  /** Determines whether input value can be cleared, adds clear button to right section, false by default */\n  clearable?: boolean;\n\n  /** Props added to clear button */\n  clearButtonProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** Dayjs format to display input value, \"MMMM D, YYYY\" by default  */\n  valueFormat?: string;\n\n  /** Determines whether input value should be reverted to last known valid value on blur, true by default */\n  fixOnBlur?: boolean;\n\n  /** Determines whether value can be deselected when the user clicks on the selected date in the calendar (only when clearable prop is set), defaults to true if clearable prop is set, false otherwise */\n  allowDeselect?: boolean;\n\n  /** Determines whether time (hours, minutes, seconds and milliseconds) should be preserved when new date is picked, true by default */\n  preserveTime?: boolean;\n\n  /** Max level that user can go up to (decade, year, month), defaults to decade */\n  maxLevel?: CalendarLevel;\n\n  /** Initial level displayed to the user (decade, year, month), used for uncontrolled component */\n  defaultLevel?: CalendarLevel;\n\n  /** Current level displayed to the user (decade, year, month), used for controlled component */\n  level?: CalendarLevel;\n\n  /** Called when level changes */\n  onLevelChange?: (level: CalendarLevel) => void;\n}\n\nexport type DateInputFactory = Factory<{\n  props: DateInputProps;\n  ref: HTMLInputElement;\n  stylesNames: DateInputStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<DateInputProps> = {\n  valueFormat: 'MMMM D, YYYY',\n  fixOnBlur: true,\n  preserveTime: true,\n};\n\nexport const DateInput = factory<DateInputFactory>((_props, ref) => {\n  const props = useInputProps('DateInput', defaultProps, _props);\n  const {\n    inputProps,\n    wrapperProps,\n    value,\n    defaultValue,\n    onChange,\n    clearable,\n    clearButtonProps,\n    popoverProps,\n    getDayProps,\n    locale,\n    valueFormat,\n    dateParser,\n    minDate,\n    maxDate,\n    fixOnBlur,\n    onFocus,\n    onBlur,\n    onClick,\n    readOnly,\n    name,\n    form,\n    rightSection,\n    unstyled,\n    classNames,\n    styles,\n    allowDeselect,\n    preserveTime,\n    date,\n    defaultDate,\n    onDateChange,\n    ...rest\n  } = props;\n\n  const [dropdownOpened, setDropdownOpened] = useState(false);\n  const { calendarProps, others } = pickCalendarProps(rest);\n  const ctx = useDatesContext();\n  const defaultDateParser = (val: string) => {\n    const parsedDate = dayjs(val, valueFormat, ctx.getLocale(locale)).toDate();\n    return Number.isNaN(parsedDate.getTime())\n      ? dateStringParser(val, ctx.getTimezone())\n      : parsedDate;\n  };\n\n  const _dateParser = dateParser || defaultDateParser;\n  const _allowDeselect = allowDeselect !== undefined ? allowDeselect : clearable;\n\n  const formatValue = (val: Date) =>\n    val ? dayjs(val).locale(ctx.getLocale(locale)).format(valueFormat) : '';\n\n  const [_value, setValue, controlled] = useUncontrolledDates({\n    type: 'default',\n    value,\n    defaultValue,\n    onChange,\n  });\n\n  const [_date, setDate] = useUncontrolledDates({\n    type: 'default',\n    value: date,\n    defaultValue: defaultValue || defaultDate,\n    onChange: onDateChange as any,\n  });\n\n  useEffect(() => {\n    if (controlled) {\n      setDate(value!);\n    }\n  }, [controlled, value]);\n\n  const [inputValue, setInputValue] = useState(formatValue(_value!));\n\n  useEffect(() => {\n    setInputValue(formatValue(_value!));\n  }, [ctx.getLocale(locale)]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.currentTarget.value;\n    setInputValue(val);\n    setDropdownOpened(true);\n\n    if (val.trim() === '' && clearable) {\n      setValue(null);\n    } else {\n      const dateValue = _dateParser(val);\n      if (isDateValid({ date: dateValue!, minDate, maxDate })) {\n        setValue(dateValue);\n        setDate(dateValue);\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    onBlur?.(event);\n    setDropdownOpened(false);\n    fixOnBlur && setInputValue(formatValue(_value!));\n  };\n\n  const handleInputFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    onFocus?.(event);\n    setDropdownOpened(true);\n  };\n\n  const handleInputClick = (event: React.MouseEvent<HTMLInputElement>) => {\n    onClick?.(event);\n    setDropdownOpened(true);\n  };\n\n  const _getDayProps = (day: Date) => ({\n    ...getDayProps?.(day),\n    selected: dayjs(_value!).isSame(day, 'day'),\n    onClick: () => {\n      const valueWithTime = preserveTime ? assignTime(_value!, day) : day;\n      const val =\n        clearable && _allowDeselect\n          ? dayjs(_value!).isSame(day, 'day')\n            ? null\n            : valueWithTime\n          : valueWithTime;\n      setValue(val);\n      !controlled && setInputValue(formatValue(val!));\n      setDropdownOpened(false);\n    },\n  });\n\n  const _rightSection =\n    rightSection ||\n    (clearable && _value && !readOnly ? (\n      <CloseButton\n        variant=\"transparent\"\n        onMouseDown={(event) => event.preventDefault()}\n        tabIndex={-1}\n        onClick={() => {\n          setValue(null);\n          !controlled && setInputValue('');\n          setDropdownOpened(false);\n        }}\n        unstyled={unstyled}\n        size={inputProps.size || 'sm'}\n        {...clearButtonProps}\n      />\n    ) : null);\n\n  useDidUpdate(() => {\n    value !== undefined && !dropdownOpened && setInputValue(formatValue(value!));\n  }, [value]);\n\n  return (\n    <>\n      <Input.Wrapper {...wrapperProps} __staticSelector=\"DateInput\">\n        <Popover\n          opened={dropdownOpened}\n          trapFocus={false}\n          position=\"bottom-start\"\n          disabled={readOnly}\n          withRoles={false}\n          unstyled={unstyled}\n          {...popoverProps}\n        >\n          <Popover.Target>\n            <Input\n              data-dates-input\n              data-read-only={readOnly || undefined}\n              autoComplete=\"off\"\n              ref={ref}\n              value={inputValue}\n              onChange={handleInputChange}\n              onBlur={handleInputBlur}\n              onFocus={handleInputFocus}\n              onClick={handleInputClick}\n              readOnly={readOnly}\n              rightSection={_rightSection}\n              {...inputProps}\n              {...others}\n              __staticSelector=\"DateInput\"\n            />\n          </Popover.Target>\n          <Popover.Dropdown onMouseDown={(event) => event.preventDefault()} data-dates-dropdown>\n            <Calendar\n              __staticSelector=\"DateInput\"\n              __timezoneApplied\n              {...calendarProps}\n              classNames={classNames}\n              styles={styles}\n              unstyled={unstyled}\n              __preventFocus\n              minDate={minDate}\n              maxDate={maxDate}\n              locale={locale}\n              getDayProps={_getDayProps}\n              size={inputProps.size as MantineSize}\n              date={_date!}\n              onDateChange={setDate}\n            />\n          </Popover.Dropdown>\n        </Popover>\n      </Input.Wrapper>\n      <HiddenDatesInput name={name} form={form} value={_value} type=\"default\" />\n    </>\n  );\n});\n\nDateInput.classes = { ...Input.classes, ...Calendar.classes };\nDateInput.displayName = '@mantine/dates/DateInput';\n", "'use client';\nvar classes = {\"timeWrapper\":\"m_208d2562\",\"timeInput\":\"m_62ee059\"};\n\nexport { classes as default };\n//# sourceMappingURL=DateTimePicker.module.css.mjs.map\n", "import dayjs from 'dayjs';\nimport { useRef, useState } from 'react';\nimport {\n  ActionIcon,\n  ActionIconProps,\n  BoxProps,\n  CheckIcon,\n  factory,\n  Factory,\n  InputVariant,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { useDidUpdate, useDisclosure, useMergedRef } from '@mantine/hooks';\nimport { useUncontrolledDates } from '../../hooks';\nimport { DateValue } from '../../types';\nimport { assignTime, shiftTimezone } from '../../utils';\nimport {\n  CalendarBaseProps,\n  CalendarSettings,\n  CalendarStylesNames,\n  pickCalendarProps,\n} from '../Calendar';\nimport { DatePicker } from '../DatePicker';\nimport { useDatesContext } from '../DatesProvider';\nimport {\n  DateInputSharedProps,\n  PickerInputBase,\n  PickerInputBaseStylesNames,\n} from '../PickerInputBase';\nimport { TimeInput, TimeInputProps } from '../TimeInput';\nimport classes from './DateTimePicker.module.css';\n\nexport type DateTimePickerStylesNames =\n  | 'timeWrapper'\n  | 'timeInput'\n  | 'submitButton'\n  | PickerInputBaseStylesNames\n  | CalendarStylesNames;\n\nexport interface DateTimePickerProps\n  extends BoxProps,\n    Omit<DateInputSharedProps, 'classNames' | 'styles' | 'closeOnChange' | 'size'>,\n    Omit<CalendarBaseProps, 'defaultDate'>,\n    Omit<CalendarSettings, 'onYearMouseEnter' | 'onMonthMouseEnter'>,\n    StylesApiProps<DateTimePickerFactory> {\n  /** Dayjs format to display input value, \"DD/MM/YYYY HH:mm\" by default  */\n  valueFormat?: string;\n\n  /** Controlled component value */\n  value?: DateValue;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: DateValue;\n\n  /** Called when value changes */\n  onChange?: (value: DateValue) => void;\n\n  /** TimeInput component props */\n  timeInputProps?: TimeInputProps & { ref?: React.ComponentPropsWithRef<'input'>['ref'] };\n\n  /** Props passed down to the submit button */\n  submitButtonProps?: ActionIconProps & React.ComponentPropsWithoutRef<'button'>;\n\n  /** Determines whether seconds input should be rendered */\n  withSeconds?: boolean;\n}\n\nexport type DateTimePickerFactory = Factory<{\n  props: DateTimePickerProps;\n  ref: HTMLButtonElement;\n  stylesNames: DateTimePickerStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<DateTimePickerProps> = {\n  dropdownType: 'popover',\n};\n\nexport const DateTimePicker = factory<DateTimePickerFactory>((_props, ref) => {\n  const props = useProps('DateTimePicker', defaultProps, _props);\n  const {\n    value,\n    defaultValue,\n    onChange,\n    valueFormat,\n    locale,\n    classNames,\n    styles,\n    unstyled,\n    timeInputProps,\n    submitButtonProps,\n    withSeconds,\n    level,\n    defaultLevel,\n    size,\n    variant,\n    dropdownType,\n    vars,\n    minDate,\n    maxDate,\n    ...rest\n  } = props;\n\n  const getStyles = useStyles<DateTimePickerFactory>({\n    name: 'DateTimePicker',\n    classes,\n    props,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<DateTimePickerFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const _valueFormat = valueFormat || (withSeconds ? 'DD/MM/YYYY HH:mm:ss' : 'DD/MM/YYYY HH:mm');\n\n  const timeInputRef = useRef<HTMLInputElement>();\n  const timeInputRefMerged = useMergedRef(timeInputRef, timeInputProps?.ref);\n\n  const {\n    calendarProps: { allowSingleDateInRange, ...calendarProps },\n    others,\n  } = pickCalendarProps(rest);\n\n  const ctx = useDatesContext();\n  const [_value, setValue] = useUncontrolledDates({\n    type: 'default',\n    value,\n    defaultValue,\n    onChange,\n  });\n\n  const formatTime = (dateValue: Date) =>\n    dateValue ? dayjs(dateValue).format(withSeconds ? 'HH:mm:ss' : 'HH:mm') : '';\n\n  const [timeValue, setTimeValue] = useState(formatTime(_value!));\n  const [currentLevel, setCurrentLevel] = useState(level || defaultLevel || 'month');\n\n  const [dropdownOpened, dropdownHandlers] = useDisclosure(false);\n  const formattedValue = _value\n    ? dayjs(_value).locale(ctx.getLocale(locale)).format(_valueFormat)\n    : '';\n\n  const handleTimeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    timeInputProps?.onChange?.(event);\n    const val = event.currentTarget.value;\n    setTimeValue(val);\n\n    if (val) {\n      const [hours, minutes, seconds] = val.split(':').map(Number);\n      const timeDate = shiftTimezone('add', new Date(), ctx.getTimezone());\n      timeDate.setHours(hours);\n      timeDate.setMinutes(minutes);\n      timeDate.setSeconds(seconds || 0);\n      setValue(assignTime(timeDate, _value || shiftTimezone('add', new Date(), ctx.getTimezone())));\n    }\n  };\n\n  const handleDateChange = (date: DateValue) => {\n    if (date) {\n      setValue(assignTime(_value, date));\n    }\n    timeInputRef.current?.focus();\n  };\n\n  const handleTimeInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    timeInputProps?.onKeyDown?.(event);\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      dropdownHandlers.close();\n    }\n  };\n\n  useDidUpdate(() => {\n    if (!dropdownOpened) {\n      setTimeValue(formatTime(_value!));\n    }\n  }, [_value, dropdownOpened]);\n\n  useDidUpdate(() => {\n    if (dropdownOpened) {\n      setCurrentLevel('month');\n    }\n  }, [dropdownOpened]);\n\n  const minTime = minDate ? dayjs(minDate).format('HH:mm:ss') : null;\n  const maxTime = maxDate ? dayjs(maxDate).format('HH:mm:ss') : null;\n\n  const __stopPropagation = dropdownType === 'popover';\n\n  return (\n    <PickerInputBase\n      formattedValue={formattedValue}\n      dropdownOpened={dropdownOpened}\n      dropdownHandlers={dropdownHandlers}\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      unstyled={unstyled}\n      ref={ref}\n      onClear={() => setValue(null)}\n      shouldClear={!!_value}\n      value={_value}\n      size={size!}\n      variant={variant}\n      dropdownType={dropdownType}\n      {...others}\n      type=\"default\"\n      __staticSelector=\"DateTimePicker\"\n    >\n      <DatePicker\n        {...calendarProps}\n        maxDate={maxDate}\n        minDate={minDate}\n        size={size}\n        variant={variant}\n        type=\"default\"\n        value={_value}\n        defaultDate={_value!}\n        onChange={handleDateChange}\n        locale={locale}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        __staticSelector=\"DateTimePicker\"\n        __stopPropagation={__stopPropagation}\n        level={level}\n        defaultLevel={defaultLevel}\n        onLevelChange={(_level) => {\n          setCurrentLevel(_level);\n          calendarProps.onLevelChange?.(_level);\n        }}\n        __timezoneApplied\n      />\n\n      {currentLevel === 'month' && (\n        <div {...getStyles('timeWrapper')}>\n          <TimeInput\n            value={timeValue}\n            withSeconds={withSeconds}\n            ref={timeInputRefMerged}\n            unstyled={unstyled}\n            minTime={\n              _value && minDate && _value.toDateString() === minDate.toDateString()\n                ? minTime != null\n                  ? minTime\n                  : undefined\n                : undefined\n            }\n            maxTime={\n              _value && maxDate && _value.toDateString() === maxDate.toDateString()\n                ? maxTime != null\n                  ? maxTime\n                  : undefined\n                : undefined\n            }\n            {...timeInputProps}\n            {...getStyles('timeInput', {\n              className: timeInputProps?.className,\n              style: timeInputProps?.style,\n            })}\n            onChange={handleTimeChange}\n            onKeyDown={handleTimeInputKeyDown}\n            size={size}\n            data-mantine-stop-propagation={__stopPropagation || undefined}\n          />\n\n          <ActionIcon<'button'>\n            variant=\"default\"\n            size={`input-${size || 'sm'}`}\n            {...getStyles('submitButton', {\n              className: submitButtonProps?.className,\n              style: submitButtonProps?.style,\n            })}\n            unstyled={unstyled}\n            data-mantine-stop-propagation={__stopPropagation || undefined}\n            // eslint-disable-next-line react/no-children-prop\n            children={<CheckIcon size=\"30%\" />}\n            {...submitButtonProps}\n            onClick={(event) => {\n              submitButtonProps?.onClick?.(event);\n              dropdownHandlers.close();\n            }}\n          />\n        </div>\n      )}\n    </PickerInputBase>\n  );\n});\n\nDateTimePicker.classes = { ...classes, ...PickerInputBase.classes, ...DatePicker.classes };\nDateTimePicker.displayName = '@mantine/dates/DateTimePicker';\n", "import { useDisclosure } from '@mantine/hooks';\nimport { useDatesContext } from '../../components/DatesProvider';\nimport { DatePickerType, DatePickerValue } from '../../types';\nimport { DateFormatter, getFormattedDate } from '../../utils';\nimport { useUncontrolledDates } from '../use-uncontrolled-dates/use-uncontrolled-dates';\n\ninterface UseDatesInput<Type extends DatePickerType = 'default'> {\n  type: Type;\n  value: DatePickerValue<Type> | undefined;\n  defaultValue: DatePickerValue<Type> | undefined;\n  onChange: ((value: DatePickerValue<Type>) => void) | undefined;\n  locale: string | undefined;\n  format: string | undefined;\n  closeOnChange: boolean | undefined;\n  sortDates: boolean | undefined;\n  labelSeparator: string | undefined;\n  valueFormatter: DateFormatter | undefined;\n}\n\nexport function useDatesInput<Type extends DatePickerType = 'default'>({\n  type,\n  value,\n  defaultValue,\n  onChange,\n  locale,\n  format,\n  closeOnChange,\n  sortDates,\n  labelSeparator,\n  valueFormatter,\n}: UseDatesInput<Type>) {\n  const ctx = useDatesContext();\n\n  const [dropdownOpened, dropdownHandlers] = useDisclosure(false);\n\n  const [_value, _setValue] = useUncontrolledDates({\n    type,\n    value,\n    defaultValue,\n    onChange,\n  });\n\n  const formattedValue = getFormattedDate({\n    type,\n    date: _value,\n    locale: ctx.getLocale(locale),\n    format: format!,\n    labelSeparator: ctx.getLabelSeparator(labelSeparator),\n    formatter: valueFormatter,\n  });\n\n  const setValue = (val: any) => {\n    if (closeOnChange) {\n      if (type === 'default') {\n        dropdownHandlers.close();\n      }\n\n      if (type === 'range' && val[0] && val[1]) {\n        dropdownHandlers.close();\n      }\n    }\n\n    if (sortDates && type === 'multiple') {\n      _setValue([...val].sort((a, b) => a.getTime() - b.getTime()));\n    } else {\n      _setValue(val);\n    }\n  };\n\n  const onClear = () => setValue(type === 'range' ? [null, null] : type === 'multiple' ? [] : null);\n  const shouldClear =\n    type === 'range' ? !!_value[0] : type === 'multiple' ? _value.length > 0 : _value !== null;\n\n  return {\n    _value,\n    setValue,\n    onClear,\n    shouldClear,\n    formattedValue,\n    dropdownOpened,\n    dropdownHandlers,\n  };\n}\n", "import {\n  __InputStylesNames,\n  BoxProps,\n  factory,\n  Factory,\n  InputVariant,\n  MantineComponentStaticProperties,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useDatesInput } from '../../hooks';\nimport { DatePickerType } from '../../types';\nimport { getDefaultClampedDate, shiftTimezone } from '../../utils';\nimport { pickCalendarProps } from '../Calendar';\nimport { useDatesContext } from '../DatesProvider';\nimport { DateInputSharedProps, PickerInputBase } from '../PickerInputBase';\nimport { YearPicker, YearPickerBaseProps, YearPickerStylesNames } from '../YearPicker';\n\nexport type YearPickerInputStylesNames = __InputStylesNames | 'placeholder' | YearPickerStylesNames;\n\nexport interface YearPickerInputProps<Type extends DatePickerType = 'default'>\n  extends BoxProps,\n    DateInputSharedProps,\n    YearPickerBaseProps<Type>,\n    StylesApiProps<YearPickerInputFactory> {\n  /** Dayjs format to display input value, \"YYYY\" by default  */\n  valueFormat?: string;\n}\n\nexport type YearPickerInputFactory = Factory<{\n  props: YearPickerInputProps;\n  ref: HTMLButtonElement;\n  stylesNames: YearPickerInputStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<YearPickerInputProps> = {\n  type: 'default',\n  valueFormat: 'YYYY',\n  closeOnChange: true,\n  sortDates: true,\n  dropdownType: 'popover',\n};\n\ntype YearPickerInputComponent = (<Type extends DatePickerType = 'default'>(\n  props: YearPickerInputProps<Type> & { ref?: React.ForwardedRef<HTMLButtonElement> }\n) => JSX.Element) & {\n  displayName?: string;\n} & MantineComponentStaticProperties<YearPickerInputFactory>;\n\nexport const YearPickerInput: YearPickerInputComponent = factory<YearPickerInputFactory>(\n  (_props, ref) => {\n    const props = useProps('YearPickerInput', defaultProps, _props);\n    const {\n      type,\n      value,\n      defaultValue,\n      onChange,\n      valueFormat,\n      labelSeparator,\n      locale,\n      classNames,\n      styles,\n      unstyled,\n      closeOnChange,\n      size,\n      variant,\n      dropdownType,\n      sortDates,\n      minDate,\n      maxDate,\n      vars,\n      valueFormatter,\n      ...rest\n    } = props;\n\n    const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<YearPickerInputFactory>({\n      classNames,\n      styles,\n      props,\n    });\n\n    const { calendarProps, others } = pickCalendarProps(rest);\n    const ctx = useDatesContext();\n\n    const {\n      _value,\n      setValue,\n      formattedValue,\n      dropdownHandlers,\n      dropdownOpened,\n      onClear,\n      shouldClear,\n    } = useDatesInput({\n      type: type as any,\n      value,\n      defaultValue,\n      onChange: onChange as any,\n      locale,\n      format: valueFormat,\n      labelSeparator,\n      closeOnChange,\n      sortDates,\n      valueFormatter,\n    });\n\n    return (\n      <PickerInputBase\n        formattedValue={formattedValue}\n        dropdownOpened={dropdownOpened}\n        dropdownHandlers={dropdownHandlers}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        ref={ref}\n        onClear={onClear}\n        shouldClear={shouldClear}\n        value={_value}\n        size={size!}\n        variant={variant}\n        dropdownType={dropdownType}\n        {...others}\n        type={type as any}\n        __staticSelector=\"YearPickerInput\"\n      >\n        <YearPicker\n          {...calendarProps}\n          size={size}\n          variant={variant}\n          type={type}\n          value={_value}\n          defaultDate={\n            Array.isArray(_value)\n              ? _value[0] ||\n                getDefaultClampedDate({ maxDate, minDate, timezone: ctx.getTimezone() })\n              : _value || getDefaultClampedDate({ maxDate, minDate, timezone: ctx.getTimezone() })\n          }\n          onChange={setValue}\n          locale={locale}\n          classNames={resolvedClassNames}\n          styles={resolvedStyles}\n          unstyled={unstyled}\n          __staticSelector=\"YearPickerInput\"\n          __stopPropagation={dropdownType === 'popover'}\n          minDate={minDate}\n          maxDate={maxDate}\n          date={shiftTimezone('add', calendarProps.date, ctx.getTimezone())}\n          __timezoneApplied\n        />\n      </PickerInputBase>\n    );\n  }\n) as any;\n\nYearPickerInput.classes = { ...PickerInputBase.classes, ...YearPicker.classes };\nYearPickerInput.displayName = '@mantine/dates/YearPickerInput';\n", "import {\n  __InputStylesNames,\n  BoxProps,\n  factory,\n  Factory,\n  InputVariant,\n  MantineComponentStaticProperties,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useDatesInput } from '../../hooks';\nimport { DatePickerType } from '../../types';\nimport { getDefaultClampedDate, shiftTimezone } from '../../utils';\nimport { pickCalendarProps } from '../Calendar';\nimport { useDatesContext } from '../DatesProvider';\nimport { MonthPicker, MonthPickerBaseProps, MonthPickerStylesNames } from '../MonthPicker';\nimport { DateInputSharedProps, PickerInputBase } from '../PickerInputBase';\n\nexport type MonthPickerInputStylesNames =\n  | __InputStylesNames\n  | 'placeholder'\n  | MonthPickerStylesNames;\n\nexport interface MonthPickerInputProps<Type extends DatePickerType = 'default'>\n  extends BoxProps,\n    DateInputSharedProps,\n    MonthPickerBaseProps<Type>,\n    StylesApiProps<MonthPickerInputFactory> {\n  /** Dayjs format to display input value, \"MMMM YYYY\" by default  */\n  valueFormat?: string;\n}\n\nexport type MonthPickerInputFactory = Factory<{\n  props: MonthPickerInputProps;\n  ref: HTMLButtonElement;\n  stylesNames: MonthPickerInputStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<MonthPickerInputProps> = {\n  type: 'default',\n  valueFormat: 'MMMM YYYY',\n  closeOnChange: true,\n  sortDates: true,\n  dropdownType: 'popover',\n};\n\ntype MonthPickerInputComponent = (<Type extends DatePickerType = 'default'>(\n  props: MonthPickerInputProps<Type> & { ref?: React.ForwardedRef<HTMLButtonElement> }\n) => JSX.Element) & {\n  displayName?: string;\n} & MantineComponentStaticProperties<MonthPickerInputFactory>;\n\nexport const MonthPickerInput: MonthPickerInputComponent = factory<MonthPickerInputFactory>(\n  (_props, ref) => {\n    const props = useProps('MonthPickerInput', defaultProps, _props);\n    const {\n      type,\n      value,\n      defaultValue,\n      onChange,\n      valueFormat,\n      labelSeparator,\n      locale,\n      classNames,\n      styles,\n      unstyled,\n      closeOnChange,\n      size,\n      variant,\n      dropdownType,\n      sortDates,\n      minDate,\n      maxDate,\n      vars,\n      valueFormatter,\n      ...rest\n    } = props;\n\n    const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<MonthPickerInputFactory>({\n      classNames,\n      styles,\n      props,\n    });\n\n    const { calendarProps, others } = pickCalendarProps(rest);\n\n    const {\n      _value,\n      setValue,\n      formattedValue,\n      dropdownHandlers,\n      dropdownOpened,\n      onClear,\n      shouldClear,\n    } = useDatesInput({\n      type: type as any,\n      value,\n      defaultValue,\n      onChange: onChange as any,\n      locale,\n      format: valueFormat,\n      labelSeparator,\n      closeOnChange,\n      sortDates,\n      valueFormatter,\n    });\n\n    const ctx = useDatesContext();\n\n    return (\n      <PickerInputBase\n        formattedValue={formattedValue}\n        dropdownOpened={dropdownOpened}\n        dropdownHandlers={dropdownHandlers}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        ref={ref}\n        onClear={onClear}\n        shouldClear={shouldClear}\n        value={_value}\n        size={size!}\n        variant={variant}\n        dropdownType={dropdownType}\n        {...others}\n        type={type as any}\n        __staticSelector=\"MonthPickerInput\"\n      >\n        <MonthPicker\n          {...calendarProps}\n          date={shiftTimezone('add', calendarProps.date, ctx.getTimezone())}\n          size={size}\n          variant={variant}\n          type={type}\n          value={_value}\n          defaultDate={\n            Array.isArray(_value)\n              ? _value[0] || getDefaultClampedDate({ maxDate, minDate })\n              : _value || getDefaultClampedDate({ maxDate, minDate })\n          }\n          onChange={setValue}\n          locale={locale}\n          classNames={resolvedClassNames}\n          styles={resolvedStyles}\n          unstyled={unstyled}\n          __staticSelector=\"MonthPickerInput\"\n          __stopPropagation={dropdownType === 'popover'}\n          minDate={minDate}\n          maxDate={maxDate}\n          __timezoneApplied\n        />\n      </PickerInputBase>\n    );\n  }\n) as any;\n\nMonthPickerInput.classes = { ...PickerInputBase.classes, ...MonthPicker.classes };\nMonthPickerInput.displayName = '@mantine/dates/MonthPickerInput';\n", "import {\n  __InputStylesNames,\n  BoxProps,\n  factory,\n  Factory,\n  InputVariant,\n  MantineComponentStaticProperties,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '@mantine/core';\nimport { useDatesInput } from '../../hooks';\nimport { DatePickerType } from '../../types';\nimport { getDefaultClampedDate, shiftTimezone } from '../../utils';\nimport { CalendarStylesNames, pickCalendarProps } from '../Calendar';\nimport { DatePicker, DatePickerBaseProps } from '../DatePicker';\nimport { useDatesContext } from '../DatesProvider';\nimport { DateInputSharedProps, PickerInputBase } from '../PickerInputBase';\n\nexport type DatePickerInputStylesNames = __InputStylesNames | 'placeholder' | CalendarStylesNames;\n\nexport interface DatePickerInputProps<Type extends DatePickerType = 'default'>\n  extends BoxProps,\n    DateInputSharedProps,\n    DatePickerBaseProps<Type>,\n    StylesApiProps<DatePickerInputFactory> {\n  /** Dayjs format to display input value, \"MMMM D, YYYY\" by default  */\n  valueFormat?: string;\n}\n\nexport type DatePickerInputFactory = Factory<{\n  props: DatePickerInputProps;\n  ref: HTMLButtonElement;\n  stylesNames: DatePickerInputStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<DatePickerInputProps> = {\n  type: 'default',\n  valueFormat: 'MMMM D, YYYY',\n  closeOnChange: true,\n  sortDates: true,\n  dropdownType: 'popover',\n};\n\ntype DatePickerInputComponent = (<Type extends DatePickerType = 'default'>(\n  props: DatePickerInputProps<Type> & { ref?: React.ForwardedRef<HTMLButtonElement> }\n) => JSX.Element) & {\n  displayName?: string;\n} & MantineComponentStaticProperties<DatePickerInputFactory>;\n\nexport const DatePickerInput: DatePickerInputComponent = factory<DatePickerInputFactory>(\n  (_props, ref) => {\n    const props = useProps('DatePickerInput', defaultProps, _props);\n    const {\n      type,\n      value,\n      defaultValue,\n      onChange,\n      valueFormat,\n      labelSeparator,\n      locale,\n      classNames,\n      styles,\n      unstyled,\n      closeOnChange,\n      size,\n      variant,\n      dropdownType,\n      sortDates,\n      minDate,\n      maxDate,\n      vars,\n      defaultDate,\n      valueFormatter,\n      ...rest\n    } = props;\n\n    const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<DatePickerInputFactory>({\n      classNames,\n      styles,\n      props,\n    });\n\n    const { calendarProps, others } = pickCalendarProps(rest);\n\n    const {\n      _value,\n      setValue,\n      formattedValue,\n      dropdownHandlers,\n      dropdownOpened,\n      onClear,\n      shouldClear,\n    } = useDatesInput({\n      type: type as any,\n      value,\n      defaultValue,\n      onChange: onChange as any,\n      locale,\n      format: valueFormat,\n      labelSeparator,\n      closeOnChange,\n      sortDates,\n      valueFormatter,\n    });\n\n    const _defaultDate = Array.isArray(_value) ? _value[0] || defaultDate : _value || defaultDate;\n    const ctx = useDatesContext();\n\n    return (\n      <PickerInputBase\n        formattedValue={formattedValue}\n        dropdownOpened={dropdownOpened}\n        dropdownHandlers={dropdownHandlers}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        ref={ref}\n        onClear={onClear}\n        shouldClear={shouldClear}\n        value={_value}\n        size={size!}\n        variant={variant}\n        dropdownType={dropdownType}\n        {...others}\n        type={type as any}\n        __staticSelector=\"DatePickerInput\"\n      >\n        <DatePicker\n          {...calendarProps}\n          size={size}\n          variant={variant}\n          type={type}\n          value={_value}\n          defaultDate={\n            _defaultDate || getDefaultClampedDate({ maxDate, minDate, timezone: ctx.getTimezone() })\n          }\n          onChange={setValue}\n          locale={locale}\n          classNames={resolvedClassNames}\n          styles={resolvedStyles}\n          unstyled={unstyled}\n          __staticSelector=\"DatePickerInput\"\n          __stopPropagation={dropdownType === 'popover'}\n          minDate={minDate}\n          maxDate={maxDate}\n          date={shiftTimezone('add', calendarProps.date, ctx.getTimezone())}\n          __timezoneApplied\n        />\n      </PickerInputBase>\n    );\n  }\n) as any;\n\nDatePickerInput.classes = { ...PickerInputBase.classes, ...DatePicker.classes };\nDatePickerInput.displayName = '@mantine/dates/DatePickerInput';\n", "import { type Row } from '@tanstack/react-table';\nimport {\n  type MRT_Column,\n  type MRT_ColumnDef,\n  type MRT_ColumnOrderState,\n  type MRT_DefinedColumnDef,\n  type MRT_DefinedTableOptions,\n  type MRT_FilterOption,\n  type MRT_RowData,\n} from '../types';\n\nexport const getColumnId = <TData extends MRT_RowData>(\n  columnDef: MRT_ColumnDef<TData>,\n): string =>\n  columnDef.id ?? columnDef.accessorKey?.toString?.() ?? columnDef.header;\n\nexport const getAllLeafColumnDefs = <TData extends MRT_RowData>(\n  columns: MRT_ColumnDef<TData>[],\n): MRT_ColumnDef<TData>[] => {\n  const allLeafColumnDefs: MRT_ColumnDef<TData>[] = [];\n  const getLeafColumns = (cols: MRT_ColumnDef<TData>[]) => {\n    cols.forEach((col) => {\n      if (col.columns) {\n        getLeafColumns(col.columns);\n      } else {\n        allLeafColumnDefs.push(col);\n      }\n    });\n  };\n  getLeafColumns(columns);\n  return allLeafColumnDefs;\n};\n\nexport const prepareColumns = <TData extends MRT_RowData>({\n  columnDefs,\n  tableOptions,\n}: {\n  columnDefs: MRT_ColumnDef<TData>[];\n  tableOptions: MRT_DefinedTableOptions<TData>;\n}): MRT_DefinedColumnDef<TData>[] => {\n  const {\n    aggregationFns = {},\n    defaultDisplayColumn,\n    filterFns = {},\n    sortingFns = {},\n    state: { columnFilterFns = {} } = {},\n  } = tableOptions;\n  return columnDefs.map((columnDef) => {\n    //assign columnId\n    if (!columnDef.id) columnDef.id = getColumnId(columnDef);\n    //assign columnDefType\n    if (!columnDef.columnDefType) columnDef.columnDefType = 'data';\n    if (columnDef.columns?.length) {\n      columnDef.columnDefType = 'group';\n      //recursively prepare columns if this is a group column\n      columnDef.columns = prepareColumns({\n        columnDefs: columnDef.columns,\n        tableOptions,\n      });\n    } else if (columnDef.columnDefType === 'data') {\n      //assign aggregationFns if multiple aggregationFns are provided\n      if (Array.isArray(columnDef.aggregationFn)) {\n        const aggFns = columnDef.aggregationFn as string[];\n        columnDef.aggregationFn = (\n          columnId: string,\n          leafRows: Row<TData>[],\n          childRows: Row<TData>[],\n        ) =>\n          aggFns.map((fn) =>\n            aggregationFns[fn]?.(columnId, leafRows, childRows),\n          );\n      }\n\n      //assign filterFns\n      if (Object.keys(filterFns).includes(columnFilterFns[columnDef.id])) {\n        columnDef.filterFn =\n          filterFns[columnFilterFns[columnDef.id]] ?? filterFns.fuzzy;\n        (columnDef as MRT_DefinedColumnDef<TData>)._filterFn =\n          columnFilterFns[columnDef.id];\n      }\n\n      //assign sortingFns\n      if (Object.keys(sortingFns).includes(columnDef.sortingFn as string)) {\n        // @ts-ignore\n        columnDef.sortingFn = sortingFns[columnDef.sortingFn];\n      }\n    } else if (columnDef.columnDefType === 'display') {\n      columnDef = {\n        ...(defaultDisplayColumn as MRT_ColumnDef<TData>),\n        ...columnDef,\n      };\n    }\n    return columnDef;\n  }) as MRT_DefinedColumnDef<TData>[];\n};\n\nexport const reorderColumn = <TData extends MRT_RowData>(\n  draggedColumn: MRT_Column<TData>,\n  targetColumn: MRT_Column<TData>,\n  columnOrder: MRT_ColumnOrderState,\n): MRT_ColumnOrderState => {\n  if (draggedColumn.getCanPin()) {\n    draggedColumn.pin(targetColumn.getIsPinned());\n  }\n  const newColumnOrder = [...columnOrder];\n  newColumnOrder.splice(\n    newColumnOrder.indexOf(targetColumn.id),\n    0,\n    newColumnOrder.splice(newColumnOrder.indexOf(draggedColumn.id), 1)[0],\n  );\n  return newColumnOrder;\n};\n\nexport const getDefaultColumnFilterFn = <TData extends MRT_RowData>(\n  columnDef: MRT_ColumnDef<TData>,\n): MRT_FilterOption => {\n  const { filterVariant } = columnDef;\n  if (filterVariant === 'multi-select') return 'arrIncludesSome';\n  if (filterVariant?.includes('range')) return 'betweenInclusive';\n  if (['checkbox', 'date', 'select'].includes(filterVariant || ''))\n    return 'equals';\n  return 'fuzzy';\n};\n", "import { type ReactNode } from 'react';\nimport {\n  createRow as _createRow,\n  flexRender as _flexRender,\n  type Renderable,\n} from '@tanstack/react-table';\nimport {\n  type MRT_ColumnHelper,\n  type MRT_DisplayColumnDef,\n  type MRT_GroupColumnDef,\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../types';\nimport { getAllLeafColumnDefs, getColumnId } from './column.utils';\n\nexport const flexRender = _flexRender as (\n  Comp: Renderable<any>,\n  props: any,\n) => JSX.Element | ReactNode;\n\nexport function createMRTColumnHelper<\n  TData extends MRT_RowData,\n>(): MRT_ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          };\n    },\n    display: (column) => column as MRT_DisplayColumnDef<TData>,\n    group: (column) => column as MRT_GroupColumnDef<TData>,\n  };\n}\n\nexport const createRow = <TData extends MRT_RowData>(\n  table: MRT_TableInstance<TData>,\n  originalRow?: TData,\n  rowIndex = -1,\n  depth = 0,\n  subRows?: MRT_Row<TData>[],\n  parentId?: string,\n): MRT_Row<TData> =>\n  _createRow(\n    table as any,\n    'mrt-row-create',\n    originalRow ??\n      Object.assign(\n        {},\n        ...getAllLeafColumnDefs(table.options.columns).map((col) => ({\n          [getColumnId(col)]: '',\n        })),\n      ),\n    rowIndex,\n    depth,\n    subRows as any,\n    parentId,\n  ) as MRT_Row<TData>;\n", "import {\n  type MRT_ColumnDef,\n  type MRT_DefinedTableOptions,\n  type MRT_DisplayColumnIds,\n  type MRT_Localization,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../types';\nimport { getAllLeafColumnDefs, getColumnId } from './column.utils';\n\nexport function defaultDisplayColumnProps<TData extends MRT_RowData>({\n  header,\n  id,\n  size,\n  tableOptions,\n}: {\n  header?: keyof MRT_Localization;\n  id: MRT_DisplayColumnIds;\n  size: number;\n  tableOptions: MRT_DefinedTableOptions<TData>;\n}): MRT_ColumnDef<TData> {\n  const { defaultDisplayColumn, displayColumnDefOptions, localization } =\n    tableOptions;\n  return {\n    ...defaultDisplayColumn,\n    header: header ? localization[header]! : '',\n    size,\n    ...displayColumnDefOptions?.[id],\n    id,\n  };\n}\n\nexport const showRowPinningColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => {\n  const { enableRowPinning, rowPinningDisplayMode } = tableOptions;\n  return !!(enableRowPinning && !rowPinningDisplayMode?.startsWith('select'));\n};\n\nexport const showRowDragColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => {\n  const { enableRowDragging, enableRowOrdering } = tableOptions;\n  return !!(enableRowDragging || enableRowOrdering);\n};\n\nexport const showRowExpandColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => {\n  const {\n    enableExpanding,\n    enableGrouping,\n    renderDetailPanel,\n    state: { grouping },\n  } = tableOptions;\n  return !!(\n    enableExpanding ||\n    (enableGrouping && grouping?.length) ||\n    renderDetailPanel\n  );\n};\n\nexport const showRowActionsColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => {\n  const {\n    createDisplayMode,\n    editDisplayMode,\n    enableEditing,\n    enableRowActions,\n    state: { creatingRow },\n  } = tableOptions;\n  return !!(\n    enableRowActions ||\n    (creatingRow && createDisplayMode === 'row') ||\n    (enableEditing && ['modal', 'row'].includes(editDisplayMode ?? ''))\n  );\n};\n\nexport const showRowSelectionColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => !!tableOptions.enableRowSelection;\n\nexport const showRowNumbersColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => !!tableOptions.enableRowNumbers;\n\nexport const showRowSpacerColumn = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): boolean => tableOptions.layoutMode === 'grid-no-grow';\n\nexport const getLeadingDisplayColumnIds = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n) =>\n  [\n    showRowPinningColumn(tableOptions) && 'mrt-row-pin',\n    showRowDragColumn(tableOptions) && 'mrt-row-drag',\n    tableOptions.positionActionsColumn === 'first' &&\n      showRowActionsColumn(tableOptions) &&\n      'mrt-row-actions',\n    tableOptions.positionExpandColumn === 'first' &&\n      showRowExpandColumn(tableOptions) &&\n      'mrt-row-expand',\n    showRowSelectionColumn(tableOptions) && 'mrt-row-select',\n    showRowNumbersColumn(tableOptions) && 'mrt-row-numbers',\n  ].filter(Boolean) as MRT_DisplayColumnIds[];\n\nexport const getTrailingDisplayColumnIds = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n) =>\n  [\n    tableOptions.positionActionsColumn === 'last' &&\n      showRowActionsColumn(tableOptions) &&\n      'mrt-row-actions',\n    tableOptions.positionExpandColumn === 'last' &&\n      showRowExpandColumn(tableOptions) &&\n      'mrt-row-expand',\n    showRowSpacerColumn(tableOptions) && 'mrt-row-spacer',\n  ].filter(Boolean) as MRT_DisplayColumnIds[];\n\nexport const getDefaultColumnOrderIds = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n  reset = false,\n) => {\n  const {\n    state: { columnOrder: currentColumnOrderIds = [] },\n  } = tableOptions;\n\n  const leadingDisplayColIds: string[] =\n    getLeadingDisplayColumnIds(tableOptions);\n  const trailingDisplayColIds: string[] =\n    getTrailingDisplayColumnIds(tableOptions);\n\n  const defaultColumnDefIds = getAllLeafColumnDefs(tableOptions.columns).map(\n    (columnDef) => getColumnId(columnDef),\n  );\n\n  let allLeafColumnDefIds = reset\n    ? defaultColumnDefIds\n    : Array.from(new Set([...currentColumnOrderIds, ...defaultColumnDefIds]));\n\n  allLeafColumnDefIds = allLeafColumnDefIds.filter(\n    (colId) =>\n      !leadingDisplayColIds.includes(colId) &&\n      !trailingDisplayColIds.includes(colId),\n  );\n\n  return [\n    ...leadingDisplayColIds,\n    ...allLeafColumnDefIds,\n    ...trailingDisplayColIds,\n  ];\n};\n", "import { type RankingInfo, compareItems } from '@tanstack/match-sorter-utils';\nimport { type Row, sortingFns } from '@tanstack/react-table';\nimport { type MRT_Row, type MRT_RowData } from '../types';\n\nconst fuzzy = <TData extends MRT_RowData>(\n  rowA: Row<TData>,\n  rowB: Row<TData>,\n  columnId: string,\n) => {\n  let dir = 0;\n  if (rowA.columnFiltersMeta[columnId]) {\n    dir = compareItems(\n      rowA.columnFiltersMeta[columnId] as RankingInfo,\n      rowB.columnFiltersMeta[columnId] as RankingInfo,\n    );\n  }\n  // Provide a fallback for when the item ranks are equal\n  return dir === 0\n    ? sortingFns.alphanumeric(rowA as Row<any>, rowB as Row<any>, columnId)\n    : dir;\n};\n\nexport const MRT_SortingFns = {\n  ...sortingFns,\n  fuzzy,\n};\n\nexport const rankGlobalFuzzy = <TData extends MRT_RowData>(\n  rowA: MRT_Row<TData>,\n  rowB: MRT_Row<TData>,\n) =>\n  Math.max(...Object.values(rowB.columnFiltersMeta).map((v: any) => v.rank)) -\n  Math.max(...Object.values(rowA.columnFiltersMeta).map((v: any) => v.rank));\n", "export const parseFromValuesOrFunc = <T, U>(\n  fn: ((arg: U) => T) | T | undefined,\n  arg: U,\n): T | undefined => (fn instanceof Function ? fn(arg) : fn);\n", "import { type ChangeEvent, type MouseEvent } from 'react';\nimport { rankGlobalFuzzy } from '../fns/sortingFns';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../types';\nimport { parseFromValuesOrFunc } from './utils';\n\nexport const getMRT_Rows = <TData extends MRT_RowData>(\n  table: MRT_TableInstance<TData>,\n  all?: boolean,\n): MRT_Row<TData>[] => {\n  const {\n    getCenterRows,\n    getPrePaginationRowModel,\n    getRowModel,\n    getState,\n    getTopRows,\n    options: {\n      createDisplayMode,\n      enablePagination,\n      enableRowPinning,\n      manualPagination,\n      positionCreatingRow,\n      rowPinningDisplayMode,\n    },\n  } = table;\n  const { creatingRow, pagination } = getState();\n\n  const isRankingRows = getIsRankingRows(table);\n\n  let rows: MRT_Row<TData>[] = [];\n  if (!isRankingRows) {\n    rows =\n      !enableRowPinning || rowPinningDisplayMode?.includes('sticky')\n        ? all\n          ? getPrePaginationRowModel().rows\n          : getRowModel().rows\n        : getCenterRows();\n  } else {\n    // fuzzy ranking adjustments\n    rows = getPrePaginationRowModel().rows.sort((a, b) =>\n      rankGlobalFuzzy(a, b),\n    );\n    if (enablePagination && !manualPagination && !all) {\n      const start = pagination.pageIndex * pagination.pageSize;\n      rows = rows.slice(start, start + pagination.pageSize);\n    }\n    if (enableRowPinning && !rowPinningDisplayMode?.includes('sticky')) {\n      // \"re-center-ize\" the rows (no top or bottom pinned rows unless sticky)\n      rows = rows.filter((row) => !row.getIsPinned());\n    }\n  }\n  // row pinning adjustments\n  if (enableRowPinning && rowPinningDisplayMode?.includes('sticky')) {\n    const centerPinnedRowIds = rows\n      .filter((row) => row.getIsPinned())\n      .map((r) => r.id);\n\n    rows = [\n      ...getTopRows().filter((row) => !centerPinnedRowIds.includes(row.id)),\n      ...rows,\n    ];\n  }\n  // blank inserted creating row adjustments\n  if (\n    positionCreatingRow !== undefined &&\n    creatingRow &&\n    createDisplayMode === 'row'\n  ) {\n    const creatingRowIndex = !isNaN(+positionCreatingRow)\n      ? +positionCreatingRow\n      : positionCreatingRow === 'top'\n        ? 0\n        : rows.length;\n    rows = [\n      ...rows.slice(0, creatingRowIndex),\n      creatingRow,\n      ...rows.slice(creatingRowIndex),\n    ];\n  }\n\n  return rows;\n};\n\nexport const getCanRankRows = <TData extends MRT_RowData>(\n  table: MRT_TableInstance<TData>,\n) => {\n  const {\n    getState,\n    options: {\n      enableGlobalFilterRankedResults,\n      manualExpanding,\n      manualFiltering,\n      manualGrouping,\n      manualSorting,\n    },\n  } = table;\n  const { expanded, globalFilterFn } = getState();\n\n  return (\n    !manualExpanding &&\n    !manualFiltering &&\n    !manualGrouping &&\n    !manualSorting &&\n    enableGlobalFilterRankedResults &&\n    globalFilterFn === 'fuzzy' &&\n    expanded !== true &&\n    !Object.values(expanded).some(Boolean)\n  );\n};\n\nexport const getIsRankingRows = <TData extends MRT_RowData>(\n  table: MRT_TableInstance<TData>,\n) => {\n  const { globalFilter, sorting } = table.getState();\n\n  return (\n    getCanRankRows(table) &&\n    globalFilter &&\n    !Object.values(sorting).some(Boolean)\n  );\n};\n\nexport const getIsRowSelected = <TData extends MRT_RowData>({\n  row,\n  table,\n}: {\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}) => {\n  const {\n    options: { enableRowSelection },\n  } = table;\n\n  return (\n    row.getIsSelected() ||\n    (parseFromValuesOrFunc(enableRowSelection, row) &&\n      row.getCanSelectSubRows() &&\n      row.getIsAllSubRowsSelected())\n  );\n};\n\nexport const getMRT_RowSelectionHandler =\n  <TData extends MRT_RowData>({\n    renderedRowIndex = 0,\n    row,\n    table,\n  }: {\n    renderedRowIndex?: number;\n    row: MRT_Row<TData>;\n    table: MRT_TableInstance<TData>;\n  }) =>\n  (\n    event: ChangeEvent<HTMLInputElement> | MouseEvent<HTMLTableRowElement>,\n    value?: boolean,\n  ) => {\n    const {\n      getState,\n      options: {\n        enableBatchRowSelection,\n        enableMultiRowSelection,\n        enableRowPinning,\n        manualPagination,\n        rowPinningDisplayMode,\n      },\n      refs: { lastSelectedRowId: lastSelectedRowId },\n    } = table;\n    const {\n      pagination: { pageIndex, pageSize },\n    } = getState();\n\n    const paginationOffset = manualPagination ? 0 : pageSize * pageIndex;\n\n    const wasCurrentRowChecked = getIsRowSelected({ row, table });\n\n    // toggle selection of this row\n    row.toggleSelected(value ?? !wasCurrentRowChecked);\n\n    const changedRowIds = new Set<string>([row.id]);\n\n    // if shift key is pressed, select all rows between last selected and this one\n    if (\n      enableBatchRowSelection &&\n      enableMultiRowSelection &&\n      (event as any).nativeEvent.shiftKey &&\n      lastSelectedRowId.current !== null\n    ) {\n      const rows = getMRT_Rows(table, true);\n\n      const lastIndex = rows.findIndex(\n        (r) => r.id === lastSelectedRowId.current,\n      );\n\n      if (lastIndex !== -1) {\n        const isLastIndexChecked = getIsRowSelected({\n          row: rows?.[lastIndex],\n          table,\n        });\n\n        const currentIndex = renderedRowIndex + paginationOffset;\n        const [start, end] =\n          lastIndex < currentIndex\n            ? [lastIndex, currentIndex]\n            : [currentIndex, lastIndex];\n\n        // toggle selection of all rows between last selected and this one\n        // but only if the last selected row is not the same as the current one\n        if (wasCurrentRowChecked !== isLastIndexChecked) {\n          for (let i = start; i <= end; i++) {\n            rows[i].toggleSelected(!wasCurrentRowChecked);\n            changedRowIds.add(rows[i].id);\n          }\n        }\n      }\n    }\n\n    // record the last selected row id\n    lastSelectedRowId.current = row.id;\n\n    // if all sub rows were selected, unselect them\n    if (row.getCanSelectSubRows() && row.getIsAllSubRowsSelected()) {\n      row.subRows?.forEach((r) => r.toggleSelected(false));\n    }\n\n    if (enableRowPinning && rowPinningDisplayMode?.includes('select')) {\n      changedRowIds.forEach((rowId) => {\n        const rowToTogglePin = table.getRow(rowId);\n        rowToTogglePin.pin(\n          !wasCurrentRowChecked //was not previously pinned or selected\n            ? rowPinningDisplayMode?.includes('bottom')\n              ? 'bottom'\n              : 'top'\n            : false,\n        );\n      });\n    }\n  };\n\nexport const getMRT_SelectAllHandler =\n  <TData extends MRT_RowData>({ table }: { table: MRT_TableInstance<TData> }) =>\n  (\n    event: ChangeEvent<HTMLInputElement> | MouseEvent<HTMLButtonElement>,\n    value?: boolean,\n    forceAll?: boolean,\n  ) => {\n    const {\n      options: { enableRowPinning, rowPinningDisplayMode, selectAllMode },\n      refs: { lastSelectedRowId },\n    } = table;\n\n    selectAllMode === 'all' || forceAll\n      ? table.toggleAllRowsSelected(value ?? (event as any).target.checked)\n      : table.toggleAllPageRowsSelected(value ?? (event as any).target.checked);\n    if (enableRowPinning && rowPinningDisplayMode?.includes('select')) {\n      table.setRowPinning({ bottom: [], top: [] });\n    }\n    lastSelectedRowId.current = null;\n  };\n", "import { type MantineTheme } from '@mantine/core';\nimport { type MantineShade } from '../types';\n\nexport const parseCSSVarId = (id: string) => id.replace(/[^a-zA-Z0-9]/g, '_');\n\nexport const getPrimaryShade = (theme: MantineTheme): number =>\n  typeof theme.primaryShade === 'number'\n    ? theme.primaryShade\n    : theme.primaryShade?.dark ?? 7;\n\nexport const getPrimaryColor = (\n  theme: MantineTheme,\n  shade?: MantineShade,\n): string => theme.colors[theme.primaryColor][shade ?? getPrimaryShade(theme)];\n\nexport function dataVariable(\n  name: string,\n  value: boolean | number | string | undefined,\n) {\n  const key = `data-${name}`;\n  switch (typeof value) {\n    case 'boolean':\n      return value ? { [key]: '' } : null;\n    case 'number':\n      return { [key]: `${value}` };\n    case 'string':\n      return { [key]: value };\n    default:\n      return null;\n  }\n}\n", "import { aggregationFns } from '@tanstack/react-table';\n\nexport const MRT_AggregationFns = { ...aggregationFns };\n", "import {\n  type RankingInfo,\n  rankItem,\n  rankings,\n} from '@tanstack/match-sorter-utils';\nimport { type Row, filterFns } from '@tanstack/react-table';\nimport {\n  type MRT_FilterOption,\n  type MRT_Localization,\n  type MRT_RowData,\n} from '../types';\n\nconst fuzzy = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  columnId: string,\n  filterValue: number | string,\n  addMeta: (item: RankingInfo) => void,\n) => {\n  const itemRank = rankItem(row.getValue(columnId), filterValue as string, {\n    threshold: rankings.MATCHES,\n  });\n  addMeta(itemRank);\n  return itemRank.passed;\n};\n\nfuzzy.autoRemove = (val: any) => !val;\n\nconst contains = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  row\n    .getValue<number | string>(id)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .includes(filterValue.toString().toLowerCase().trim());\n\ncontains.autoRemove = (val: any) => !val;\n\nconst startsWith = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  row\n    .getValue<number | string>(id)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .startsWith(filterValue.toString().toLowerCase().trim());\n\nstartsWith.autoRemove = (val: any) => !val;\n\nconst endsWith = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  row\n    .getValue<number | string>(id)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .endsWith(filterValue.toString().toLowerCase().trim());\n\nendsWith.autoRemove = (val: any) => !val;\n\nconst equals = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  row.getValue<number | string>(id).toString().toLowerCase().trim() ===\n  filterValue?.toString().toLowerCase().trim();\n\nequals.autoRemove = (val: any) => !val;\n\nconst notEquals = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  row.getValue<number | string>(id).toString().toLowerCase().trim() !==\n  filterValue.toString().toLowerCase().trim();\n\nnotEquals.autoRemove = (val: any) => !val;\n\nconst greaterThan = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  !isNaN(+filterValue) && !isNaN(+row.getValue<number | string>(id))\n    ? +row.getValue<number | string>(id) > +filterValue\n    : row.getValue<number | string>(id).toString().toLowerCase().trim() >\n      filterValue?.toString().toLowerCase().trim();\n\ngreaterThan.autoRemove = (val: any) => !val;\n\nconst greaterThanOrEqualTo = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) => equals(row, id, filterValue) || greaterThan(row, id, filterValue);\n\ngreaterThanOrEqualTo.autoRemove = (val: any) => !val;\n\nconst lessThan = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) =>\n  !isNaN(+filterValue) && !isNaN(+row.getValue<number | string>(id))\n    ? +row.getValue<number | string>(id) < +filterValue\n    : row.getValue<number | string>(id).toString().toLowerCase().trim() <\n      filterValue?.toString().toLowerCase().trim();\n\nlessThan.autoRemove = (val: any) => !val;\n\nconst lessThanOrEqualTo = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValue: number | string,\n) => equals(row, id, filterValue) || lessThan(row, id, filterValue);\n\nlessThanOrEqualTo.autoRemove = (val: any) => !val;\n\nconst between = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValues: [number | string, number | string],\n) =>\n  ((['', undefined] as any[]).includes(filterValues[0]) ||\n    greaterThan(row, id, filterValues[0])) &&\n  ((!isNaN(+filterValues[0]) &&\n    !isNaN(+filterValues[1]) &&\n    +filterValues[0] > +filterValues[1]) ||\n    (['', undefined] as any[]).includes(filterValues[1]) ||\n    lessThan(row, id, filterValues[1]));\n\nbetween.autoRemove = (val: any) => !val;\n\nconst betweenInclusive = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  filterValues: [number | string, number | string],\n) =>\n  ((['', undefined] as any[]).includes(filterValues[0]) ||\n    greaterThanOrEqualTo(row, id, filterValues[0])) &&\n  ((!isNaN(+filterValues[0]) &&\n    !isNaN(+filterValues[1]) &&\n    +filterValues[0] > +filterValues[1]) ||\n    (['', undefined] as any[]).includes(filterValues[1]) ||\n    lessThanOrEqualTo(row, id, filterValues[1]));\n\nbetweenInclusive.autoRemove = (val: any) => !val;\n\nconst empty = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  _filterValue: number | string,\n) => !row.getValue<number | string>(id).toString().trim();\n\nempty.autoRemove = (val: any) => !val;\n\nconst notEmpty = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  id: string,\n  _filterValue: number | string,\n) => !!row.getValue<number | string>(id).toString().trim();\n\nnotEmpty.autoRemove = (val: any) => !val;\n\nexport const MRT_FilterFns = {\n  ...filterFns,\n  between,\n  betweenInclusive,\n  contains,\n  empty,\n  endsWith,\n  equals,\n  fuzzy,\n  greaterThan,\n  greaterThanOrEqualTo,\n  lessThan,\n  lessThanOrEqualTo,\n  notEmpty,\n  notEquals,\n  startsWith,\n};\n\nexport function localizedFilterOption(\n  localization: MRT_Localization,\n  option: MRT_FilterOption,\n) {\n  if (!option) {\n    return '';\n  }\n  const key = `filter${option[0].toUpperCase()}${option.slice(1)}`;\n  return localization[key as keyof MRT_Localization] ?? '';\n}\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n", "import clsx from 'clsx';\nimport classes from './MRT_EditActionButtons.module.css';\nimport { ActionIcon, Box, type BoxProps, Button, Tooltip } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends BoxProps {\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n  variant?: 'icon' | 'text';\n}\n\nexport const MRT_EditActionButtons = <TData extends MRT_RowData>({\n  row,\n  table,\n  variant = 'icon',\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      icons: { IconCircleX, IconDeviceFloppy },\n      localization,\n      onCreatingRowCancel,\n      onCreatingRowSave,\n      onEditingRowCancel,\n      onEditingRowSave,\n    },\n    refs: { editInputRefs },\n    setCreatingRow,\n    setEditingRow,\n  } = table;\n  const { creatingRow, editingRow, isSaving } = getState();\n\n  const isCreating = creatingRow?.id === row.id;\n  const isEditing = editingRow?.id === row.id;\n\n  const handleCancel = () => {\n    if (isCreating) {\n      onCreatingRowCancel?.({ row, table });\n      setCreatingRow(null);\n    } else if (isEditing) {\n      onEditingRowCancel?.({ row, table });\n      setEditingRow(null);\n    }\n    row._valuesCache = {} as any; //reset values cache\n  };\n\n  const handleSubmitRow = () => {\n    //look for auto-filled input values\n    Object.values(editInputRefs?.current)\n      .filter((inputRef) => row.id === inputRef?.name?.split('_')?.[0])\n      ?.forEach((input) => {\n        if (\n          input.value !== undefined &&\n          Object.hasOwn(row?._valuesCache as object, input.name)\n        ) {\n          // @ts-ignore\n          row._valuesCache[input.name] = input.value;\n        }\n      });\n    if (isCreating)\n      onCreatingRowSave?.({\n        exitCreatingMode: () => setCreatingRow(null),\n        row,\n        table,\n        values: row._valuesCache,\n      });\n    else if (isEditing) {\n      onEditingRowSave?.({\n        exitEditingMode: () => setEditingRow(null),\n        row,\n        table,\n        values: row?._valuesCache,\n      });\n    }\n  };\n\n  return (\n    <Box\n      className={clsx('mrt-edit-action-buttons', classes.root)}\n      onClick={(e) => e.stopPropagation()}\n      {...rest}\n    >\n      {variant === 'icon' ? (\n        <>\n          <Tooltip label={localization.cancel} withinPortal>\n            <ActionIcon\n              aria-label={localization.cancel}\n              color=\"red\"\n              onClick={handleCancel}\n              variant=\"subtle\"\n            >\n              <IconCircleX />\n            </ActionIcon>\n          </Tooltip>\n          <Tooltip label={localization.save} withinPortal>\n            <ActionIcon\n              aria-label={localization.save}\n              color=\"blue\"\n              loading={isSaving}\n              onClick={handleSubmitRow}\n              variant=\"subtle\"\n            >\n              <IconDeviceFloppy />\n            </ActionIcon>\n          </Tooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleCancel} variant=\"subtle\">\n            {localization.cancel}\n          </Button>\n          <Button loading={isSaving} onClick={handleSubmitRow} variant=\"filled\">\n            {localization.save}\n          </Button>\n        </>\n      )}\n    </Box>\n  );\n};\n", "import { type MouseEvent } from 'react';\nimport { ActionIcon, type ActionIconProps, Menu, Tooltip } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  handleEdit: (event: MouseEvent) => void;\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_RowActionMenu = <TData extends MRT_RowData>({\n  handleEdit,\n  row,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: {\n      editDisplayMode,\n      enableEditing,\n      icons: { IconDots, IconEdit },\n      localization,\n      positionActionsColumn,\n      renderRowActionMenuItems,\n    },\n  } = table;\n\n  return (\n    <Menu\n      closeOnItemClick\n      position={\n        positionActionsColumn === 'first'\n          ? 'bottom-start'\n          : positionActionsColumn === 'last'\n            ? 'bottom-end'\n            : undefined\n      }\n      withinPortal\n    >\n      <Tooltip label={localization.rowActions} openDelay={1000} withinPortal>\n        <Menu.Target>\n          <ActionIcon\n            aria-label={localization.rowActions}\n            color=\"gray\"\n            onClick={(event) => event.stopPropagation()}\n            size=\"sm\"\n            variant=\"subtle\"\n            {...rest}\n          >\n            <IconDots />\n          </ActionIcon>\n        </Menu.Target>\n      </Tooltip>\n      <Menu.Dropdown onClick={(event) => event.stopPropagation()}>\n        {enableEditing && editDisplayMode !== 'table' && (\n          <Menu.Item leftSection={<IconEdit />} onClick={handleEdit}>\n            {localization.edit}\n          </Menu.Item>\n        )}\n        {renderRowActionMenuItems?.({\n          row,\n          table,\n        })}\n      </Menu.Dropdown>\n    </Menu>\n  );\n};\n", "import { type MouseEvent } from 'react';\nimport { ActionIcon, Tooltip } from '@mantine/core';\nimport { MRT_EditActionButtons } from './MRT_EditActionButtons';\nimport {\n  type MRT_Cell,\n  type MRT_CellValue,\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_RowActionMenu } from '../menus/MRT_RowActionMenu';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue> {\n  cell: MRT_Cell<TData, TValue>;\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToggleRowActionMenuButton = <TData extends MRT_RowData>({\n  cell,\n  row,\n  table,\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      createDisplayMode,\n      editDisplayMode,\n      enableEditing,\n      icons: { IconEdit },\n      localization: { edit },\n      renderRowActionMenuItems,\n      renderRowActions,\n    },\n    setEditingRow,\n  } = table;\n\n  const { creatingRow, editingRow } = getState();\n\n  const isCreating = creatingRow?.id === row.id;\n  const isEditing = editingRow?.id === row.id;\n\n  const handleStartEditMode = (event: MouseEvent) => {\n    event.stopPropagation();\n    setEditingRow({ ...row });\n  };\n\n  const showEditActionButtons =\n    (isCreating && createDisplayMode === 'row') ||\n    (isEditing && editDisplayMode === 'row');\n\n  return (\n    <>\n      {renderRowActions && !showEditActionButtons ? (\n        renderRowActions({ cell, row, table })\n      ) : showEditActionButtons ? (\n        <MRT_EditActionButtons row={row} table={table} />\n      ) : !renderRowActionMenuItems &&\n        parseFromValuesOrFunc(enableEditing, row) ? (\n        <Tooltip label={edit} openDelay={1000} position=\"right\" withinPortal>\n          <ActionIcon\n            aria-label={edit}\n            color=\"gray\"\n            disabled={!!editingRow && editingRow.id !== row.id}\n            onClick={handleStartEditMode}\n            size=\"md\"\n            variant=\"subtle\"\n          >\n            <IconEdit />\n          </ActionIcon>\n        </Tooltip>\n      ) : renderRowActionMenuItems ? (\n        <MRT_RowActionMenu\n          handleEdit={handleStartEditMode}\n          row={row}\n          table={table}\n        />\n      ) : null}\n    </>\n  );\n};\n", "import { MRT_ToggleRowActionMenuButton } from '../../components/buttons/MRT_ToggleRowActionMenuButton';\nimport {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nexport const getMRT_RowActionsColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  return {\n    Cell: ({ cell, row, table }) => (\n      <MRT_ToggleRowActionMenuButton cell={cell} row={row} table={table} />\n    ),\n    ...defaultDisplayColumnProps({\n      header: 'actions',\n      id: 'mrt-row-actions',\n      size: 70,\n      tableOptions,\n    }),\n  };\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_GrabHandleButton.module.css';\nimport { type DragEventHandler } from 'react';\nimport { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport {\n  type HTMLPropsRef,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> {\n  actionIconProps?: ActionIconProps & HTMLPropsRef<HTMLButtonElement>;\n  onDragEnd: DragEventHandler<HTMLButtonElement>;\n  onDragStart: DragEventHandler<HTMLButtonElement>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_GrabHandleButton = <TData extends MRT_RowData>({\n  actionIconProps,\n  onDragEnd,\n  onDragStart,\n  table: {\n    options: {\n      icons: { IconGripHorizontal },\n      localization: { move },\n    },\n  },\n}: Props<TData>) => {\n  return (\n    <Tooltip\n      label={actionIconProps?.title ?? move}\n      openDelay={1000}\n      withinPortal\n    >\n      <ActionIcon\n        aria-label={actionIconProps?.title ?? move}\n        draggable\n        {...actionIconProps}\n        className={clsx(\n          'mrt-grab-handle-button',\n          classes['grab-icon'],\n          actionIconProps?.className,\n        )}\n        color=\"gray\"\n        onClick={(e) => {\n          e.stopPropagation();\n          actionIconProps?.onClick?.(e);\n        }}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        title={undefined}\n        variant=\"transparent\"\n      >\n        <IconGripHorizontal />\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import { type DragEvent, type RefObject } from 'react';\nimport { type ActionIconProps } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_GrabHandleButton } from '../buttons/MRT_GrabHandleButton';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  row: MRT_Row<TData>;\n  rowRef: RefObject<HTMLTableRowElement>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableBodyRowGrabHandle = <TData extends MRT_RowData>({\n  row,\n  rowRef,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: { mantineRowDragHandleProps },\n  } = table;\n\n  const actionIconProps = {\n    ...parseFromValuesOrFunc(mantineRowDragHandleProps, {\n      row,\n      table,\n    }),\n    ...rest,\n  };\n\n  const handleDragStart = (event: DragEvent<HTMLButtonElement>) => {\n    actionIconProps?.onDragStart?.(event);\n    event.dataTransfer.setDragImage(rowRef.current as HTMLElement, 0, 0);\n    table.setDraggingRow(row as any);\n  };\n\n  const handleDragEnd = (event: DragEvent<HTMLButtonElement>) => {\n    actionIconProps?.onDragEnd?.(event);\n    table.setDraggingRow(null);\n    table.setHoveredRow(null);\n  };\n\n  return (\n    <MRT_GrabHandleButton\n      actionIconProps={actionIconProps}\n      onDragEnd={handleDragEnd}\n      onDragStart={handleDragStart}\n      table={table}\n    />\n  );\n};\n", "import { type RefObject } from 'react';\nimport { MRT_TableBodyRowGrabHandle } from '../../components/body/MRT_TableBodyRowGrabHandle';\nimport {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nexport const getMRT_RowDragColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  return {\n    Cell: ({ row, rowRef, table }) => (\n      <MRT_TableBodyRowGrabHandle\n        row={row}\n        rowRef={rowRef as RefObject<HTMLTableRowElement>}\n        table={table}\n      />\n    ),\n    grow: false,\n    ...defaultDisplayColumnProps({\n      header: 'move',\n      id: 'mrt-row-drag',\n      size: 60,\n      tableOptions,\n    }),\n  };\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ExpandAllButton.module.css';\nimport { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ExpandAllButton = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getCanSomeRowsExpand,\n    getIsAllRowsExpanded,\n    getIsSomeRowsExpanded,\n    getState,\n    options: {\n      icons: { IconChevronsDown },\n      localization,\n      mantineExpandAllButtonProps,\n      renderDetailPanel,\n    },\n    toggleAllRowsExpanded,\n  } = table;\n  const { density, isLoading } = getState();\n\n  const actionIconProps = {\n    ...parseFromValuesOrFunc(mantineExpandAllButtonProps, {\n      table,\n    }),\n    ...rest,\n  };\n\n  const isAllRowsExpanded = getIsAllRowsExpanded();\n\n  return (\n    <Tooltip\n      label={\n        actionIconProps?.title ?? isAllRowsExpanded\n          ? localization.collapseAll\n          : localization.expandAll\n      }\n      openDelay={1000}\n      withinPortal\n    >\n      <ActionIcon\n        aria-label={localization.expandAll}\n        color=\"gray\"\n        variant=\"subtle\"\n        {...actionIconProps}\n        className={clsx(\n          'mrt-expand-all-button',\n          classes.root,\n          actionIconProps?.className,\n          density,\n        )}\n        disabled={isLoading || (!renderDetailPanel && !getCanSomeRowsExpand())}\n        onClick={() => toggleAllRowsExpanded(!isAllRowsExpanded)}\n        title={undefined}\n      >\n        {actionIconProps?.children ?? (\n          <IconChevronsDown\n            className={clsx(\n              classes.chevron,\n              isAllRowsExpanded\n                ? classes.up\n                : getIsSomeRowsExpanded()\n                  ? classes.right\n                  : undefined,\n            )}\n          />\n        )}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ExpandButton.module.css';\nimport { type MouseEvent } from 'react';\nimport {\n  ActionIcon,\n  type ActionIconProps,\n  Tooltip,\n  useDirection,\n} from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ExpandButton = <TData extends MRT_RowData>({\n  row,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const direction = useDirection();\n  const {\n    options: {\n      icons: { IconChevronDown },\n      localization,\n      mantineExpandButtonProps,\n      positionExpandColumn,\n      renderDetailPanel,\n    },\n  } = table;\n\n  const actionIconProps = {\n    ...parseFromValuesOrFunc(mantineExpandButtonProps, {\n      row,\n      table,\n    }),\n    ...rest,\n  };\n  const canExpand = row.getCanExpand();\n  const isExpanded = row.getIsExpanded();\n\n  const DetailPanel = !!renderDetailPanel?.({ row, table });\n\n  const handleToggleExpand = (event: MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation();\n    row.toggleExpanded();\n    actionIconProps?.onClick?.(event);\n  };\n\n  const rtl = direction.dir === 'rtl' || positionExpandColumn === 'last';\n\n  return (\n    <Tooltip\n      disabled={!canExpand && !DetailPanel}\n      label={\n        actionIconProps?.title ?? isExpanded\n          ? localization.collapse\n          : localization.expand\n      }\n      openDelay={1000}\n      withinPortal\n    >\n      <ActionIcon\n        aria-label={localization.expand}\n        color=\"gray\"\n        disabled={!canExpand && !DetailPanel}\n        variant=\"subtle\"\n        {...actionIconProps}\n        __vars={{\n          '--mrt-row-depth': `${row.depth}`,\n        }}\n        className={clsx(\n          'mrt-expand-button',\n          classes.root,\n          classes[`root-${rtl ? 'rtl' : 'ltr'}`],\n          actionIconProps?.className,\n        )}\n        onClick={handleToggleExpand}\n        title={undefined}\n      >\n        {actionIconProps?.children ?? (\n          <IconChevronDown\n            className={clsx(\n              'mrt-expand-button-chevron',\n              classes.chevron,\n              !canExpand && !renderDetailPanel\n                ? classes.right\n                : isExpanded\n                  ? classes.up\n                  : undefined,\n            )}\n          />\n        )}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import { type ReactNode } from 'react';\nimport { Flex, Tooltip } from '@mantine/core';\nimport { MRT_ExpandAllButton } from '../../components/buttons/MRT_ExpandAllButton';\nimport { MRT_ExpandButton } from '../../components/buttons/MRT_ExpandButton';\nimport {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nexport const getMRT_RowExpandColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  const {\n    defaultColumn,\n    enableExpandAll,\n    groupedColumnMode,\n    positionExpandColumn,\n    renderDetailPanel,\n    state: { grouping },\n  } = tableOptions;\n\n  const alignProps =\n    positionExpandColumn === 'last'\n      ? ({\n          align: 'right',\n        } as const)\n      : undefined;\n\n  return {\n    Cell: ({ cell, column, row, table }) => {\n      const expandButtonProps = { row, table };\n      const subRowsLength = row.subRows?.length;\n      if (tableOptions.groupedColumnMode === 'remove' && row.groupingColumnId) {\n        return (\n          <Flex align=\"center\" gap=\"0.25rem\">\n            <MRT_ExpandButton {...expandButtonProps} />\n            <Tooltip\n              label={table.getColumn(row.groupingColumnId).columnDef.header}\n              openDelay={1000}\n              position=\"right\"\n            >\n              <span>{row.groupingValue as ReactNode}</span>\n            </Tooltip>\n            {!!subRowsLength && <span>({subRowsLength})</span>}\n          </Flex>\n        );\n      } else {\n        return (\n          <>\n            <MRT_ExpandButton {...expandButtonProps} />\n            {column.columnDef.GroupedCell?.({ cell, column, row, table })}\n          </>\n        );\n      }\n    },\n    Header: enableExpandAll\n      ? ({ table }) => {\n          return (\n            <Flex align=\"center\">\n              <MRT_ExpandAllButton table={table} />\n              {groupedColumnMode === 'remove' &&\n                grouping\n                  ?.map(\n                    (groupedColumnId) =>\n                      table.getColumn(groupedColumnId).columnDef.header,\n                  )\n                  ?.join(', ')}\n            </Flex>\n          );\n        }\n      : undefined,\n    mantineTableBodyCellProps: alignProps,\n    mantineTableHeadCellProps: alignProps,\n    ...defaultDisplayColumnProps({\n      header: 'expand',\n      id: 'mrt-row-expand',\n      size:\n        groupedColumnMode === 'remove'\n          ? defaultColumn?.size ?? 180\n          : renderDetailPanel\n            ? enableExpandAll\n              ? 60\n              : 70\n            : 100,\n      tableOptions,\n    }),\n  };\n};\n", "import {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nexport const getMRT_RowNumbersColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  const { localization, rowNumberDisplayMode } = tableOptions;\n  const {\n    pagination: { pageIndex, pageSize },\n  } = tableOptions.state;\n\n  return {\n    Cell: ({ renderedRowIndex = 0, row }) =>\n      ((rowNumberDisplayMode === 'static'\n        ? renderedRowIndex + pageSize * pageIndex\n        : row.index) ?? 0) + 1,\n    Header: () => localization.rowNumber,\n    grow: false,\n    ...defaultDisplayColumnProps({\n      header: 'rowNumbers',\n      id: 'mrt-row-numbers',\n      size: 50,\n      tableOptions,\n    }),\n  };\n};\n", "import { type MouseEvent, useState } from 'react';\nimport { type RowPinningPosition } from '@tanstack/react-table';\nimport { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  pinningPosition: RowPinningPosition;\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_RowPinButton = <TData extends MRT_RowData>({\n  pinningPosition,\n  row,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: {\n      icons: { IconPinned, IconX },\n      localization,\n      rowPinningDisplayMode,\n    },\n  } = table;\n\n  const isPinned = row.getIsPinned();\n\n  const [tooltipOpened, setTooltipOpened] = useState(false);\n\n  const handleTogglePin = (event: MouseEvent<HTMLButtonElement>) => {\n    setTooltipOpened(false);\n    event.stopPropagation();\n    row.pin(isPinned ? false : pinningPosition);\n  };\n\n  return (\n    <Tooltip\n      label={isPinned ? localization.unpin : localization.pin}\n      openDelay={1000}\n      opened={tooltipOpened}\n    >\n      <ActionIcon\n        aria-label={localization.pin}\n        color=\"gray\"\n        onClick={handleTogglePin}\n        onMouseEnter={() => setTooltipOpened(true)}\n        onMouseLeave={() => setTooltipOpened(false)}\n        size=\"xs\"\n        style={{\n          height: '24px',\n          width: '24px',\n        }}\n        variant=\"subtle\"\n        {...rest}\n      >\n        {isPinned ? (\n          <IconX />\n        ) : (\n          <IconPinned\n            fontSize=\"small\"\n            style={{\n              transform: `rotate(${\n                rowPinningDisplayMode === 'sticky'\n                  ? 135\n                  : pinningPosition === 'top'\n                    ? 180\n                    : 0\n              }deg)`,\n            }}\n          />\n        )}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import { type ActionIconProps, Box } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_RowPinButton } from '../buttons/MRT_RowPinButton';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  row: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableBodyRowPinButton = <TData extends MRT_RowData>({\n  row,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { enableRowPinning, rowPinningDisplayMode },\n  } = table;\n  const { density } = getState();\n\n  const canPin = parseFromValuesOrFunc(enableRowPinning, row as any);\n\n  if (!canPin) return null;\n\n  const rowPinButtonProps = {\n    row,\n    table,\n    ...rest,\n  };\n\n  if (rowPinningDisplayMode === 'top-and-bottom' && !row.getIsPinned()) {\n    return (\n      <Box\n        style={{\n          display: 'flex',\n          flexDirection: density === 'xs' ? 'row' : 'column',\n        }}\n      >\n        <MRT_RowPinButton pinningPosition=\"top\" {...rowPinButtonProps} />\n        <MRT_RowPinButton pinningPosition=\"bottom\" {...rowPinButtonProps} />\n      </Box>\n    );\n  }\n\n  return (\n    <MRT_RowPinButton\n      pinningPosition={rowPinningDisplayMode === 'bottom' ? 'bottom' : 'top'}\n      {...rowPinButtonProps}\n    />\n  );\n};\n", "import { MRT_TableBodyRowPinButton } from '../../components/body/MRT_TableBodyRowPinButton';\nimport {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nexport const getMRT_RowPinningColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  return {\n    Cell: ({ row, table }) => (\n      <MRT_TableBodyRowPinButton row={row} table={table} />\n    ),\n    grow: false,\n    ...defaultDisplayColumnProps({\n      header: 'pin',\n      id: 'mrt-row-pin',\n      size: 60,\n      tableOptions,\n    }),\n  };\n};\n", "import { type MouseEvent } from 'react';\nimport {\n  Checkbox,\n  type CheckboxProps,\n  Radio,\n  type RadioProps,\n  Switch,\n  type SwitchProps,\n  Tooltip,\n} from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport {\n  getIsRowSelected,\n  getMRT_RowSelectionHandler,\n  getMRT_SelectAllHandler,\n} from '../../utils/row.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends CheckboxProps {\n  renderedRowIndex?: number;\n  row?: MRT_Row<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_SelectCheckbox = <TData extends MRT_RowData>({\n  renderedRowIndex = 0,\n  row,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      enableMultiRowSelection,\n      localization,\n      mantineSelectAllCheckboxProps,\n      mantineSelectCheckboxProps,\n      selectAllMode,\n      selectDisplayMode,\n    },\n  } = table;\n  const { density, isLoading } = getState();\n\n  const selectAll = !row;\n\n  const allRowsSelected = selectAll\n    ? selectAllMode === 'page'\n      ? table.getIsAllPageRowsSelected()\n      : table.getIsAllRowsSelected()\n    : undefined;\n\n  const isChecked = selectAll\n    ? allRowsSelected\n    : getIsRowSelected({ row, table });\n\n  const checkboxProps = {\n    ...(selectAll\n      ? parseFromValuesOrFunc(mantineSelectAllCheckboxProps, { table })\n      : parseFromValuesOrFunc(mantineSelectCheckboxProps, {\n          row,\n          table,\n        })),\n    ...rest,\n  };\n\n  const onSelectionChange = row\n    ? getMRT_RowSelectionHandler({\n        renderedRowIndex,\n        row,\n        table,\n      })\n    : undefined;\n\n  const onSelectAllChange = getMRT_SelectAllHandler({ table });\n\n  const commonProps = {\n    'aria-label': selectAll\n      ? localization.toggleSelectAll\n      : localization.toggleSelectRow,\n    checked: isChecked,\n    disabled:\n      isLoading || (row && !row.getCanSelect()) || row?.id === 'mrt-row-create',\n    onChange: (event) => {\n      event.stopPropagation();\n      selectAll ? onSelectAllChange(event) : onSelectionChange!(event);\n    },\n    size: density === 'xs' ? 'sm' : 'md',\n    ...checkboxProps,\n    onClick: (e: MouseEvent<HTMLInputElement>) => {\n      e.stopPropagation();\n      checkboxProps?.onClick?.(e);\n    },\n    title: undefined,\n  } as CheckboxProps & RadioProps & SwitchProps;\n\n  return (\n    <Tooltip\n      label={\n        checkboxProps?.title ??\n        (selectAll\n          ? localization.toggleSelectAll\n          : localization.toggleSelectRow)\n      }\n      openDelay={1000}\n      withinPortal\n    >\n      <span>\n        {selectDisplayMode === 'switch' ? (\n          <Switch {...commonProps} />\n        ) : selectDisplayMode === 'radio' ||\n          enableMultiRowSelection === false ? (\n          <Radio {...commonProps} />\n        ) : (\n          <Checkbox\n            indeterminate={\n              !isChecked && selectAll\n                ? table.getIsSomeRowsSelected()\n                : row?.getIsSomeSelected() && row.getCanSelectSubRows()\n            }\n            {...commonProps}\n          />\n        )}\n      </span>\n    </Tooltip>\n  );\n};\n", "import { MRT_SelectCheckbox } from '../../components/inputs/MRT_SelectCheckbox';\nimport {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nexport const getMRT_RowSelectColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  const { enableMultiRowSelection, enableSelectAll } = tableOptions;\n\n  return {\n    Cell: ({ renderedRowIndex, row, table }) => (\n      <MRT_SelectCheckbox\n        renderedRowIndex={renderedRowIndex}\n        row={row}\n        table={table}\n      />\n    ),\n    Header:\n      enableSelectAll && enableMultiRowSelection\n        ? ({ table }) => <MRT_SelectCheckbox table={table} />\n        : undefined,\n    grow: false,\n    ...defaultDisplayColumnProps({\n      header: 'select',\n      id: 'mrt-row-select',\n      size: enableSelectAll ? 60 : 70,\n      tableOptions,\n    }),\n  };\n};\n", "import {\n  IconArrowAutofitContent,\n  IconArrowsSort,\n  IconBaselineDensityLarge,\n  IconBaselineDensityMedium,\n  IconBaselineDensitySmall,\n  IconBoxMultiple,\n  IconChevronDown,\n  IconChevronLeft,\n  IconChevronLeftPipe,\n  IconChevronRight,\n  IconChevronRightPipe,\n  IconChevronsDown,\n  IconCircleX,\n  IconClearAll,\n  IconColumns,\n  IconDeviceFloppy,\n  IconDots,\n  IconDotsVertical,\n  IconEdit,\n  IconEyeOff,\n  IconFilter,\n  IconFilterCog,\n  IconFilterOff,\n  IconGripHorizontal,\n  IconMaximize,\n  IconMinimize,\n  IconPinned,\n  IconPinnedOff,\n  IconSearch,\n  IconSearchOff,\n  IconSortAscending,\n  IconSortDescending,\n  IconX,\n} from '@tabler/icons-react';\n\nexport const MRT_Default_Icons = {\n  IconArrowAutofitContent,\n  IconArrowsSort,\n  IconBaselineDensityLarge,\n  IconBaselineDensityMedium,\n  IconBaselineDensitySmall,\n  IconBoxMultiple,\n  IconChevronDown,\n  IconChevronLeft,\n  IconChevronLeftPipe,\n  IconChevronRight,\n  IconChevronRightPipe,\n  IconChevronsDown,\n  IconCircleX,\n  IconClearAll,\n  IconColumns,\n  IconDeviceFloppy,\n  IconDots,\n  IconDotsVertical,\n  IconEdit,\n  IconEyeOff,\n  IconFilter,\n  IconFilterCog,\n  IconFilterOff,\n  IconGripHorizontal,\n  IconMaximize,\n  IconMinimize,\n  IconPinned,\n  IconPinnedOff,\n  IconSearch,\n  IconSearchOff,\n  IconSortAscending,\n  IconSortDescending,\n  IconX,\n} as const;\n\nexport type MRT_Icons = Record<keyof typeof MRT_Default_Icons, any>;\n", "import { type MRT_Localization } from '..';\n\nexport const MRT_Localization_EN: MRT_Localization = {\n  actions: 'Actions',\n  and: 'and',\n  cancel: 'Cancel',\n  changeFilterMode: 'Change filter mode',\n  changeSearchMode: 'Change search mode',\n  clearFilter: 'Clear filter',\n  clearSearch: 'Clear search',\n  clearSelection: 'Clear selection',\n  clearSort: 'Clear sort',\n  clickToCopy: 'Click to copy',\n  copy: 'Copy',\n  collapse: 'Collapse',\n  collapseAll: 'Collapse all',\n  columnActions: 'Column Actions',\n  copiedToClipboard: 'Copied to clipboard',\n  dropToGroupBy: 'Drop to group by {column}',\n  edit: 'Edit',\n  expand: 'Expand',\n  expandAll: 'Expand all',\n  filterArrIncludes: 'Includes',\n  filterArrIncludesAll: 'Includes all',\n  filterArrIncludesSome: 'Includes',\n  filterBetween: 'Between',\n  filterBetweenInclusive: 'Between Inclusive',\n  filterByColumn: 'Filter by {column}',\n  filterContains: 'Contains',\n  filterEmpty: 'Empty',\n  filterEndsWith: 'Ends With',\n  filterEquals: 'Equals',\n  filterEqualsString: 'Equals',\n  filterFuzzy: 'Fuzzy',\n  filterGreaterThan: 'Greater Than',\n  filterGreaterThanOrEqualTo: 'Greater Than Or Equal To',\n  filterInNumberRange: 'Between',\n  filterIncludesString: 'Contains',\n  filterIncludesStringSensitive: 'Contains',\n  filterLessThan: 'Less Than',\n  filterLessThanOrEqualTo: 'Less Than Or Equal To',\n  filterMode: 'Filter Mode: {filterType}',\n  filterNotEmpty: 'Not Empty',\n  filterNotEquals: 'Not Equals',\n  filterStartsWith: 'Starts With',\n  filterWeakEquals: 'Equals',\n  filteringByColumn: 'Filtering by {column} - {filterType} {filterValue}',\n  goToFirstPage: 'Go to first page',\n  goToLastPage: 'Go to last page',\n  goToNextPage: 'Go to next page',\n  goToPreviousPage: 'Go to previous page',\n  grab: 'Grab',\n  groupByColumn: 'Group by {column}',\n  groupedBy: 'Grouped by ',\n  hideAll: 'Hide all',\n  hideColumn: 'Hide {column} column',\n  max: 'Max',\n  min: 'Min',\n  move: 'Move',\n  noRecordsToDisplay: 'No records to display',\n  noResultsFound: 'No results found',\n  of: 'of',\n  or: 'or',\n  pin: 'Pin',\n  pinToLeft: 'Pin to left',\n  pinToRight: 'Pin to right',\n  resetColumnSize: 'Reset column size',\n  resetOrder: 'Reset order',\n  rowActions: 'Row Actions',\n  rowNumber: '#',\n  rowNumbers: 'Row Numbers',\n  rowsPerPage: 'Rows per page',\n  save: 'Save',\n  search: 'Search',\n  selectedCountOfRowCountRowsSelected:\n    '{selectedCount} of {rowCount} row(s) selected',\n  select: 'Select',\n  showAll: 'Show all',\n  showAllColumns: 'Show all columns',\n  showHideColumns: 'Show/Hide columns',\n  showHideFilters: 'Show/Hide filters',\n  showHideSearch: 'Show/Hide search',\n  sortByColumnAsc: 'Sort by {column} ascending',\n  sortByColumnDesc: 'Sort by {column} descending',\n  sortedByColumnAsc: 'Sorted by {column} ascending',\n  sortedByColumnDesc: 'Sorted by {column} descending',\n  thenBy: ', then by ',\n  toggleDensity: 'Toggle density',\n  toggleFullScreen: 'Toggle full screen',\n  toggleSelectAll: 'Toggle select all',\n  toggleSelectRow: 'Toggle select row',\n  toggleVisibility: 'Toggle visibility',\n  ungroupByColumn: 'Ungroup by {column}',\n  unpin: 'Unpin',\n  unpinAll: 'Unpin all',\n};\n", "import { useMemo } from 'react';\nimport {\n  getCoreRowModel,\n  getExpandedRowModel,\n  getFacetedMinMaxValues,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getGroupedRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n} from '@tanstack/react-table';\nimport { useDirection } from '@mantine/core';\nimport { MRT_AggregationFns } from '../fns/aggregationFns';\nimport { MRT_FilterFns } from '../fns/filterFns';\nimport { MRT_SortingFns } from '../fns/sortingFns';\nimport { MRT_Default_Icons } from '../icons';\nimport { MRT_Localization_EN } from '../locales/en';\nimport {\n  type MRT_DefinedTableOptions,\n  type MRT_RowData,\n  type MRT_TableOptions,\n} from '../types';\n\nexport const MRT_DefaultColumn = {\n  filterVariant: 'text',\n  maxSize: 1000,\n  minSize: 40,\n  size: 180,\n} as const;\n\nexport const MRT_DefaultDisplayColumn = {\n  columnDefType: 'display',\n  enableClickToCopy: false,\n  enableColumnActions: false,\n  enableColumnDragging: false,\n  enableColumnFilter: false,\n  enableColumnOrdering: false,\n  enableEditing: false,\n  enableGlobalFilter: false,\n  enableGrouping: false,\n  enableHiding: false,\n  enableResizing: false,\n  enableSorting: false,\n} as const;\n\nexport const useMRT_TableOptions: <TData extends MRT_RowData>(\n  tableOptions: MRT_TableOptions<TData>,\n) => MRT_DefinedTableOptions<TData> = <TData extends MRT_RowData>({\n  aggregationFns,\n  autoResetExpanded = false,\n  columnFilterDisplayMode = 'subheader',\n  columnResizeDirection,\n  columnResizeMode = 'onChange',\n  createDisplayMode = 'modal',\n  defaultColumn,\n  defaultDisplayColumn,\n  editDisplayMode = 'modal',\n  enableBatchRowSelection = true,\n  enableBottomToolbar = true,\n  enableColumnActions = true,\n  enableColumnFilters = true,\n  enableColumnOrdering = false,\n  enableColumnPinning = false,\n  enableColumnResizing = false,\n  enableColumnVirtualization,\n  enableDensityToggle = true,\n  enableExpandAll = true,\n  enableExpanding,\n  enableFacetedValues = false,\n  enableFilterMatchHighlighting = true,\n  enableFilters = true,\n  enableFullScreenToggle = true,\n  enableGlobalFilter = true,\n  enableGlobalFilterRankedResults = true,\n  enableGrouping = false,\n  enableHiding = true,\n  enableMultiRowSelection = true,\n  enableMultiSort = true,\n  enablePagination = true,\n  enableRowPinning = false,\n  enableRowSelection = false,\n  enableRowVirtualization,\n  enableSelectAll = true,\n  enableSorting = true,\n  enableStickyHeader = false,\n  enableTableFooter = true,\n  enableTableHead = true,\n  enableToolbarInternalActions = true,\n  enableTopToolbar = true,\n  filterFns,\n  icons,\n  layoutMode,\n  localization,\n  manualFiltering,\n  manualGrouping,\n  manualPagination,\n  manualSorting,\n  paginationDisplayMode = 'default',\n  positionActionsColumn = 'first',\n  positionCreatingRow = 'top',\n  positionExpandColumn = 'first',\n  positionGlobalFilter = 'right',\n  positionPagination = 'bottom',\n  positionToolbarAlertBanner = 'top',\n  positionToolbarDropZone = 'top',\n  rowNumberDisplayMode = 'static',\n  rowPinningDisplayMode = 'sticky',\n  selectAllMode = 'page',\n  sortingFns,\n  ...rest\n}: MRT_TableOptions<TData>) => {\n  const direction = useDirection();\n\n  icons = useMemo(() => ({ ...MRT_Default_Icons, ...icons }), [icons]);\n  localization = useMemo(\n    () => ({\n      ...MRT_Localization_EN,\n      ...localization,\n    }),\n    [localization],\n  );\n  aggregationFns = useMemo(\n    () => ({ ...MRT_AggregationFns, ...aggregationFns }),\n    [],\n  );\n  filterFns = useMemo(() => ({ ...MRT_FilterFns, ...filterFns }), []);\n  sortingFns = useMemo(() => ({ ...MRT_SortingFns, ...sortingFns }), []);\n  defaultColumn = useMemo(\n    () => ({ ...MRT_DefaultColumn, ...defaultColumn }),\n    [defaultColumn],\n  );\n  defaultDisplayColumn = useMemo(\n    () => ({\n      ...MRT_DefaultDisplayColumn,\n      ...defaultDisplayColumn,\n    }),\n    [defaultDisplayColumn],\n  );\n  //cannot be changed after initialization\n  [enableColumnVirtualization, enableRowVirtualization] = useMemo(\n    () => [enableColumnVirtualization, enableRowVirtualization],\n    [],\n  );\n\n  if (!columnResizeDirection) {\n    columnResizeDirection = direction.dir || 'ltr';\n  }\n\n  layoutMode =\n    layoutMode || (enableColumnResizing ? 'grid-no-grow' : 'semantic');\n  if (\n    layoutMode === 'semantic' &&\n    (enableRowVirtualization || enableColumnVirtualization)\n  ) {\n    layoutMode = 'grid';\n  }\n\n  if (enableRowVirtualization) {\n    enableStickyHeader = true;\n  }\n\n  if (enablePagination === false && manualPagination === undefined) {\n    manualPagination = true;\n  }\n\n  if (!rest.data?.length) {\n    manualFiltering = true;\n    manualGrouping = true;\n    manualPagination = true;\n    manualSorting = true;\n  }\n\n  return {\n    aggregationFns,\n    autoResetExpanded,\n    columnFilterDisplayMode,\n    columnResizeDirection,\n    columnResizeMode,\n    createDisplayMode,\n    defaultColumn,\n    defaultDisplayColumn,\n    editDisplayMode,\n    enableBatchRowSelection,\n    enableBottomToolbar,\n    enableColumnActions,\n    enableColumnFilters,\n    enableColumnOrdering,\n    enableColumnPinning,\n    enableColumnResizing,\n    enableColumnVirtualization,\n    enableDensityToggle,\n    enableExpandAll,\n    enableExpanding,\n    enableFacetedValues,\n    enableFilterMatchHighlighting,\n    enableFilters,\n    enableFullScreenToggle,\n    enableGlobalFilter,\n    enableGlobalFilterRankedResults,\n    enableGrouping,\n    enableHiding,\n    enableMultiRowSelection,\n    enableMultiSort,\n    enablePagination,\n    enableRowPinning,\n    enableRowSelection,\n    enableRowVirtualization,\n    enableSelectAll,\n    enableSorting,\n    enableStickyHeader,\n    enableTableFooter,\n    enableTableHead,\n    enableToolbarInternalActions,\n    enableTopToolbar,\n    filterFns,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel:\n      enableExpanding || enableGrouping ? getExpandedRowModel() : undefined,\n    getFacetedMinMaxValues: enableFacetedValues\n      ? getFacetedMinMaxValues()\n      : undefined,\n    getFacetedRowModel: enableFacetedValues ? getFacetedRowModel() : undefined,\n    getFacetedUniqueValues: enableFacetedValues\n      ? getFacetedUniqueValues()\n      : undefined,\n    getFilteredRowModel:\n      enableColumnFilters || enableGlobalFilter || enableFilters\n        ? getFilteredRowModel()\n        : undefined,\n    getGroupedRowModel: enableGrouping ? getGroupedRowModel() : undefined,\n    getPaginationRowModel: enablePagination\n      ? getPaginationRowModel()\n      : undefined,\n    getSortedRowModel: enableSorting ? getSortedRowModel() : undefined,\n    getSubRows: (row) => row?.subRows,\n    icons,\n    layoutMode,\n    localization,\n    manualFiltering,\n    manualGrouping,\n    manualPagination,\n    manualSorting,\n    paginationDisplayMode,\n    positionActionsColumn,\n    positionCreatingRow,\n    positionExpandColumn,\n    positionGlobalFilter,\n    positionPagination,\n    positionToolbarAlertBanner,\n    positionToolbarDropZone,\n    rowNumberDisplayMode,\n    rowPinningDisplayMode,\n    selectAllMode,\n    sortingFns,\n    ...rest,\n  } as MRT_DefinedTableOptions<TData>;\n};\n", "import { MRT_DefaultDisplayColumn } from '../useMRT_TableOptions';\nimport {\n  type MRT_ColumnDef,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n} from '../../types';\nimport { defaultDisplayColumnProps } from '../../utils/displayColumn.utils';\n\nconst blankColProps = {\n  children: null,\n  style: {\n    minWidth: 0,\n    padding: 0,\n    width: 0,\n  },\n};\n\nexport const getMRT_RowSpacerColumnDef = <TData extends MRT_RowData>(\n  tableOptions: MRT_StatefulTableOptions<TData>,\n): MRT_ColumnDef<TData> | null => {\n  return {\n    ...defaultDisplayColumnProps({\n      id: 'mrt-row-spacer',\n      size: 0,\n      tableOptions,\n    }),\n    grow: true,\n    ...MRT_DefaultDisplayColumn,\n    mantineTableBodyCellProps: blankColProps,\n    mantineTableFooterCellProps: blankColProps,\n    mantineTableHeadCellProps: blankColProps,\n  };\n};\n", "import { useEffect, useReducer, useRef } from 'react';\nimport {\n  type MRT_RowData,\n  type MRT_SortingState,\n  type MRT_TableInstance,\n} from '../types';\nimport { getDefaultColumnOrderIds } from '../utils/displayColumn.utils';\nimport { getCanRankRows } from '../utils/row.utils';\n\nexport const useMRT_Effects = <TData extends MRT_RowData>(\n  table: MRT_TableInstance<TData>,\n) => {\n  const {\n    getIsSomeRowsPinned,\n    getPrePaginationRowModel,\n    getState,\n    options: { enablePagination, enableRowPinning, rowCount },\n  } = table;\n  const {\n    columnOrder,\n    density,\n    globalFilter,\n    isFullScreen,\n    isLoading,\n    pagination,\n    showSkeletons,\n    sorting,\n  } = getState();\n\n  const totalColumnCount = table.options.columns.length;\n  const totalRowCount = rowCount ?? getPrePaginationRowModel().rows.length;\n\n  const rerender = useReducer(() => ({}), {})[1];\n  const initialBodyHeight = useRef<string>();\n  const previousTop = useRef<number>();\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      initialBodyHeight.current = document.body.style.height;\n    }\n  }, []);\n\n  //hide scrollbars when table is in full screen mode, preserve body scroll position after full screen exit\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      if (isFullScreen) {\n        previousTop.current = document.body.getBoundingClientRect().top; //save scroll position\n        document.body.style.height = '100dvh'; //hide page scrollbars when table is in full screen mode\n      } else {\n        document.body.style.height = initialBodyHeight.current as string;\n        if (!previousTop.current) return;\n        //restore scroll position\n        window.scrollTo({\n          behavior: 'instant',\n          top: -1 * (previousTop.current as number),\n        });\n      }\n    }\n  }, [isFullScreen]);\n\n  //recalculate column order when columns change or features are toggled on/off\n  useEffect(() => {\n    if (totalColumnCount !== columnOrder.length) {\n      table.setColumnOrder(getDefaultColumnOrderIds(table.options));\n    }\n  }, [totalColumnCount]);\n\n  //if page index is out of bounds, set it to the last page\n  useEffect(() => {\n    if (!enablePagination || isLoading || showSkeletons) return;\n    const { pageIndex, pageSize } = pagination;\n    const firstVisibleRowIndex = pageIndex * pageSize;\n    if (firstVisibleRowIndex >= totalRowCount) {\n      table.setPageIndex(Math.ceil(totalRowCount / pageSize) - 1);\n    }\n  }, [totalRowCount]);\n\n  //turn off sort when global filter is looking for ranked results\n  const appliedSort = useRef<MRT_SortingState>(sorting);\n  useEffect(() => {\n    if (sorting.length) {\n      appliedSort.current = sorting;\n    }\n  }, [sorting]);\n\n  useEffect(() => {\n    if (!getCanRankRows(table)) return;\n    if (globalFilter) {\n      table.setSorting([]);\n    } else {\n      table.setSorting(() => appliedSort.current || []);\n    }\n  }, [globalFilter]);\n\n  //fix pinned row top style when density changes\n  useEffect(() => {\n    if (enableRowPinning && getIsSomeRowsPinned()) {\n      setTimeout(() => {\n        rerender();\n      }, 150);\n    }\n  }, [density]);\n};\n", "import { useMemo, useRef, useState } from 'react';\nimport { useReactTable } from '@tanstack/react-table';\nimport {\n  type MRT_Cell,\n  type MRT_Column,\n  type MRT_ColumnDef,\n  type MRT_ColumnFilterFnsState,\n  type MRT_ColumnOrderState,\n  type MRT_ColumnSizingInfoState,\n  type MRT_DefinedTableOptions,\n  type MRT_DensityState,\n  type MRT_FilterOption,\n  type MRT_GroupingState,\n  type MRT_PaginationState,\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_StatefulTableOptions,\n  type MRT_TableInstance,\n  type MRT_TableState,\n  type MRT_Updater,\n} from '../types';\nimport {\n  getAllLeafColumnDefs,\n  getColumnId,\n  getDefaultColumnFilterFn,\n  prepareColumns,\n} from '../utils/column.utils';\nimport {\n  getDefaultColumnOrderIds,\n  showRowActionsColumn,\n  showRowDragColumn,\n  showRowExpandColumn,\n  showRowNumbersColumn,\n  showRowPinningColumn,\n  showRowSelectionColumn,\n  showRowSpacerColumn,\n} from '../utils/displayColumn.utils';\nimport { createRow } from '../utils/tanstack.helpers';\nimport { getMRT_RowActionsColumnDef } from './display-columns/getMRT_RowActionsColumnDef';\nimport { getMRT_RowDragColumnDef } from './display-columns/getMRT_RowDragColumnDef';\nimport { getMRT_RowExpandColumnDef } from './display-columns/getMRT_RowExpandColumnDef';\nimport { getMRT_RowNumbersColumnDef } from './display-columns/getMRT_RowNumbersColumnDef';\nimport { getMRT_RowPinningColumnDef } from './display-columns/getMRT_RowPinningColumnDef';\nimport { getMRT_RowSelectColumnDef } from './display-columns/getMRT_RowSelectColumnDef';\nimport { getMRT_RowSpacerColumnDef } from './display-columns/getMRT_RowSpacerColumnDef';\nimport { useMRT_Effects } from './useMRT_Effects';\n\n/**\n * The MRT hook that wraps the TanStack useReactTable hook and adds additional functionality\n * @param definedTableOptions - table options with proper defaults set\n * @returns the MRT table instance\n */\nexport const useMRT_TableInstance = <TData extends MRT_RowData>(\n  definedTableOptions: MRT_DefinedTableOptions<TData>,\n): MRT_TableInstance<TData> => {\n  const lastSelectedRowId = useRef<null | string>(null);\n  const bottomToolbarRef = useRef<HTMLDivElement>(null);\n  const editInputRefs = useRef<Record<string, HTMLInputElement>>({});\n  const filterInputRefs = useRef<Record<string, HTMLInputElement>>({});\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const tableContainerRef = useRef<HTMLDivElement>(null);\n  const tableHeadCellRefs = useRef<Record<string, HTMLTableCellElement>>({});\n  const tablePaperRef = useRef<HTMLDivElement>(null);\n  const topToolbarRef = useRef<HTMLDivElement>(null);\n  const tableHeadRef = useRef<HTMLTableSectionElement>(null);\n  const tableFooterRef = useRef<HTMLTableSectionElement>(null);\n\n  //transform initial state with proper column order\n  const initialState: Partial<MRT_TableState<TData>> = useMemo(() => {\n    const initState = definedTableOptions.initialState ?? {};\n    initState.columnOrder =\n      initState.columnOrder ??\n      getDefaultColumnOrderIds({\n        ...definedTableOptions,\n        state: {\n          ...definedTableOptions.initialState,\n          ...definedTableOptions.state,\n        },\n      } as MRT_StatefulTableOptions<TData>);\n    initState.globalFilterFn = definedTableOptions.globalFilterFn ?? 'fuzzy';\n    return initState;\n  }, []);\n\n  definedTableOptions.initialState = initialState;\n\n  const [creatingRow, _setCreatingRow] = useState<MRT_Row<TData> | null>(\n    initialState.creatingRow ?? null,\n  );\n  const [columnFilterFns, setColumnFilterFns] =\n    useState<MRT_ColumnFilterFnsState>(() =>\n      Object.assign(\n        {},\n        ...getAllLeafColumnDefs(\n          definedTableOptions.columns as MRT_ColumnDef<TData>[],\n        ).map((col) => ({\n          [getColumnId(col)]:\n            col.filterFn instanceof Function\n              ? col.filterFn.name ?? 'custom'\n              : col.filterFn ??\n                initialState?.columnFilterFns?.[getColumnId(col)] ??\n                getDefaultColumnFilterFn(col),\n        })),\n      ),\n    );\n  const [columnOrder, onColumnOrderChange] = useState<MRT_ColumnOrderState>(\n    initialState.columnOrder ?? [],\n  );\n  const [columnSizingInfo, onColumnSizingInfoChange] =\n    useState<MRT_ColumnSizingInfoState>(\n      initialState.columnSizingInfo ?? ({} as MRT_ColumnSizingInfoState),\n    );\n  const [density, setDensity] = useState<MRT_DensityState>(\n    initialState?.density ?? 'md',\n  );\n  const [draggingColumn, setDraggingColumn] =\n    useState<MRT_Column<TData> | null>(initialState.draggingColumn ?? null);\n  const [draggingRow, setDraggingRow] = useState<MRT_Row<TData> | null>(\n    initialState.draggingRow ?? null,\n  );\n  const [editingCell, setEditingCell] = useState<MRT_Cell<TData> | null>(\n    initialState.editingCell ?? null,\n  );\n  const [editingRow, setEditingRow] = useState<MRT_Row<TData> | null>(\n    initialState.editingRow ?? null,\n  );\n  const [globalFilterFn, setGlobalFilterFn] = useState<MRT_FilterOption>(\n    initialState.globalFilterFn ?? 'fuzzy',\n  );\n  const [grouping, onGroupingChange] = useState<MRT_GroupingState>(\n    initialState.grouping ?? [],\n  );\n  const [hoveredColumn, setHoveredColumn] = useState<Partial<\n    MRT_Column<TData>\n  > | null>(initialState.hoveredColumn ?? null);\n  const [hoveredRow, setHoveredRow] = useState<Partial<MRT_Row<TData>> | null>(\n    initialState.hoveredRow ?? null,\n  );\n  const [isFullScreen, setIsFullScreen] = useState<boolean>(\n    initialState?.isFullScreen ?? false,\n  );\n  const [pagination, onPaginationChange] = useState<MRT_PaginationState>(\n    initialState?.pagination ?? { pageIndex: 0, pageSize: 10 },\n  );\n  const [showAlertBanner, setShowAlertBanner] = useState<boolean>(\n    initialState?.showAlertBanner ?? false,\n  );\n  const [showColumnFilters, setShowColumnFilters] = useState<boolean>(\n    initialState?.showColumnFilters ?? false,\n  );\n  const [showGlobalFilter, setShowGlobalFilter] = useState<boolean>(\n    initialState?.showGlobalFilter ?? false,\n  );\n  const [showToolbarDropZone, setShowToolbarDropZone] = useState<boolean>(\n    initialState?.showToolbarDropZone ?? false,\n  );\n\n  definedTableOptions.state = {\n    columnFilterFns,\n    columnOrder,\n    columnSizingInfo,\n    creatingRow,\n    density,\n    draggingColumn,\n    draggingRow,\n    editingCell,\n    editingRow,\n    globalFilterFn,\n    grouping,\n    hoveredColumn,\n    hoveredRow,\n    isFullScreen,\n    pagination,\n    showAlertBanner,\n    showColumnFilters,\n    showGlobalFilter,\n    showToolbarDropZone,\n    ...definedTableOptions.state,\n  };\n\n  //The table options now include all state needed to help determine column visibility and order logic\n  const statefulTableOptions =\n    definedTableOptions as MRT_StatefulTableOptions<TData>;\n\n  //don't recompute columnDefs while resizing column or dragging column/row\n  const columnDefsRef = useRef<MRT_ColumnDef<TData>[]>([]);\n  statefulTableOptions.columns =\n    statefulTableOptions.state.columnSizingInfo.isResizingColumn ||\n    statefulTableOptions.state.draggingColumn ||\n    statefulTableOptions.state.draggingRow\n      ? columnDefsRef.current\n      : prepareColumns({\n          columnDefs: [\n            ...([\n              showRowPinningColumn(statefulTableOptions) &&\n                getMRT_RowPinningColumnDef(statefulTableOptions),\n              showRowDragColumn(statefulTableOptions) &&\n                getMRT_RowDragColumnDef(statefulTableOptions),\n              showRowActionsColumn(statefulTableOptions) &&\n                getMRT_RowActionsColumnDef(statefulTableOptions),\n              showRowExpandColumn(statefulTableOptions) &&\n                getMRT_RowExpandColumnDef(statefulTableOptions),\n              showRowSelectionColumn(statefulTableOptions) &&\n                getMRT_RowSelectColumnDef(statefulTableOptions),\n              showRowNumbersColumn(statefulTableOptions) &&\n                getMRT_RowNumbersColumnDef(statefulTableOptions),\n            ].filter(Boolean) as MRT_ColumnDef<TData>[]),\n            ...statefulTableOptions.columns,\n            ...([\n              showRowSpacerColumn(statefulTableOptions) &&\n                getMRT_RowSpacerColumnDef(statefulTableOptions),\n            ].filter(Boolean) as MRT_ColumnDef<TData>[]),\n          ],\n          tableOptions: statefulTableOptions,\n        });\n  columnDefsRef.current = statefulTableOptions.columns;\n\n  //if loading, generate blank rows to show skeleton loaders\n  statefulTableOptions.data = useMemo(\n    () =>\n      (statefulTableOptions.state.isLoading ||\n        statefulTableOptions.state.showSkeletons) &&\n      !statefulTableOptions.data.length\n        ? [\n            ...Array(\n              Math.min(statefulTableOptions.state.pagination.pageSize, 20),\n            ).fill(null),\n          ].map(() =>\n            Object.assign(\n              {},\n              ...getAllLeafColumnDefs(statefulTableOptions.columns).map(\n                (col) => ({\n                  [getColumnId(col)]: null,\n                }),\n              ),\n            ),\n          )\n        : statefulTableOptions.data,\n    [\n      statefulTableOptions.data,\n      statefulTableOptions.state.isLoading,\n      statefulTableOptions.state.showSkeletons,\n    ],\n  );\n\n  //@ts-ignore\n  const table = useReactTable({\n    onColumnOrderChange,\n    onColumnSizingInfoChange,\n    onGroupingChange,\n    onPaginationChange,\n    ...statefulTableOptions,\n    globalFilterFn: statefulTableOptions.filterFns?.[globalFilterFn ?? 'fuzzy'],\n  }) as MRT_TableInstance<TData>;\n\n  table.refs = {\n    bottomToolbarRef,\n    editInputRefs,\n    filterInputRefs,\n    lastSelectedRowId,\n    searchInputRef,\n    tableContainerRef,\n    tableFooterRef,\n    tableHeadCellRefs,\n    tableHeadRef,\n    tablePaperRef,\n    topToolbarRef,\n  };\n\n  table.setCreatingRow = (row: MRT_Updater<MRT_Row<TData> | null | true>) => {\n    let _row = row;\n    if (row === true) {\n      _row = createRow(table);\n    }\n    statefulTableOptions?.onCreatingRowChange?.(\n      _row as MRT_Row<TData> | null,\n    ) ?? _setCreatingRow(_row as MRT_Row<TData> | null);\n  };\n  table.setColumnFilterFns =\n    statefulTableOptions.onColumnFilterFnsChange ?? setColumnFilterFns;\n  table.setDensity = statefulTableOptions.onDensityChange ?? setDensity;\n  table.setDraggingColumn =\n    statefulTableOptions.onDraggingColumnChange ?? setDraggingColumn;\n  table.setDraggingRow =\n    statefulTableOptions.onDraggingRowChange ?? setDraggingRow;\n  table.setEditingCell =\n    statefulTableOptions.onEditingCellChange ?? setEditingCell;\n  table.setEditingRow =\n    statefulTableOptions.onEditingRowChange ?? setEditingRow;\n  table.setGlobalFilterFn =\n    statefulTableOptions.onGlobalFilterFnChange ?? setGlobalFilterFn;\n  table.setHoveredColumn =\n    statefulTableOptions.onHoveredColumnChange ?? setHoveredColumn;\n  table.setHoveredRow =\n    statefulTableOptions.onHoveredRowChange ?? setHoveredRow;\n  table.setIsFullScreen =\n    statefulTableOptions.onIsFullScreenChange ?? setIsFullScreen;\n  table.setShowAlertBanner =\n    statefulTableOptions.onShowAlertBannerChange ?? setShowAlertBanner;\n  table.setShowColumnFilters =\n    statefulTableOptions.onShowColumnFiltersChange ?? setShowColumnFilters;\n  table.setShowGlobalFilter =\n    statefulTableOptions.onShowGlobalFilterChange ?? setShowGlobalFilter;\n  table.setShowToolbarDropZone =\n    statefulTableOptions.onShowToolbarDropZoneChange ?? setShowToolbarDropZone;\n\n  useMRT_Effects(table);\n\n  return table;\n};\n", "import {\n  type MRT_RowData,\n  type MRT_TableInstance,\n  type MRT_TableOptions,\n} from '../types';\nimport { useMRT_TableInstance } from './useMRT_TableInstance';\nimport { useMRT_TableOptions } from './useMRT_TableOptions';\n\nexport const useMantineReactTable = <TData extends MRT_RowData>(\n  tableOptions: MRT_TableOptions<TData>,\n): MRT_TableInstance<TData> =>\n  useMRT_TableInstance(useMRT_TableOptions(tableOptions));\n", "import { type Range, defaultRangeExtractor } from '@tanstack/react-virtual';\n\nexport const extraIndexRangeExtractor = (\n  range: Range,\n  draggingIndex?: number,\n) => {\n  const newIndexes = defaultRangeExtractor(range);\n  if (draggingIndex === undefined) return newIndexes;\n  if (\n    draggingIndex >= 0 &&\n    draggingIndex < Math.max(range.startIndex - range.overscan, 0)\n  ) {\n    newIndexes.unshift(draggingIndex);\n  }\n  if (draggingIndex >= 0 && draggingIndex > range.endIndex + range.overscan) {\n    newIndexes.push(draggingIndex);\n  }\n  return newIndexes;\n};\n", "import { useCallback, useMemo } from 'react';\nimport { type Range, useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../types';\nimport { parseFromValuesOrFunc } from '../utils/utils';\nimport { extraIndexRangeExtractor } from '../utils/virtualization.utils';\n\nexport const useMRT_ColumnVirtualizer = <\n  TData extends MRT_RowData,\n  TScrollElement extends Element | Window = HTMLDivElement,\n  TItemElement extends Element = HTMLTableCellElement,\n>(\n  table: MRT_TableInstance<TData>,\n): MRT_ColumnVirtualizer | undefined => {\n  const {\n    getLeftLeafColumns,\n    getRightLeafColumns,\n    getState,\n    getVisibleLeafColumns,\n    options: {\n      columnVirtualizerInstanceRef,\n      columnVirtualizerOptions,\n      enableColumnPinning,\n      enableColumnVirtualization,\n    },\n    refs: { tableContainerRef },\n  } = table;\n  const { columnPinning, draggingColumn } = getState();\n\n  if (!enableColumnVirtualization) return undefined;\n\n  const columnVirtualizerProps = parseFromValuesOrFunc(\n    columnVirtualizerOptions,\n    {\n      table,\n    },\n  );\n\n  const visibleColumns = getVisibleLeafColumns();\n\n  const [leftPinnedIndexes, rightPinnedIndexes] = useMemo(\n    () =>\n      enableColumnPinning\n        ? [\n            getLeftLeafColumns().map((c) => c.getPinnedIndex()),\n            getRightLeafColumns()\n              .map(\n                (column) => visibleColumns.length - column.getPinnedIndex() - 1,\n              )\n              .sort((a, b) => a - b),\n          ]\n        : [[], []],\n    [columnPinning, enableColumnPinning],\n  );\n\n  const numPinnedLeft = leftPinnedIndexes.length;\n  const numPinnedRight = rightPinnedIndexes.length;\n\n  const draggingColumnIndex = useMemo(\n    () =>\n      draggingColumn?.id\n        ? visibleColumns.findIndex((c) => c.id === draggingColumn?.id)\n        : undefined,\n    [draggingColumn?.id],\n  );\n\n  const columnVirtualizer = useVirtualizer({\n    count: visibleColumns.length,\n    estimateSize: (index) => visibleColumns[index].getSize(),\n    getScrollElement: () => tableContainerRef.current,\n    horizontal: true,\n    overscan: 3,\n    rangeExtractor: useCallback(\n      (range: Range) => {\n        const newIndexes = extraIndexRangeExtractor(range, draggingColumnIndex);\n        if (!numPinnedLeft && !numPinnedRight) {\n          return newIndexes;\n        }\n        return [\n          ...new Set([\n            ...leftPinnedIndexes,\n            ...newIndexes,\n            ...rightPinnedIndexes,\n          ]),\n        ];\n      },\n      [leftPinnedIndexes, rightPinnedIndexes, draggingColumnIndex],\n    ),\n    ...columnVirtualizerProps,\n  }) as unknown as MRT_ColumnVirtualizer<TScrollElement, TItemElement>;\n\n  const virtualColumns = columnVirtualizer.getVirtualItems();\n  columnVirtualizer.virtualColumns = virtualColumns;\n  const numColumns = virtualColumns.length;\n\n  if (numColumns) {\n    const totalSize = columnVirtualizer.getTotalSize();\n\n    const leftNonPinnedStart = virtualColumns[numPinnedLeft]?.start || 0;\n    const leftNonPinnedEnd =\n      virtualColumns[leftPinnedIndexes.length - 1]?.end || 0;\n\n    const rightNonPinnedStart =\n      virtualColumns[numColumns - numPinnedRight]?.start || 0;\n    const rightNonPinnedEnd =\n      virtualColumns[numColumns - numPinnedRight - 1]?.end || 0;\n\n    columnVirtualizer.virtualPaddingLeft =\n      leftNonPinnedStart - leftNonPinnedEnd;\n\n    columnVirtualizer.virtualPaddingRight =\n      totalSize -\n      rightNonPinnedEnd -\n      (numPinnedRight ? totalSize - rightNonPinnedStart : 0);\n  }\n\n  if (columnVirtualizerInstanceRef) {\n    //@ts-ignore\n    columnVirtualizerInstanceRef.current = columnVirtualizer;\n  }\n\n  return columnVirtualizer as any;\n};\n", "import { useCallback } from 'react';\nimport { type Range, useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_RowVirtualizer,\n  type MRT_TableInstance,\n} from '../types';\nimport { parseFromValuesOrFunc } from '../utils/utils';\nimport { extraIndexRangeExtractor } from '../utils/virtualization.utils';\n\nexport const useMRT_RowVirtualizer = <\n  TData extends MRT_RowData,\n  TScrollElement extends Element | Window = HTMLDivElement,\n  TItemElement extends Element = HTMLTableRowElement,\n>(\n  table: MRT_TableInstance<TData>,\n  rows?: MRT_Row<TData>[],\n): MRT_RowVirtualizer<TScrollElement, TItemElement> | undefined => {\n  const {\n    getRowModel,\n    getState,\n    options: {\n      enableRowVirtualization,\n      renderDetailPanel,\n      rowVirtualizerInstanceRef,\n      rowVirtualizerOptions,\n    },\n    refs: { tableContainerRef },\n  } = table;\n  const { density, draggingRow, expanded } = getState();\n\n  if (!enableRowVirtualization) return undefined;\n\n  const rowVirtualizerProps = parseFromValuesOrFunc(rowVirtualizerOptions, {\n    table,\n  });\n\n  const rowCount = rows?.length ?? getRowModel().rows.length;\n\n  const normalRowHeight =\n    density === 'xs' ? 42.7 : density === 'md' ? 54.7 : 70.7;\n\n  const rowVirtualizer = useVirtualizer({\n    count: renderDetailPanel ? rowCount * 2 : rowCount,\n    estimateSize: (index) =>\n      renderDetailPanel && index % 2 === 1\n        ? expanded === true\n          ? 100\n          : 0\n        : normalRowHeight,\n    getScrollElement: () => tableContainerRef.current,\n    measureElement:\n      typeof window !== 'undefined' &&\n      navigator.userAgent.indexOf('Firefox') === -1\n        ? (element) => element?.getBoundingClientRect().height\n        : undefined,\n    overscan: 4,\n    rangeExtractor: useCallback(\n      (range: Range) => {\n        return extraIndexRangeExtractor(range, draggingRow?.index ?? 0);\n      },\n      [draggingRow],\n    ),\n    ...rowVirtualizerProps,\n  }) as unknown as MRT_RowVirtualizer<TScrollElement, TItemElement>;\n\n  rowVirtualizer.virtualRows = rowVirtualizer.getVirtualItems();\n\n  if (rowVirtualizerInstanceRef) {\n    //@ts-ignore\n    rowVirtualizerInstanceRef.current = rowVirtualizer;\n  }\n\n  return rowVirtualizer;\n};\n", "import { useMemo } from 'react';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../types';\nimport { getMRT_Rows } from '../utils/row.utils';\n\nexport const useMRT_Rows = <TData extends MRT_RowData>(\n  table: MRT_TableInstance<TData>,\n): MRT_Row<TData>[] => {\n  const {\n    getRowModel,\n    getState,\n    options: { data, enableGlobalFilterRankedResults, positionCreatingRow },\n  } = table;\n  const {\n    creatingRow,\n    expanded,\n    globalFilter,\n    pagination,\n    rowPinning,\n    sorting,\n  } = getState();\n\n  const rows = useMemo(\n    () => getMRT_Rows(table),\n    [\n      creatingRow,\n      data,\n      enableGlobalFilterRankedResults,\n      expanded,\n      getRowModel().rows,\n      globalFilter,\n      pagination.pageIndex,\n      pagination.pageSize,\n      positionCreatingRow,\n      rowPinning,\n      sorting,\n    ],\n  );\n\n  return rows;\n};\n", "import { Highlight, type HighlightProps } from '@mantine/core';\nimport {\n  type MRT_Cell,\n  type MRT_CellValue,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\nconst allowedTypes = ['string', 'number'];\nconst allowedFilterVariants = ['text', 'autocomplete'];\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue> {\n  cell: MRT_Cell<TData, TValue>;\n  renderedColumnIndex?: number;\n  renderedRowIndex?: number;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableBodyCellValue = <TData extends MRT_RowData>({\n  cell,\n  renderedColumnIndex = 0,\n  renderedRowIndex = 0,\n  table,\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { enableFilterMatchHighlighting, mantineHighlightProps },\n  } = table;\n  const { column, row } = cell;\n  const { columnDef } = column;\n  const { globalFilter, globalFilterFn } = getState();\n  const filterValue = column.getFilterValue();\n\n  const highlightProps = parseFromValuesOrFunc(mantineHighlightProps, {\n    cell,\n    column,\n    row,\n    table,\n  }) as Partial<HighlightProps>;\n\n  let renderedCellValue =\n    cell.getIsAggregated() && columnDef.AggregatedCell\n      ? columnDef.AggregatedCell({\n          cell,\n          column,\n          row,\n          table,\n        })\n      : row.getIsGrouped() && !cell.getIsGrouped()\n        ? null\n        : cell.getIsGrouped() && columnDef.GroupedCell\n          ? columnDef.GroupedCell({\n              cell,\n              column,\n              row,\n              table,\n            })\n          : undefined;\n\n  const isGroupedValue = renderedCellValue !== undefined;\n\n  if (!isGroupedValue) {\n    renderedCellValue = cell.renderValue() as number | string;\n  }\n\n  if (\n    enableFilterMatchHighlighting &&\n    columnDef.enableFilterMatchHighlighting !== false &&\n    renderedCellValue &&\n    allowedTypes.includes(typeof renderedCellValue) &&\n    ((filterValue &&\n      allowedTypes.includes(typeof filterValue) &&\n      allowedFilterVariants.includes(columnDef.filterVariant as string)) ||\n      (globalFilter &&\n        allowedTypes.includes(typeof globalFilter) &&\n        column.getCanGlobalFilter()))\n  ) {\n    let highlight: string | string[] = (\n      column.getFilterValue() ??\n      globalFilter ??\n      ''\n    ).toString() as string;\n    if ((filterValue ? columnDef._filterFn : globalFilterFn) === 'fuzzy') {\n      highlight = highlight.split(' ');\n    }\n\n    renderedCellValue = (\n      <Highlight color=\"yellow.3\" highlight={highlight} {...highlightProps}>\n        {renderedCellValue?.toString()}\n      </Highlight>\n    );\n  }\n\n  if (columnDef.Cell && !isGroupedValue) {\n    renderedCellValue = columnDef.Cell({\n      cell,\n      column,\n      renderedCellValue,\n      renderedColumnIndex,\n      renderedRowIndex,\n      row,\n      table,\n    });\n  }\n\n  return renderedCellValue;\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_CopyButton.module.css';\nimport { type ReactNode } from 'react';\nimport {\n  CopyButton,\n  Tooltip,\n  UnstyledButton,\n  type UnstyledButtonProps,\n} from '@mantine/core';\nimport {\n  type MRT_Cell,\n  type MRT_CellValue,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue>\n  extends UnstyledButtonProps {\n  cell: MRT_Cell<TData, TValue>;\n  children: ReactNode;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_CopyButton = <TData extends MRT_RowData>({\n  cell,\n  children,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: {\n      localization: { clickToCopy, copiedToClipboard },\n      mantineCopyButtonProps,\n    },\n  } = table;\n  const { column, row } = cell;\n  const { columnDef } = column;\n\n  const arg = { cell, column, row, table };\n  const buttonProps = {\n    ...parseFromValuesOrFunc(mantineCopyButtonProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineCopyButtonProps, arg),\n    ...rest,\n  };\n\n  return (\n    <CopyButton value={cell.getValue<string>()}>\n      {({ copied, copy }) => (\n        <Tooltip\n          color={copied ? 'green' : undefined}\n          label={\n            buttonProps?.title ?? (copied ? copiedToClipboard : clickToCopy)\n          }\n          openDelay={1000}\n          withinPortal\n        >\n          <UnstyledButton\n            {...buttonProps}\n            className={clsx(\n              'mrt-copy-button',\n              classes.root,\n              buttonProps?.className,\n            )}\n            onClick={(e) => {\n              e.stopPropagation();\n              copy();\n            }}\n            role=\"presentation\"\n            title={undefined}\n          >\n            {children}\n          </UnstyledButton>\n        </Tooltip>\n      )}\n    </CopyButton>\n  );\n};\n", "import { type FocusEvent, type KeyboardEvent, useState } from 'react';\nimport { Select, TextInput, type TextInputProps } from '@mantine/core';\nimport {\n  type MRT_Cell,\n  type MRT_CellValue,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue>\n  extends TextInputProps {\n  cell: MRT_Cell<TData, TValue>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_EditCellTextInput = <TData extends MRT_RowData>({\n  cell,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      createDisplayMode,\n      editDisplayMode,\n      mantineEditSelectProps,\n      mantineEditTextInputProps,\n    },\n    refs: { editInputRefs },\n    setCreatingRow,\n    setEditingCell,\n    setEditingRow,\n  } = table;\n  const { column, row } = cell;\n  const { columnDef } = column;\n  const { creatingRow, editingRow } = getState();\n\n  const isCreating = creatingRow?.id === row.id;\n  const isEditing = editingRow?.id === row.id;\n  const isSelectEdit = columnDef.editVariant === 'select';\n\n  const [value, setValue] = useState(() => cell.getValue<any>());\n\n  const arg = { cell, column, row, table };\n  const textInputProps = {\n    ...parseFromValuesOrFunc(mantineEditTextInputProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineEditTextInputProps, arg),\n    ...rest,\n  };\n\n  const selectProps = {\n    ...parseFromValuesOrFunc(mantineEditSelectProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineEditSelectProps, arg),\n    ...rest,\n  };\n\n  const saveInputValueToRowCache = (newValue: null | string) => {\n    //@ts-ignore\n    row._valuesCache[column.id] = newValue;\n    if (isCreating) {\n      setCreatingRow(row);\n    } else if (isEditing) {\n      setEditingRow(row);\n    }\n  };\n\n  const handleBlur = (event: FocusEvent<HTMLInputElement>) => {\n    textInputProps.onBlur?.(event);\n    saveInputValueToRowCache(value);\n    setEditingCell(null);\n  };\n\n  const handleEnterKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    textInputProps.onKeyDown?.(event);\n    if (event.key === 'Enter') {\n      editInputRefs.current[cell.id]?.blur();\n    }\n  };\n\n  if (columnDef.Edit) {\n    return columnDef.Edit?.({ cell, column, row, table });\n  }\n\n  const commonProps = {\n    disabled: parseFromValuesOrFunc(columnDef.enableEditing, row) === false,\n    label: ['custom', 'modal'].includes(\n      (isCreating ? createDisplayMode : editDisplayMode) as string,\n    )\n      ? column.columnDef.header\n      : undefined,\n    name: cell.id,\n    onClick: (e: any) => {\n      e.stopPropagation();\n      textInputProps?.onClick?.(e);\n    },\n    placeholder: !['custom', 'modal'].includes(\n      (isCreating ? createDisplayMode : editDisplayMode) as string,\n    )\n      ? columnDef.header\n      : undefined,\n    value,\n    variant: editDisplayMode === 'table' ? 'unstyled' : 'default',\n  } as const;\n\n  if (isSelectEdit) {\n    return (\n      // @ts-ignore\n      <Select\n        {...commonProps}\n        searchable\n        value={value}\n        {...selectProps}\n        onBlur={handleBlur}\n        onChange={(value) => {\n          selectProps.onChange?.(value as any);\n          setValue(value);\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          selectProps?.onClick?.(e);\n        }}\n        ref={(node) => {\n          if (node) {\n            editInputRefs.current[cell.id] = node;\n            if (selectProps.ref) {\n              selectProps.ref.current = node;\n            }\n          }\n        }}\n      />\n    );\n  }\n\n  return (\n    <TextInput\n      {...commonProps}\n      onKeyDown={handleEnterKeyDown}\n      value={value ?? ''}\n      {...textInputProps}\n      onBlur={handleBlur}\n      onChange={(event) => {\n        textInputProps.onChange?.(event);\n        setValue(event.target.value);\n      }}\n      onClick={(event) => {\n        event.stopPropagation();\n        textInputProps?.onClick?.(event);\n      }}\n      ref={(node) => {\n        if (node) {\n          editInputRefs.current[cell.id] = node;\n          if (textInputProps.ref) {\n            textInputProps.ref.current = node;\n          }\n        }\n      }}\n    />\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableBodyCell.module.css';\nimport {\n  type CSSProperties,\n  type DragEvent,\n  type MouseEvent,\n  type RefObject,\n  memo,\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  Skeleton,\n  TableTd,\n  type TableTdProps,\n  useDirection,\n} from '@mantine/core';\nimport { MRT_TableBodyCellValue } from './MRT_TableBodyCellValue';\nimport {\n  type MRT_Cell,\n  type MRT_CellValue,\n  type MRT_RowData,\n  type MRT_TableInstance,\n  type MRT_VirtualItem,\n} from '../../types';\nimport { parseCSSVarId } from '../../utils/style.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_CopyButton } from '../buttons/MRT_CopyButton';\nimport { MRT_EditCellTextInput } from '../inputs/MRT_EditCellTextInput';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue>\n  extends TableTdProps {\n  cell: MRT_Cell<TData, TValue>;\n  numRows?: number;\n  renderedColumnIndex?: number;\n  renderedRowIndex?: number;\n  rowRef: RefObject<HTMLTableRowElement>;\n  table: MRT_TableInstance<TData>;\n  virtualCell?: MRT_VirtualItem;\n}\n\nexport const MRT_TableBodyCell = <TData extends MRT_RowData>({\n  cell,\n  numRows = 1,\n  renderedColumnIndex = 0,\n  renderedRowIndex = 0,\n  rowRef,\n  table,\n  virtualCell,\n  ...rest\n}: Props<TData>) => {\n  const direction = useDirection();\n\n  const {\n    getState,\n    options: {\n      columnResizeDirection,\n      columnResizeMode,\n      createDisplayMode,\n      editDisplayMode,\n      enableClickToCopy,\n      enableColumnOrdering,\n      enableColumnPinning,\n      enableEditing,\n      enableGrouping,\n      layoutMode,\n      mantineSkeletonProps,\n      mantineTableBodyCellProps,\n    },\n    refs: { editInputRefs },\n    setEditingCell,\n    setHoveredColumn,\n  } = table;\n  const {\n    columnSizingInfo,\n    creatingRow,\n    density,\n    draggingColumn,\n    editingCell,\n    editingRow,\n    hoveredColumn,\n    isLoading,\n    showSkeletons,\n  } = getState();\n  const { column, row } = cell;\n  const { columnDef } = column;\n  const { columnDefType } = columnDef;\n\n  const args = {\n    cell,\n    column,\n    renderedColumnIndex,\n    renderedRowIndex,\n    row,\n    table,\n  };\n  const tableCellProps = {\n    ...parseFromValuesOrFunc(mantineTableBodyCellProps, args),\n    ...parseFromValuesOrFunc(columnDef.mantineTableBodyCellProps, args),\n    ...rest,\n  };\n\n  const skeletonProps = parseFromValuesOrFunc(mantineSkeletonProps, args);\n\n  const [skeletonWidth, setSkeletonWidth] = useState(100);\n  useEffect(() => {\n    if ((!isLoading && !showSkeletons) || skeletonWidth !== 100) return;\n    const size = column.getSize();\n    setSkeletonWidth(\n      columnDefType === 'display'\n        ? size / 2\n        : Math.round(Math.random() * (size - size / 3) + size / 3),\n    );\n  }, [isLoading, showSkeletons]);\n\n  const widthStyles: CSSProperties = {\n    minWidth: `max(calc(var(--col-${parseCSSVarId(\n      column?.id,\n    )}-size) * 1px), ${columnDef.minSize ?? 30}px)`,\n    width: `calc(var(--col-${parseCSSVarId(column.id)}-size) * 1px)`,\n  };\n  if (layoutMode === 'grid') {\n    widthStyles.flex = `${\n      [0, false].includes(columnDef.grow!)\n        ? 0\n        : `var(--col-${parseCSSVarId(column.id)}-size)`\n    } 0 auto`;\n  } else if (layoutMode === 'grid-no-grow') {\n    widthStyles.flex = `${+(columnDef.grow || 0)} 0 auto`;\n  }\n  const isDraggingColumn = draggingColumn?.id === column.id;\n  const isHoveredColumn = hoveredColumn?.id === column.id;\n  const isColumnPinned =\n    enableColumnPinning &&\n    columnDef.columnDefType !== 'group' &&\n    column.getIsPinned();\n\n  const isEditable =\n    !cell.getIsPlaceholder() &&\n    parseFromValuesOrFunc(enableEditing, row) &&\n    parseFromValuesOrFunc(columnDef.enableEditing, row) !== false;\n\n  const isEditing =\n    isEditable &&\n    !['custom', 'modal'].includes(editDisplayMode as string) &&\n    (editDisplayMode === 'table' ||\n      editingRow?.id === row.id ||\n      editingCell?.id === cell.id) &&\n    !row.getIsGrouped();\n\n  const isCreating =\n    isEditable && createDisplayMode === 'row' && creatingRow?.id === row.id;\n\n  const showClickToCopyButton =\n    parseFromValuesOrFunc(enableClickToCopy, cell) ||\n    (parseFromValuesOrFunc(columnDef.enableClickToCopy, cell) &&\n      parseFromValuesOrFunc(columnDef.enableClickToCopy, cell) !== false);\n\n  const handleDoubleClick = (event: MouseEvent<HTMLTableCellElement>) => {\n    tableCellProps?.onDoubleClick?.(event);\n    if (isEditable && editDisplayMode === 'cell') {\n      setEditingCell(cell);\n      setTimeout(() => {\n        const textField = editInputRefs.current[cell.id];\n        if (textField) {\n          textField.focus();\n          textField.select?.();\n        }\n      }, 100);\n    }\n  };\n\n  const handleDragEnter = (e: DragEvent<HTMLTableCellElement>) => {\n    tableCellProps?.onDragEnter?.(e);\n    if (enableGrouping && hoveredColumn?.id === 'drop-zone') {\n      setHoveredColumn(null);\n    }\n    if (enableColumnOrdering && draggingColumn) {\n      setHoveredColumn(\n        columnDef.enableColumnOrdering !== false ? column : null,\n      );\n    }\n  };\n\n  const cellValueProps = {\n    cell,\n    renderedColumnIndex,\n    renderedRowIndex,\n    table,\n  };\n\n  return (\n    <TableTd\n      data-column-pinned={isColumnPinned || undefined}\n      data-dragging-column={isDraggingColumn || undefined}\n      data-first-right-pinned={\n        (isColumnPinned === 'right' &&\n          column.getIsLastColumn(isColumnPinned)) ||\n        undefined\n      }\n      data-hovered-column-target={isHoveredColumn || undefined}\n      data-index={renderedColumnIndex}\n      data-last-left-pinned={\n        (isColumnPinned === 'left' && column.getIsLastColumn(isColumnPinned)) ||\n        undefined\n      }\n      data-last-row={renderedRowIndex === numRows - 1 || undefined}\n      data-resizing={\n        (columnResizeMode === 'onChange' &&\n          columnSizingInfo?.isResizingColumn === column.id &&\n          columnResizeDirection) ||\n        undefined\n      }\n      {...tableCellProps}\n      __vars={{\n        '--mrt-cell-align':\n          tableCellProps.align ?? (direction.dir === 'rtl' ? 'right' : 'left'),\n        '--mrt-table-cell-left':\n          isColumnPinned === 'left'\n            ? `${column.getStart(isColumnPinned)}`\n            : undefined,\n        '--mrt-table-cell-right':\n          isColumnPinned === 'right'\n            ? `${column.getAfter(isColumnPinned)}`\n            : undefined,\n        ...tableCellProps.__vars,\n      }}\n      className={clsx(\n        classes.root,\n        layoutMode?.startsWith('grid') && classes['root-grid'],\n        virtualCell && classes['root-virtualized'],\n        isEditable &&\n          editDisplayMode === 'cell' &&\n          classes['root-cursor-pointer'],\n        isEditable &&\n          ['cell', 'table'].includes(editDisplayMode ?? '') &&\n          columnDefType !== 'display' &&\n          classes['root-editable-hover'],\n        columnDefType === 'data' && classes['root-data-col'],\n        density === 'xs' && classes['root-nowrap'],\n        tableCellProps?.className,\n      )}\n      onDoubleClick={handleDoubleClick}\n      onDragEnter={handleDragEnter}\n      style={(theme) => ({\n        ...widthStyles,\n        ...parseFromValuesOrFunc(tableCellProps.style, theme),\n      })}\n    >\n      {tableCellProps.children ?? (\n        <>\n          {cell.getIsPlaceholder() ? (\n            columnDef.PlaceholderCell?.({ cell, column, row, table }) ?? null\n          ) : showSkeletons !== false && (isLoading || showSkeletons) ? (\n            <Skeleton height={20} width={skeletonWidth} {...skeletonProps} />\n          ) : columnDefType === 'display' &&\n            (['mrt-row-expand', 'mrt-row-numbers', 'mrt-row-select'].includes(\n              column.id,\n            ) ||\n              !row.getIsGrouped()) ? (\n            columnDef.Cell?.({\n              column,\n              renderedCellValue: cell.renderValue() as any,\n              row,\n              rowRef,\n              ...cellValueProps,\n            })\n          ) : isCreating || isEditing ? (\n            <MRT_EditCellTextInput cell={cell} table={table} />\n          ) : showClickToCopyButton && columnDef.enableClickToCopy !== false ? (\n            <MRT_CopyButton cell={cell} table={table}>\n              <MRT_TableBodyCellValue {...cellValueProps} />\n            </MRT_CopyButton>\n          ) : (\n            <MRT_TableBodyCellValue {...cellValueProps} />\n          )}\n          {cell.getIsGrouped() && !columnDef.GroupedCell && (\n            <> ({row.subRows?.length})</>\n          )}\n        </>\n      )}\n    </TableTd>\n  );\n};\n\nexport const Memo_MRT_TableBodyCell = memo(\n  MRT_TableBodyCell,\n  (prev, next) => next.cell === prev.cell,\n) as typeof MRT_TableBodyCell;\n", "import clsx from 'clsx';\nimport classes from './MRT_TableDetailPanel.module.css';\nimport { type RefObject } from 'react';\nimport { Collapse, TableTd, type TableTdProps, TableTr } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_RowVirtualizer,\n  type MRT_TableInstance,\n  type MRT_VirtualItem,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TableTdProps {\n  parentRowRef: RefObject<HTMLTableRowElement>;\n  renderedRowIndex?: number;\n  row: MRT_Row<TData>;\n  rowVirtualizer?: MRT_RowVirtualizer;\n  striped?: false | string;\n  table: MRT_TableInstance<TData>;\n  virtualRow?: MRT_VirtualItem;\n}\n\nexport const MRT_TableDetailPanel = <TData extends MRT_RowData>({\n  parentRowRef,\n  renderedRowIndex = 0,\n  row,\n  rowVirtualizer,\n  striped,\n  table,\n  virtualRow,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    getVisibleLeafColumns,\n    options: {\n      layoutMode,\n      mantineDetailPanelProps,\n      mantineTableBodyRowProps,\n      renderDetailPanel,\n    },\n  } = table;\n  const { isLoading } = getState();\n\n  const tableRowProps = parseFromValuesOrFunc(mantineTableBodyRowProps, {\n    isDetailPanel: true,\n    row,\n    table,\n  });\n\n  const tableCellProps = {\n    ...parseFromValuesOrFunc(mantineDetailPanelProps, {\n      row,\n      table,\n    }),\n    ...rest,\n  };\n\n  const DetailPanel =\n    !isLoading && row.getIsExpanded() && renderDetailPanel?.({ row, table });\n\n  return (\n    <TableTr\n      data-index={\n        renderDetailPanel ? renderedRowIndex * 2 + 1 : renderedRowIndex\n      }\n      data-striped={striped}\n      ref={(node: HTMLTableRowElement) => {\n        if (node) {\n          rowVirtualizer?.measureElement?.(node);\n        }\n      }}\n      {...tableRowProps}\n      __vars={{\n        '--mrt-parent-row-height': virtualRow\n          ? `${parentRowRef.current?.getBoundingClientRect()?.height}px`\n          : undefined,\n        '--mrt-virtual-row-start': virtualRow\n          ? `${virtualRow.start}px`\n          : undefined,\n        ...tableRowProps?.__vars,\n      }}\n      className={clsx(\n        'mantine-Table-tr-detail-panel',\n        classes.root,\n        layoutMode?.startsWith('grid') && classes['root-grid'],\n        virtualRow && classes['root-virtual-row'],\n        tableRowProps?.className,\n      )}\n    >\n      <TableTd\n        colSpan={getVisibleLeafColumns().length}\n        component=\"td\"\n        {...tableCellProps}\n        __vars={{\n          '--mrt-inner-width': `${table.getTotalSize()}px`,\n        }}\n        className={clsx(\n          'mantine-Table-td-detail-panel',\n          classes.inner,\n          layoutMode?.startsWith('grid') && classes['inner-grid'],\n          row.getIsExpanded() && classes['inner-expanded'],\n          virtualRow && classes['inner-virtual'],\n        )}\n        p={row.getIsExpanded() && DetailPanel ? 'md' : 0}\n      >\n        {rowVirtualizer ? (\n          row.getIsExpanded() && DetailPanel\n        ) : (\n          <Collapse in={row.getIsExpanded()}>{DetailPanel}</Collapse>\n        )}\n      </TableTd>\n    </TableTr>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableBodyRow.module.css';\nimport { type DragEvent, memo, useMemo, useRef } from 'react';\nimport {\n  Box,\n  type TableProps,\n  TableTr,\n  type TableTrProps,\n} from '@mantine/core';\nimport { MRT_TableBodyCell, Memo_MRT_TableBodyCell } from './MRT_TableBodyCell';\nimport { MRT_TableDetailPanel } from './MRT_TableDetailPanel';\nimport {\n  type MRT_Cell,\n  type MRT_ColumnVirtualizer,\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_RowVirtualizer,\n  type MRT_TableInstance,\n  type MRT_VirtualItem,\n} from '../../types';\nimport { getIsRowSelected } from '../../utils/row.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TableTrProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  numRows?: number;\n  pinnedRowIds?: string[];\n  renderedRowIndex?: number;\n  row: MRT_Row<TData>;\n  rowVirtualizer?: MRT_RowVirtualizer;\n  table: MRT_TableInstance<TData>;\n  tableProps: Partial<TableProps>;\n  virtualRow?: MRT_VirtualItem;\n}\n\nexport const MRT_TableBodyRow = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  numRows,\n  pinnedRowIds,\n  renderedRowIndex = 0,\n  row,\n  rowVirtualizer,\n  table,\n  tableProps,\n  virtualRow,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      enableRowOrdering,\n      enableRowPinning,\n      enableStickyFooter,\n      enableStickyHeader,\n      layoutMode,\n      mantineTableBodyRowProps,\n      memoMode,\n      renderDetailPanel,\n      rowPinningDisplayMode,\n    },\n    refs: { tableFooterRef, tableHeadRef },\n    setHoveredRow,\n  } = table;\n  const {\n    density,\n    draggingColumn,\n    draggingRow,\n    editingCell,\n    editingRow,\n    hoveredRow,\n    isFullScreen,\n    rowPinning,\n  } = getState();\n\n  const visibleCells = row.getVisibleCells();\n\n  const { virtualColumns, virtualPaddingLeft, virtualPaddingRight } =\n    columnVirtualizer ?? {};\n\n  const isRowSelected = getIsRowSelected({ row, table });\n  const isRowPinned = enableRowPinning && row.getIsPinned();\n  const isRowStickyPinned =\n    isRowPinned && rowPinningDisplayMode?.includes('sticky') && 'sticky';\n  const isDraggingRow = draggingRow?.id === row.id;\n  const isHoveredRow = hoveredRow?.id === row.id;\n\n  const tableRowProps = {\n    ...parseFromValuesOrFunc(mantineTableBodyRowProps, {\n      renderedRowIndex,\n      row,\n      table,\n    }),\n    ...rest,\n  };\n\n  const [bottomPinnedIndex, topPinnedIndex] = useMemo(() => {\n    if (\n      !enableRowPinning ||\n      !isRowStickyPinned ||\n      !pinnedRowIds ||\n      !row.getIsPinned()\n    )\n      return [];\n    return [\n      [...pinnedRowIds].reverse().indexOf(row.id),\n      pinnedRowIds.indexOf(row.id),\n    ];\n  }, [pinnedRowIds, rowPinning]);\n\n  const tableHeadHeight =\n    ((enableStickyHeader || isFullScreen) &&\n      tableHeadRef.current?.clientHeight) ||\n    0;\n  const tableFooterHeight =\n    (enableStickyFooter && tableFooterRef.current?.clientHeight) || 0;\n\n  const rowHeight =\n    // @ts-ignore\n    parseInt(tableRowProps?.style?.height, 10) ||\n    (density === 'xs' ? 37 : density === 'md' ? 53 : 69);\n\n  const handleDragEnter = (_e: DragEvent) => {\n    if (enableRowOrdering && draggingRow) {\n      setHoveredRow(row);\n    }\n  };\n\n  const rowRef = useRef<HTMLTableRowElement | null>(null);\n\n  let striped = tableProps.striped as boolean | string;\n\n  if (striped) {\n    if (striped === true) {\n      striped = 'odd';\n    }\n    if (striped === 'odd' && renderedRowIndex % 2 !== 0) {\n      striped = false;\n    }\n    if (striped === 'even' && renderedRowIndex % 2 === 0) {\n      striped = false;\n    }\n  }\n\n  return (\n    <>\n      <TableTr\n        data-dragging-row={isDraggingRow || undefined}\n        data-hovered-row-target={isHoveredRow || undefined}\n        data-index={renderDetailPanel ? renderedRowIndex * 2 : renderedRowIndex}\n        data-row-pinned={isRowStickyPinned || isRowPinned || undefined}\n        data-selected={isRowSelected || undefined}\n        data-striped={striped}\n        onDragEnter={handleDragEnter}\n        ref={(node: HTMLTableRowElement) => {\n          if (node) {\n            rowRef.current = node;\n            rowVirtualizer?.measureElement(node);\n          }\n        }}\n        {...tableRowProps}\n        __vars={{\n          ...tableRowProps?.__vars,\n          '--mrt-pinned-row-bottom':\n            !virtualRow && bottomPinnedIndex !== undefined && isRowPinned\n              ? `${\n                  bottomPinnedIndex * rowHeight +\n                  (enableStickyFooter ? tableFooterHeight - 1 : 0)\n                }`\n              : undefined,\n          '--mrt-pinned-row-top': virtualRow\n            ? undefined\n            : topPinnedIndex !== undefined && isRowPinned\n              ? `${\n                  topPinnedIndex * rowHeight +\n                  (enableStickyHeader || isFullScreen ? tableHeadHeight - 1 : 0)\n                }`\n              : undefined,\n          '--mrt-virtual-row-start': virtualRow\n            ? `${virtualRow.start}`\n            : undefined,\n        }}\n        className={clsx(\n          classes.root,\n          layoutMode?.startsWith('grid') && classes['root-grid'],\n          virtualRow && classes['root-virtualized'],\n          tableRowProps?.className,\n        )}\n      >\n        {virtualPaddingLeft ? (\n          <Box component=\"td\" display=\"flex\" w={virtualPaddingLeft} />\n        ) : null}\n        {(virtualColumns ?? row.getVisibleCells()).map(\n          (cellOrVirtualCell, renderedColumnIndex) => {\n            let cell = cellOrVirtualCell as MRT_Cell<TData>;\n            if (columnVirtualizer) {\n              renderedColumnIndex = (cellOrVirtualCell as MRT_VirtualItem)\n                .index;\n              cell = visibleCells[renderedColumnIndex];\n            }\n            const cellProps = {\n              cell,\n              numRows,\n              renderedColumnIndex,\n              renderedRowIndex,\n              rowRef,\n              table,\n              virtualCell: columnVirtualizer\n                ? (cellOrVirtualCell as MRT_VirtualItem)\n                : undefined,\n            };\n            return memoMode === 'cells' &&\n              cell.column.columnDef.columnDefType === 'data' &&\n              !draggingColumn &&\n              !draggingRow &&\n              editingCell?.id !== cell.id &&\n              editingRow?.id !== row.id ? (\n              <Memo_MRT_TableBodyCell key={cell.id} {...cellProps} />\n            ) : (\n              <MRT_TableBodyCell key={cell.id} {...cellProps} />\n            );\n          },\n        )}\n        {virtualPaddingRight ? (\n          <Box component=\"td\" display=\"flex\" w={virtualPaddingRight} />\n        ) : null}\n      </TableTr>\n      {renderDetailPanel && !row.getIsGrouped() && (\n        <MRT_TableDetailPanel\n          parentRowRef={rowRef}\n          renderedRowIndex={renderedRowIndex}\n          row={row}\n          rowVirtualizer={rowVirtualizer}\n          striped={striped}\n          table={table}\n          virtualRow={virtualRow}\n        />\n      )}\n    </>\n  );\n};\n\nexport const Memo_MRT_TableBodyRow = memo(\n  MRT_TableBodyRow,\n  (prev, next) => prev.row === next.row,\n) as typeof MRT_TableBodyRow;\n", "import clsx from 'clsx';\nimport classes from './MRT_TableBody.module.css';\nimport { memo, useMemo } from 'react';\nimport {\n  type TableProps,\n  TableTbody,\n  type TableTbodyProps,\n  Text,\n} from '@mantine/core';\nimport { MRT_TableBodyRow, Memo_MRT_TableBodyRow } from './MRT_TableBodyRow';\nimport { useMRT_RowVirtualizer } from '../../hooks/useMRT_RowVirtualizer';\nimport { useMRT_Rows } from '../../hooks/useMRT_Rows';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n  type MRT_VirtualItem,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\nexport interface MRT_TableBodyProps<TData extends MRT_RowData>\n  extends TableTbodyProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  table: MRT_TableInstance<TData>;\n  tableProps: Partial<TableProps>;\n}\n\nexport const MRT_TableBody = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  table,\n  tableProps,\n  ...rest\n}: MRT_TableBodyProps<TData>) => {\n  const {\n    getBottomRows,\n    getIsSomeRowsPinned,\n    getRowModel,\n    getState,\n    getTopRows,\n    options: {\n      enableStickyFooter,\n      enableStickyHeader,\n      layoutMode,\n      localization,\n      mantineTableBodyProps,\n      memoMode,\n      renderDetailPanel,\n      renderEmptyRowsFallback,\n      rowPinningDisplayMode,\n    },\n    refs: { tableFooterRef, tableHeadRef, tablePaperRef },\n  } = table;\n  const { columnFilters, globalFilter, isFullScreen, rowPinning } = getState();\n\n  const tableBodyProps = {\n    ...parseFromValuesOrFunc(mantineTableBodyProps, { table }),\n    ...rest,\n  };\n\n  const tableHeadHeight =\n    ((enableStickyHeader || isFullScreen) &&\n      tableHeadRef.current?.clientHeight) ||\n    0;\n  const tableFooterHeight =\n    (enableStickyFooter && tableFooterRef.current?.clientHeight) || 0;\n\n  const pinnedRowIds = useMemo(() => {\n    if (!rowPinning.bottom?.length && !rowPinning.top?.length) return [];\n    return getRowModel()\n      .rows.filter((row) => row.getIsPinned())\n      .map((r) => r.id);\n  }, [rowPinning, getRowModel().rows]);\n\n  const rows = useMRT_Rows(table);\n\n  const rowVirtualizer = useMRT_RowVirtualizer(table, rows);\n\n  const { virtualRows } = rowVirtualizer ?? {};\n\n  const commonRowProps = {\n    columnVirtualizer,\n    numRows: rows.length,\n    table,\n    tableProps,\n  };\n\n  return (\n    <>\n      {!rowPinningDisplayMode?.includes('sticky') &&\n        getIsSomeRowsPinned('top') && (\n          <TableTbody\n            {...tableBodyProps}\n            __vars={{\n              '--mrt-table-head-height': `${tableHeadHeight}`,\n              ...tableBodyProps?.__vars,\n            }}\n            className={clsx(\n              classes.pinned,\n              layoutMode?.startsWith('grid') && classes['root-grid'],\n              tableBodyProps?.className,\n            )}\n          >\n            {getTopRows().map((row, renderedRowIndex) => {\n              const rowProps = {\n                ...commonRowProps,\n                renderedRowIndex,\n                row,\n              };\n              return memoMode === 'rows' ? (\n                <Memo_MRT_TableBodyRow key={row.id} {...rowProps} />\n              ) : (\n                <MRT_TableBodyRow key={row.id} {...rowProps} />\n              );\n            })}\n          </TableTbody>\n        )}\n      <TableTbody\n        {...tableBodyProps}\n        __vars={{\n          '--mrt-table-body-height': rowVirtualizer\n            ? `${rowVirtualizer.getTotalSize()}px`\n            : undefined,\n          ...tableBodyProps?.__vars,\n        }}\n        className={clsx(\n          classes.root,\n          layoutMode?.startsWith('grid') && classes['root-grid'],\n          !rows.length && classes['root-no-rows'],\n          rowVirtualizer && classes['root-virtualized'],\n          tableBodyProps?.className,\n        )}\n      >\n        {tableBodyProps?.children ??\n          (!rows.length ? (\n            <tr\n              className={clsx(\n                'mrt-table-body-row',\n                layoutMode?.startsWith('grid') && classes['empty-row-tr-grid'],\n              )}\n            >\n              <td\n                className={clsx(\n                  'mrt-table-body-cell',\n                  layoutMode?.startsWith('grid') &&\n                    classes['empty-row-td-grid'],\n                )}\n                colSpan={table.getVisibleLeafColumns().length}\n              >\n                {renderEmptyRowsFallback?.({ table }) ?? (\n                  <Text\n                    __vars={{\n                      '--mrt-paper-width': `${tablePaperRef.current?.clientWidth}`,\n                    }}\n                    className={clsx(classes['empty-row-td-content'])}\n                  >\n                    {globalFilter || columnFilters.length\n                      ? localization.noResultsFound\n                      : localization.noRecordsToDisplay}\n                  </Text>\n                )}\n              </td>\n            </tr>\n          ) : (\n            <>\n              {(virtualRows ?? rows).map(\n                (rowOrVirtualRow, renderedRowIndex) => {\n                  if (rowVirtualizer) {\n                    if (renderDetailPanel) {\n                      if (rowOrVirtualRow.index % 2 === 1) {\n                        return null;\n                      } else {\n                        renderedRowIndex = rowOrVirtualRow.index / 2;\n                      }\n                    } else {\n                      renderedRowIndex = rowOrVirtualRow.index;\n                    }\n                  }\n                  const row = rowVirtualizer\n                    ? rows[renderedRowIndex]\n                    : (rowOrVirtualRow as MRT_Row<TData>);\n                  const props = {\n                    ...commonRowProps,\n                    pinnedRowIds,\n                    renderedRowIndex,\n                    row,\n                    rowVirtualizer,\n                    virtualRow: rowVirtualizer\n                      ? (rowOrVirtualRow as MRT_VirtualItem)\n                      : undefined,\n                  };\n                  const key = `${row.id}-${row.index}`;\n                  return memoMode === 'rows' ? (\n                    <Memo_MRT_TableBodyRow key={key} {...props} />\n                  ) : (\n                    <MRT_TableBodyRow key={key} {...props} />\n                  );\n                },\n              )}\n            </>\n          ))}\n      </TableTbody>\n      {!rowPinningDisplayMode?.includes('sticky') &&\n        getIsSomeRowsPinned('bottom') && (\n          <TableTbody\n            {...tableBodyProps}\n            __vars={{\n              '--mrt-table-footer-height': `${tableFooterHeight}`,\n              ...tableBodyProps?.__vars,\n            }}\n            className={clsx(\n              classes.pinned,\n              layoutMode?.startsWith('grid') && classes['root-grid'],\n              tableBodyProps?.className,\n            )}\n          >\n            {getBottomRows().map((row, renderedRowIndex) => {\n              const props = {\n                ...commonRowProps,\n                renderedRowIndex,\n                row,\n              };\n              return memoMode === 'rows' ? (\n                <Memo_MRT_TableBodyRow key={row.id} {...props} />\n              ) : (\n                <MRT_TableBodyRow key={row.id} {...props} />\n              );\n            })}\n          </TableTbody>\n        )}\n    </>\n  );\n};\n\nexport const Memo_MRT_TableBody = memo(\n  MRT_TableBody,\n  (prev, next) => prev.table.options.data === next.table.options.data,\n) as typeof MRT_TableBody;\n", "import clsx from 'clsx';\nimport classes from './MRT_TableFooterCell.module.css';\nimport { type CSSProperties } from 'react';\nimport { TableTh, type TableThProps, useDirection } from '@mantine/core';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseCSSVarId } from '../../utils/style.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TableThProps {\n  footer: MRT_Header<TData>;\n  renderedColumnIndex?: number;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableFooterCell = <TData extends MRT_RowData>({\n  footer,\n  renderedColumnIndex,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const direction = useDirection();\n  const {\n    options: { enableColumnPinning, layoutMode, mantineTableFooterCellProps },\n  } = table;\n  const { column } = footer;\n  const { columnDef } = column;\n  const { columnDefType } = columnDef;\n\n  const isColumnPinned =\n    enableColumnPinning &&\n    columnDef.columnDefType !== 'group' &&\n    column.getIsPinned();\n\n  const args = { column, table };\n  const tableCellProps = {\n    ...parseFromValuesOrFunc(mantineTableFooterCellProps, args),\n    ...parseFromValuesOrFunc(columnDef.mantineTableFooterCellProps, args),\n    ...rest,\n  };\n\n  const widthStyles: CSSProperties = {\n    minWidth: `max(calc(var(--header-${parseCSSVarId(\n      footer?.id,\n    )}-size) * 1px), ${columnDef.minSize ?? 30}px)`,\n    width: `calc(var(--header-${parseCSSVarId(footer.id)}-size) * 1px)`,\n  };\n  if (layoutMode === 'grid') {\n    widthStyles.flex = `${\n      [0, false].includes(columnDef.grow!)\n        ? 0\n        : `var(--header-${parseCSSVarId(footer.id)}-size)`\n    } 0 auto`;\n  } else if (layoutMode === 'grid-no-grow') {\n    widthStyles.flex = `${+(columnDef.grow || 0)} 0 auto`;\n  }\n\n  return (\n    <TableTh\n      colSpan={footer.colSpan}\n      data-column-pinned={isColumnPinned || undefined}\n      data-first-right-pinned={\n        (isColumnPinned === 'right' &&\n          column.getIsLastColumn(isColumnPinned)) ||\n        undefined\n      }\n      data-index={renderedColumnIndex}\n      data-last-left-pinned={\n        (isColumnPinned === 'left' && column.getIsLastColumn(isColumnPinned)) ||\n        undefined\n      }\n      {...tableCellProps}\n      __vars={{\n        '--mrt-cell-align':\n          tableCellProps.align ??\n          (columnDefType === 'group'\n            ? 'center'\n            : direction.dir === 'rtl'\n              ? 'right'\n              : 'left'),\n        '--mrt-table-cell-left':\n          isColumnPinned === 'left'\n            ? `${column.getStart(isColumnPinned)}`\n            : undefined,\n        '--mrt-table-cell-right':\n          isColumnPinned === 'right'\n            ? `${column.getAfter(isColumnPinned)}`\n            : undefined,\n        ...tableCellProps?.__vars,\n      }}\n      className={clsx(\n        classes.root,\n        layoutMode?.startsWith('grid') && classes.grid,\n        columnDefType === 'group' && classes.group,\n        tableCellProps?.className,\n      )}\n      style={(theme) => ({\n        ...widthStyles,\n        ...parseFromValuesOrFunc(tableCellProps.style, theme),\n      })}\n    >\n      {tableCellProps.children ??\n        (footer.isPlaceholder\n          ? null\n          : parseFromValuesOrFunc(columnDef.Footer, {\n              column,\n              footer,\n              table,\n            }) ??\n            columnDef.footer ??\n            null)}\n    </TableTh>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableFooterRow.module.css';\nimport { Box, TableTr, type TableTrProps } from '@mantine/core';\nimport { MRT_TableFooterCell } from './MRT_TableFooterCell';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_Header,\n  type MRT_HeaderGroup,\n  type MRT_RowData,\n  type MRT_TableInstance,\n  type MRT_VirtualItem,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TableTrProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  footerGroup: MRT_HeaderGroup<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableFooterRow = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  footerGroup,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: { layoutMode, mantineTableFooterRowProps },\n  } = table;\n\n  const { virtualColumns, virtualPaddingLeft, virtualPaddingRight } =\n    columnVirtualizer ?? {};\n\n  // if no content in row, skip row\n  if (\n    !footerGroup.headers?.some(\n      (header) =>\n        (typeof header.column.columnDef.footer === 'string' &&\n          !!header.column.columnDef.footer) ||\n        header.column.columnDef.Footer,\n    )\n  ) {\n    return null;\n  }\n\n  const tableRowProps = {\n    ...parseFromValuesOrFunc(mantineTableFooterRowProps, {\n      footerGroup,\n      table,\n    }),\n    ...rest,\n  };\n\n  return (\n    <TableTr\n      className={clsx(\n        classes.root,\n        layoutMode?.startsWith('grid') && classes['layout-mode-grid'],\n      )}\n      {...tableRowProps}\n    >\n      {virtualPaddingLeft ? (\n        <Box component=\"th\" display=\"flex\" w={virtualPaddingLeft} />\n      ) : null}\n      {(virtualColumns ?? footerGroup.headers).map(\n        (footerOrVirtualFooter, renderedColumnIndex) => {\n          let footer = footerOrVirtualFooter as MRT_Header<TData>;\n          if (columnVirtualizer) {\n            renderedColumnIndex = (footerOrVirtualFooter as MRT_VirtualItem)\n              .index;\n            footer = footerGroup.headers[renderedColumnIndex];\n          }\n\n          return (\n            <MRT_TableFooterCell\n              footer={footer}\n              key={footer.id}\n              renderedColumnIndex={renderedColumnIndex}\n              table={table}\n            />\n          );\n        },\n      )}\n      {virtualPaddingRight ? (\n        <Box component=\"th\" display=\"flex\" w={virtualPaddingRight} />\n      ) : null}\n    </TableTr>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableFooter.module.css';\nimport { TableTfoot, type TableTfootProps } from '@mantine/core';\nimport { MRT_TableFooterRow } from './MRT_TableFooterRow';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TableTfootProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableFooter = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getFooterGroups,\n    getState,\n    options: { enableStickyFooter, layoutMode, mantineTableFooterProps },\n    refs: { tableFooterRef },\n  } = table;\n  const { isFullScreen } = getState();\n\n  const tableFooterProps = {\n    ...parseFromValuesOrFunc(mantineTableFooterProps, {\n      table,\n    }),\n    ...rest,\n  };\n\n  const stickFooter =\n    (isFullScreen || enableStickyFooter) && enableStickyFooter !== false;\n\n  return (\n    <TableTfoot\n      {...tableFooterProps}\n      className={clsx(\n        classes.root,\n        tableFooterProps?.className,\n        stickFooter && classes.sticky,\n        layoutMode?.startsWith('grid') && classes.grid,\n      )}\n      ref={(ref: HTMLTableSectionElement) => {\n        tableFooterRef.current = ref;\n        if (tableFooterProps?.ref) {\n          // @ts-ignore\n          tableFooterProps.ref.current = ref;\n        }\n      }}\n    >\n      {getFooterGroups().map((footerGroup) => (\n        <MRT_TableFooterRow\n          columnVirtualizer={columnVirtualizer}\n          footerGroup={footerGroup as any}\n          key={footerGroup.id}\n          table={table}\n        />\n      ))}\n    </TableTfoot>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_FilterCheckBox.module.css';\nimport { Checkbox, type CheckboxProps, Tooltip } from '@mantine/core';\nimport {\n  type MRT_CellValue,\n  type MRT_Column,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue>\n  extends CheckboxProps {\n  column: MRT_Column<TData, TValue>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_FilterCheckbox = <TData extends MRT_RowData>({\n  column,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { localization, mantineFilterCheckboxProps },\n  } = table;\n  const { density } = getState();\n  const { columnDef } = column;\n\n  const arg = { column, table };\n  const checkboxProps = {\n    ...parseFromValuesOrFunc(mantineFilterCheckboxProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterCheckboxProps, arg),\n    ...rest,\n  } as CheckboxProps;\n\n  const filterLabel = localization.filterByColumn?.replace(\n    '{column}',\n    columnDef.header,\n  );\n\n  const value = column.getFilterValue();\n\n  return (\n    <Tooltip\n      label={checkboxProps?.title ?? filterLabel}\n      openDelay={1000}\n      withinPortal\n    >\n      <Checkbox\n        checked={value === 'true'}\n        className={clsx('mrt-filter-checkbox', classes.root)}\n        indeterminate={value === undefined}\n        label={checkboxProps.title ?? filterLabel}\n        size={density === 'xs' ? 'sm' : 'md'}\n        {...checkboxProps}\n        onChange={(e) => {\n          column.setFilterValue(\n            column.getFilterValue() === undefined\n              ? 'true'\n              : column.getFilterValue() === 'true'\n                ? 'false'\n                : undefined,\n          );\n          checkboxProps?.onChange?.(e);\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          checkboxProps?.onClick?.(e);\n        }}\n        title={undefined}\n      />\n    </Tooltip>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_FilterTextInput.module.css';\nimport { type MouseEvent, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  ActionIcon,\n  Autocomplete,\n  Badge,\n  Box,\n  MultiSelect,\n  Select,\n  TextInput,\n  type TextInputProps,\n} from '@mantine/core';\nimport { DateInput } from '@mantine/dates';\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { localizedFilterOption } from '../../fns/filterFns';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TextInputProps {\n  header: MRT_Header<TData>;\n  rangeFilterIndex?: number;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_FilterTextInput = <TData extends MRT_RowData>({\n  header,\n  rangeFilterIndex,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: {\n      columnFilterDisplayMode,\n      columnFilterModeOptions,\n      icons: { IconX },\n      localization,\n      mantineFilterAutocompleteProps,\n      mantineFilterDateInputProps,\n      mantineFilterMultiSelectProps = {\n        clearable: true,\n      },\n      mantineFilterSelectProps,\n      mantineFilterTextInputProps,\n      manualFiltering,\n    },\n    refs: { filterInputRefs },\n    setColumnFilterFns,\n  } = table;\n  const { column } = header;\n  const { columnDef } = column;\n\n  const arg = { column, rangeFilterIndex, table };\n  const textInputProps = {\n    ...parseFromValuesOrFunc(mantineFilterTextInputProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterTextInputProps, arg),\n    ...rest,\n  };\n\n  const selectProps = {\n    ...parseFromValuesOrFunc(mantineFilterSelectProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterSelectProps, arg),\n  };\n\n  const multiSelectProps = {\n    ...parseFromValuesOrFunc(mantineFilterMultiSelectProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterMultiSelectProps, arg),\n  };\n\n  const dateInputProps = {\n    ...parseFromValuesOrFunc(mantineFilterDateInputProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterDateInputProps, arg),\n  };\n\n  const autoCompleteProps = {\n    ...parseFromValuesOrFunc(mantineFilterAutocompleteProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterAutocompleteProps, arg),\n  };\n\n  const isRangeFilter =\n    columnDef.filterVariant === 'range' ||\n    columnDef.filterVariant === 'date-range' ||\n    rangeFilterIndex !== undefined;\n  const isSelectFilter = columnDef.filterVariant === 'select';\n  const isMultiSelectFilter = columnDef.filterVariant === 'multi-select';\n  const isDateFilter =\n    columnDef.filterVariant === 'date' ||\n    columnDef.filterVariant === 'date-range';\n  const isAutoCompleteFilter = columnDef.filterVariant === 'autocomplete';\n  const allowedColumnFilterOptions =\n    columnDef?.columnFilterModeOptions ?? columnFilterModeOptions;\n\n  const currentFilterOption = columnDef._filterFn;\n  const filterChipLabel = ['empty', 'notEmpty'].includes(currentFilterOption)\n    ? localizedFilterOption(localization, currentFilterOption)\n    : '';\n  const filterPlaceholder = !isRangeFilter\n    ? textInputProps?.placeholder ??\n      localization.filterByColumn?.replace('{column}', String(columnDef.header))\n    : rangeFilterIndex === 0\n      ? localization.min\n      : rangeFilterIndex === 1\n        ? localization.max\n        : '';\n\n  const facetedUniqueValues = column.getFacetedUniqueValues();\n\n  const filterSelectOptions = useMemo(\n    () =>\n      (\n        autoCompleteProps?.data ??\n        selectProps?.data ??\n        multiSelectProps?.data ??\n        ((isAutoCompleteFilter || isSelectFilter || isMultiSelectFilter) &&\n        facetedUniqueValues\n          ? Array.from(facetedUniqueValues.keys()).sort((a, b) =>\n              a.localeCompare(b),\n            )\n          : [])\n      )\n        //@ts-ignore\n        .filter((o: any) => o !== undefined && o !== null),\n    [\n      autoCompleteProps?.data,\n      facetedUniqueValues,\n      isAutoCompleteFilter,\n      isMultiSelectFilter,\n      isSelectFilter,\n      multiSelectProps?.data,\n      selectProps?.data,\n    ],\n  );\n\n  const isMounted = useRef(false);\n\n  const [filterValue, setFilterValue] = useState<any>(() =>\n    isMultiSelectFilter\n      ? (column.getFilterValue() as string[]) || []\n      : isRangeFilter\n        ? (column.getFilterValue() as [string, string])?.[\n            rangeFilterIndex as number\n          ] || ''\n        : (column.getFilterValue() as string) ?? '',\n  );\n\n  const [debouncedFilterValue] = useDebouncedValue(\n    filterValue,\n    manualFiltering ? 400 : 200,\n  );\n\n  //send debounced filterValue to table instance\n  useEffect(() => {\n    if (!isMounted.current) return;\n    if (isRangeFilter) {\n      column.setFilterValue((old: [string, string]) => {\n        const newFilterValues = Array.isArray(old) ? old : ['', ''];\n        newFilterValues[rangeFilterIndex as number] =\n          debouncedFilterValue as string;\n        return newFilterValues;\n      });\n    } else {\n      column.setFilterValue(debouncedFilterValue ?? undefined);\n    }\n  }, [debouncedFilterValue]);\n\n  //receive table filter value and set it to local state\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n      return;\n    }\n    const tableFilterValue = column.getFilterValue();\n    if (tableFilterValue === undefined) {\n      handleClear();\n    } else if (isRangeFilter && rangeFilterIndex !== undefined) {\n      setFilterValue(\n        ((tableFilterValue ?? ['', '']) as [string, string])[rangeFilterIndex],\n      );\n    } else {\n      setFilterValue(tableFilterValue ?? '');\n    }\n  }, [column.getFilterValue()]);\n\n  const handleClear = () => {\n    if (isMultiSelectFilter) {\n      setFilterValue([]);\n      column.setFilterValue([]);\n    } else if (isRangeFilter) {\n      setFilterValue('');\n      column.setFilterValue((old: [string | undefined, string | undefined]) => {\n        const newFilterValues = Array.isArray(old) ? old : ['', ''];\n        newFilterValues[rangeFilterIndex as number] = undefined;\n        return newFilterValues;\n      });\n    } else {\n      setFilterValue('');\n      column.setFilterValue(undefined);\n    }\n  };\n\n  if (columnDef.Filter) {\n    return (\n      <>{columnDef.Filter?.({ column, header, rangeFilterIndex, table })}</>\n    );\n  }\n\n  const handleClearEmptyFilterChip = () => {\n    setFilterValue('');\n    column.setFilterValue(undefined);\n    setColumnFilterFns((prev) => ({\n      ...prev,\n      [header.id]: allowedColumnFilterOptions?.[0] ?? 'fuzzy',\n    }));\n  };\n\n  const { className, ...commonProps } = {\n    'aria-label': filterPlaceholder,\n    className: clsx(\n      'mrt-filter-text-input',\n      classes.root,\n      isDateFilter\n        ? classes['date-filter']\n        : isRangeFilter\n          ? classes['range-filter']\n          : !filterChipLabel && classes['not-filter-chip'],\n    ),\n    disabled: !!filterChipLabel,\n    onChange: setFilterValue,\n    onClick: (event: MouseEvent<HTMLInputElement>) => event.stopPropagation(),\n    placeholder: filterPlaceholder,\n    style: {\n      ...(isMultiSelectFilter\n        ? multiSelectProps?.style\n        : isSelectFilter\n          ? selectProps?.style\n          : isDateFilter\n            ? dateInputProps?.style\n            : textInputProps?.style),\n    },\n    title: filterPlaceholder,\n    value: filterValue,\n    variant: 'unstyled',\n  } as const;\n\n  const ClearButton = filterValue ? (\n    <ActionIcon\n      aria-label={localization.clearFilter}\n      color=\"var(--mantine-color-gray-7)\"\n      onClick={handleClear}\n      size=\"sm\"\n      title={localization.clearFilter ?? ''}\n      variant=\"transparent\"\n    >\n      <IconX />\n    </ActionIcon>\n  ) : null;\n\n  return filterChipLabel ? (\n    <Box style={commonProps.style}>\n      <Badge\n        className={classes['filter-chip-badge']}\n        onClick={handleClearEmptyFilterChip}\n        rightSection={ClearButton}\n        size=\"lg\"\n      >\n        {filterChipLabel}\n      </Badge>\n    </Box>\n  ) : isMultiSelectFilter ? (\n    <MultiSelect\n      {...commonProps}\n      searchable\n      {...multiSelectProps}\n      className={clsx(className, multiSelectProps.className)}\n      data={filterSelectOptions}\n      onChange={(value) => setFilterValue(value)}\n      ref={(node) => {\n        if (node) {\n          filterInputRefs.current[`${column.id}-${rangeFilterIndex ?? 0}`] =\n            node;\n          if (multiSelectProps.ref) {\n            multiSelectProps.ref.current = node;\n          }\n        }\n      }}\n      rightSection={\n        filterValue?.toString()?.length && multiSelectProps?.clearable\n          ? ClearButton\n          : undefined\n      }\n      style={commonProps.style}\n    />\n  ) : isSelectFilter ? (\n    <Select\n      {...commonProps}\n      clearable\n      searchable\n      {...selectProps}\n      className={clsx(className, selectProps.className)}\n      clearButtonProps={{\n        size: 'md',\n      }}\n      data={filterSelectOptions}\n      ref={(node) => {\n        if (node) {\n          filterInputRefs.current[`${column.id}-${rangeFilterIndex ?? 0}`] =\n            node;\n          if (selectProps.ref) {\n            selectProps.ref.current = node;\n          }\n        }\n      }}\n      style={commonProps.style}\n    />\n  ) : isDateFilter ? (\n    <DateInput\n      {...commonProps}\n      allowDeselect\n      clearable\n      popoverProps={{ withinPortal: columnFilterDisplayMode !== 'popover' }}\n      {...dateInputProps}\n      className={clsx(className, dateInputProps.className)}\n      onChange={(event) => commonProps.onChange(event === null ? '' : event)}\n      ref={(node) => {\n        if (node) {\n          filterInputRefs.current[`${column.id}-${rangeFilterIndex ?? 0}`] =\n            node;\n          if (dateInputProps.ref) {\n            dateInputProps.ref.current = node;\n          }\n        }\n      }}\n      style={commonProps.style}\n    />\n  ) : isAutoCompleteFilter ? (\n    <Autocomplete\n      {...commonProps}\n      onChange={(value) => setFilterValue(value)}\n      rightSection={filterValue?.toString()?.length ? ClearButton : undefined}\n      {...autoCompleteProps}\n      className={clsx(className, autoCompleteProps.className)}\n      data={filterSelectOptions}\n      ref={(node) => {\n        if (node) {\n          filterInputRefs.current[`${column.id}-${rangeFilterIndex ?? 0}`] =\n            node;\n          if (autoCompleteProps.ref) {\n            autoCompleteProps.ref.current = node;\n          }\n        }\n      }}\n      style={commonProps.style}\n    />\n  ) : (\n    <TextInput\n      {...commonProps}\n      onChange={(e) => setFilterValue(e.target.value)}\n      rightSection={filterValue?.toString()?.length ? ClearButton : undefined}\n      {...textInputProps}\n      className={clsx(className, textInputProps.className)}\n      mt={0}\n      ref={(node) => {\n        if (node) {\n          filterInputRefs.current[`${column.id}-${rangeFilterIndex ?? 0}`] =\n            node;\n          if (textInputProps.ref) {\n            textInputProps.ref.current = node;\n          }\n        }\n      }}\n      style={commonProps.style}\n    />\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_FilterRangeFields.module.css';\nimport { Box, type BoxProps } from '@mantine/core';\nimport { MRT_FilterTextInput } from './MRT_FilterTextInput';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends BoxProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_FilterRangeFields = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  return (\n    <Box\n      {...rest}\n      className={clsx('mrt-filter-range-fields', classes.root, rest.className)}\n    >\n      <MRT_FilterTextInput header={header} rangeFilterIndex={0} table={table} />\n      <MRT_FilterTextInput header={header} rangeFilterIndex={1} table={table} />\n    </Box>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_FilterRangeSlider.module.css';\nimport { useEffect, useRef, useState } from 'react';\nimport { RangeSlider, type RangeSliderProps } from '@mantine/core';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends RangeSliderProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_FilterRangeSlider = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: { mantineFilterRangeSliderProps },\n    refs: { filterInputRefs },\n  } = table;\n  const { column } = header;\n  const { columnDef } = column;\n\n  const arg = { column, table };\n  const rangeSliderProps = {\n    ...parseFromValuesOrFunc(mantineFilterRangeSliderProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineFilterRangeSliderProps, arg),\n    ...rest,\n  } as RangeSliderProps;\n\n  let [min, max] =\n    rangeSliderProps.min !== undefined && rangeSliderProps.max !== undefined\n      ? [rangeSliderProps.min, rangeSliderProps.max]\n      : column.getFacetedMinMaxValues() ?? [0, 1];\n\n  //fix potential TanStack Table bugs where min or max is an array\n  if (Array.isArray(min)) min = min[0];\n  if (Array.isArray(max)) max = max[0];\n  if (min === null) min = 0;\n  if (max === null) max = 1;\n\n  const [filterValues, setFilterValues] = useState<[number, number]>([\n    min,\n    max,\n  ]);\n  const columnFilterValue = column.getFilterValue() as\n    | [number, number]\n    | undefined;\n\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      if (columnFilterValue === undefined) {\n        setFilterValues([min, max]);\n      } else if (Array.isArray(columnFilterValue)) {\n        setFilterValues(columnFilterValue);\n      }\n    }\n    isMounted.current = true;\n  }, [columnFilterValue, min, max]);\n\n  return (\n    <RangeSlider\n      className={clsx('mrt-filter-range-slider', classes.root)}\n      max={max}\n      min={min}\n      onChange={(values) => {\n        setFilterValues(values as [number, number]);\n      }}\n      onChangeEnd={(values) => {\n        if (Array.isArray(values)) {\n          if (values[0] <= min && values[1] >= max) {\n            //if the user has selected the entire range, remove the filter\n            column.setFilterValue(undefined);\n          } else {\n            column.setFilterValue(values as [number, number]);\n          }\n        }\n      }}\n      value={filterValues}\n      {...rangeSliderProps}\n      ref={(node) => {\n        if (node) {\n          //@ts-ignore\n          filterInputRefs.current[`${column.id}-0`] = node;\n          // @ts-ignore\n          if (rangeSliderProps?.ref) {\n            //@ts-ignore\n            rangeSliderProps.ref = node;\n          }\n        }\n      }}\n    />\n  );\n};\n", "import classes from './MRT_FilterOptionMenu.module.css';\nimport { Fragment, useMemo } from 'react';\nimport { Menu } from '@mantine/core';\nimport {\n  type MRT_FilterOption,\n  type MRT_Header,\n  type MRT_InternalFilterOption,\n  type MRT_Localization,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\nexport const mrtFilterOptions = (\n  localization: MRT_Localization,\n): MRT_InternalFilterOption[] => [\n  {\n    divider: false,\n    label: localization.filterFuzzy,\n    option: 'fuzzy',\n    symbol: '≈',\n  },\n  {\n    divider: false,\n    label: localization.filterContains,\n    option: 'contains',\n    symbol: '*',\n  },\n  {\n    divider: false,\n    label: localization.filterStartsWith,\n    option: 'startsWith',\n    symbol: 'a',\n  },\n  {\n    divider: true,\n    label: localization.filterEndsWith,\n    option: 'endsWith',\n    symbol: 'z',\n  },\n  {\n    divider: false,\n    label: localization.filterEquals,\n    option: 'equals',\n    symbol: '=',\n  },\n  {\n    divider: true,\n    label: localization.filterNotEquals,\n    option: 'notEquals',\n    symbol: '≠',\n  },\n  {\n    divider: false,\n    label: localization.filterBetween,\n    option: 'between',\n    symbol: '⇿',\n  },\n  {\n    divider: true,\n    label: localization.filterBetweenInclusive,\n    option: 'betweenInclusive',\n    symbol: '⬌',\n  },\n  {\n    divider: false,\n    label: localization.filterGreaterThan,\n    option: 'greaterThan',\n    symbol: '>',\n  },\n  {\n    divider: false,\n    label: localization.filterGreaterThanOrEqualTo,\n    option: 'greaterThanOrEqualTo',\n    symbol: '≥',\n  },\n  {\n    divider: false,\n    label: localization.filterLessThan,\n    option: 'lessThan',\n    symbol: '<',\n  },\n  {\n    divider: true,\n    label: localization.filterLessThanOrEqualTo,\n    option: 'lessThanOrEqualTo',\n    symbol: '≤',\n  },\n  {\n    divider: false,\n    label: localization.filterEmpty,\n    option: 'empty',\n    symbol: '∅',\n  },\n  {\n    divider: false,\n    label: localization.filterNotEmpty,\n    option: 'notEmpty',\n    symbol: '!∅',\n  },\n];\n\nconst rangeModes = ['between', 'betweenInclusive', 'inNumberRange'];\nconst emptyModes = ['empty', 'notEmpty'];\nconst arrModes = ['arrIncludesSome', 'arrIncludesAll', 'arrIncludes'];\nconst rangeVariants = ['range-slider', 'date-range', 'range'];\n\ninterface Props<TData extends MRT_RowData> {\n  header?: MRT_Header<TData>;\n  onSelect?: () => void;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_FilterOptionMenu = <TData extends MRT_RowData>({\n  header,\n  onSelect,\n  table,\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      columnFilterModeOptions,\n      globalFilterModeOptions,\n      localization,\n      renderColumnFilterModeMenuItems,\n      renderGlobalFilterModeMenuItems,\n    },\n    setColumnFilterFns,\n    setGlobalFilterFn,\n  } = table;\n  const { globalFilterFn } = getState();\n  const { column } = header ?? {};\n  const { columnDef } = column ?? {};\n  const currentFilterValue = column?.getFilterValue();\n\n  let allowedColumnFilterOptions =\n    columnDef?.columnFilterModeOptions ?? columnFilterModeOptions;\n\n  if (rangeVariants.includes(columnDef?.filterVariant as string)) {\n    allowedColumnFilterOptions = [\n      ...rangeModes,\n      ...(allowedColumnFilterOptions ?? []),\n    ].filter((option) => rangeModes.includes(option));\n  }\n\n  const internalFilterOptions = useMemo(\n    () =>\n      mrtFilterOptions(localization).filter((filterOption) =>\n        columnDef\n          ? allowedColumnFilterOptions === undefined ||\n            allowedColumnFilterOptions?.includes(filterOption.option)\n          : (!globalFilterModeOptions ||\n              globalFilterModeOptions.includes(filterOption.option)) &&\n            ['contains', 'fuzzy', 'startsWith'].includes(filterOption.option),\n      ),\n    [],\n  );\n\n  const handleSelectFilterMode = (option: MRT_FilterOption) => {\n    const prevFilterMode = columnDef?._filterFn ?? '';\n    if (!header || !column) {\n      // global filter mode\n      setGlobalFilterFn(option);\n    } else if (option !== prevFilterMode) {\n      // column filter mode\n      setColumnFilterFns((prev: { [key: string]: any }) => ({\n        ...prev,\n        [header.id]: option,\n      }));\n\n      // reset filter value and/or perform new filter render\n      if (emptyModes.includes(option)) {\n        // will now be empty/notEmpty filter mode\n        if (\n          currentFilterValue !== ' ' &&\n          !emptyModes.includes(prevFilterMode)\n        ) {\n          column.setFilterValue(' ');\n        } else if (currentFilterValue) {\n          column.setFilterValue(currentFilterValue); // perform new filter render\n        }\n      } else if (\n        columnDef?.filterVariant === 'multi-select' ||\n        arrModes.includes(option as string)\n      ) {\n        // will now be array filter mode\n        if (\n          currentFilterValue instanceof String ||\n          (currentFilterValue as Array<any>)?.length\n        ) {\n          column.setFilterValue([]);\n        } else if (currentFilterValue) {\n          column.setFilterValue(currentFilterValue); // perform new filter render\n        }\n      } else if (\n        rangeVariants.includes(columnDef?.filterVariant as string) ||\n        rangeModes.includes(option as MRT_FilterOption)\n      ) {\n        // will now be range filter mode\n        if (\n          !Array.isArray(currentFilterValue) ||\n          (!(currentFilterValue as Array<any>)?.every((v) => v === '') &&\n            !rangeModes.includes(prevFilterMode))\n        ) {\n          column.setFilterValue(['', '']);\n        } else {\n          column.setFilterValue(currentFilterValue); // perform new filter render\n        }\n      } else {\n        // will now be single value filter mode\n        if (Array.isArray(currentFilterValue)) {\n          column.setFilterValue('');\n        } else if (\n          currentFilterValue === ' ' &&\n          emptyModes.includes(prevFilterMode)\n        ) {\n          column.setFilterValue(undefined);\n        } else {\n          column.setFilterValue(currentFilterValue); // perform new filter render\n        }\n      }\n    }\n    onSelect?.();\n  };\n\n  const filterOption =\n    !!header && columnDef ? columnDef._filterFn : globalFilterFn;\n\n  return (\n    <Menu.Dropdown>\n      {(header && column && columnDef\n        ? columnDef.renderColumnFilterModeMenuItems?.({\n            column: column as any,\n            internalFilterOptions,\n            onSelectFilterMode: handleSelectFilterMode,\n            table,\n          }) ??\n          renderColumnFilterModeMenuItems?.({\n            column: column as any,\n            internalFilterOptions,\n            onSelectFilterMode: handleSelectFilterMode,\n            table,\n          })\n        : renderGlobalFilterModeMenuItems?.({\n            internalFilterOptions,\n            onSelectFilterMode: handleSelectFilterMode,\n            table,\n          })) ??\n        internalFilterOptions.map(\n          ({ divider, label, option, symbol }, index) => (\n            <Fragment key={index}>\n              <Menu.Item\n                color={option === filterOption ? 'blue' : undefined}\n                leftSection={<span className={classes.symbol}>{symbol}</span>}\n                onClick={() =>\n                  handleSelectFilterMode(option as MRT_FilterOption)\n                }\n                value={option}\n              >\n                {label}\n              </Menu.Item>\n              {divider && <Menu.Divider />}\n            </Fragment>\n          ),\n        )}\n    </Menu.Dropdown>\n  );\n};\n", "import classes from './MRT_TableHeadCellFilterContainer.module.css';\nimport {\n  ActionIcon,\n  Collapse,\n  Flex,\n  type FlexProps,\n  Menu,\n  Text,\n  Tooltip,\n} from '@mantine/core';\nimport { localizedFilterOption } from '../../fns/filterFns';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { MRT_FilterCheckbox } from '../inputs/MRT_FilterCheckbox';\nimport { MRT_FilterRangeFields } from '../inputs/MRT_FilterRangeFields';\nimport { MRT_FilterRangeSlider } from '../inputs/MRT_FilterRangeSlider';\nimport { MRT_FilterTextInput } from '../inputs/MRT_FilterTextInput';\nimport { MRT_FilterOptionMenu } from '../menus/MRT_FilterOptionMenu';\n\ninterface Props<TData extends MRT_RowData> extends FlexProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHeadCellFilterContainer = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      columnFilterDisplayMode,\n      columnFilterModeOptions,\n      enableColumnFilterModes,\n      icons: { IconFilterCog },\n      localization,\n    },\n    refs: { filterInputRefs },\n  } = table;\n  const { showColumnFilters } = getState();\n  const { column } = header;\n  const { columnDef } = column;\n\n  const currentFilterOption = columnDef._filterFn;\n  const allowedColumnFilterOptions =\n    columnDef?.columnFilterModeOptions ?? columnFilterModeOptions;\n  const showChangeModeButton =\n    enableColumnFilterModes &&\n    columnDef.enableColumnFilterModes !== false &&\n    (allowedColumnFilterOptions === undefined ||\n      !!allowedColumnFilterOptions?.length);\n\n  return (\n    <Collapse in={showColumnFilters || columnFilterDisplayMode === 'popover'}>\n      <Flex direction=\"column\" {...rest}>\n        <Flex align=\"flex-end\">\n          {columnDef.filterVariant === 'checkbox' ? (\n            <MRT_FilterCheckbox column={column} table={table} />\n          ) : columnDef.filterVariant === 'range-slider' ? (\n            <MRT_FilterRangeSlider header={header} table={table} />\n          ) : ['date-range', 'range'].includes(columnDef.filterVariant ?? '') ||\n            ['between', 'betweenInclusive', 'inNumberRange'].includes(\n              columnDef._filterFn,\n            ) ? (\n            <MRT_FilterRangeFields header={header} table={table} />\n          ) : (\n            <MRT_FilterTextInput header={header} table={table} />\n          )}\n          {showChangeModeButton && (\n            <Menu withinPortal={columnFilterDisplayMode !== 'popover'}>\n              <Tooltip\n                label={localization.changeFilterMode}\n                position=\"bottom-start\"\n                withinPortal\n              >\n                <Menu.Target>\n                  <ActionIcon\n                    aria-label={localization.changeFilterMode}\n                    color=\"gray\"\n                    size=\"md\"\n                    variant=\"subtle\"\n                  >\n                    <IconFilterCog />\n                  </ActionIcon>\n                </Menu.Target>\n              </Tooltip>\n              <MRT_FilterOptionMenu\n                header={header}\n                onSelect={() =>\n                  setTimeout(\n                    () => filterInputRefs.current[`${column.id}-0`]?.focus(),\n                    100,\n                  )\n                }\n                table={table}\n              />\n            </Menu>\n          )}\n        </Flex>\n        {showChangeModeButton ? (\n          <Text\n            c=\"dimmed\"\n            className={classes['filter-mode-label']}\n            component=\"label\"\n          >\n            {localization.filterMode.replace(\n              '{filterType}',\n              localizedFilterOption(localization, currentFilterOption),\n            )}\n          </Text>\n        ) : null}\n      </Flex>\n    </Collapse>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableHeadCellFilterLabel.module.css';\nimport { type MouseEvent, useState } from 'react';\nimport {\n  ActionIcon,\n  type ActionIconProps,\n  Popover,\n  Tooltip,\n  Transition,\n} from '@mantine/core';\nimport { MRT_TableHeadCellFilterContainer } from './MRT_TableHeadCellFilterContainer';\nimport { localizedFilterOption } from '../../fns/filterFns';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { dataVariable } from '../../utils/style.utils';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHeadCellFilterLabel = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: {\n      columnFilterDisplayMode,\n      icons: { IconFilter },\n      localization,\n    },\n    refs: { filterInputRefs },\n    setShowColumnFilters,\n  } = table;\n  const { column } = header;\n  const { columnDef } = column;\n\n  const filterValue = column.getFilterValue();\n\n  const [popoverOpened, setPopoverOpened] = useState(false);\n\n  const isFilterActive =\n    (Array.isArray(filterValue) && filterValue.some(Boolean)) ||\n    (!!filterValue && !Array.isArray(filterValue));\n\n  const isRangeFilter =\n    columnDef.filterVariant === 'range' ||\n    ['between', 'betweenInclusive', 'inNumberRange'].includes(\n      columnDef._filterFn,\n    );\n  const currentFilterOption = columnDef._filterFn;\n  const filterTooltip =\n    columnFilterDisplayMode === 'popover' && !isFilterActive\n      ? localization.filterByColumn?.replace(\n          '{column}',\n          String(columnDef.header),\n        )\n      : localization.filteringByColumn\n          .replace('{column}', String(columnDef.header))\n          .replace(\n            '{filterType}',\n            localizedFilterOption(localization, currentFilterOption),\n          )\n          .replace(\n            '{filterValue}',\n            `\"${\n              Array.isArray(column.getFilterValue())\n                ? (column.getFilterValue() as [string, string]).join(\n                    `\" ${isRangeFilter ? localization.and : localization.or} \"`,\n                  )\n                : (column.getFilterValue() as string)\n            }\"`,\n          )\n          .replace('\" \"', '');\n\n  return (\n    <>\n      <Popover\n        keepMounted={columnDef.filterVariant === 'range-slider'}\n        onClose={() => setPopoverOpened(false)}\n        opened={popoverOpened}\n        position=\"top\"\n        shadow=\"xl\"\n        width={360}\n        withinPortal\n      >\n        <Transition\n          mounted={\n            columnFilterDisplayMode === 'popover' ||\n            (!!column.getFilterValue() && !isRangeFilter) ||\n            (isRangeFilter &&\n              (!!(column.getFilterValue() as [any, any])?.[0] ||\n                !!(column.getFilterValue() as [any, any])?.[1]))\n          }\n          transition=\"scale\"\n        >\n          {() => (\n            <Popover.Target>\n              <Tooltip\n                disabled={popoverOpened}\n                label={filterTooltip}\n                multiline\n                w={filterTooltip.length > 40 ? 300 : undefined}\n                withinPortal\n              >\n                <ActionIcon\n                  className={clsx(\n                    'mrt-table-head-cell-filter-label-icon',\n                    classes.root,\n                  )}\n                  size={18}\n                  {...dataVariable('active', isFilterActive)}\n                  onClick={(event: MouseEvent<HTMLButtonElement>) => {\n                    event.stopPropagation();\n                    if (columnFilterDisplayMode === 'popover') {\n                      setPopoverOpened((opened) => !opened);\n                    } else {\n                      setShowColumnFilters(true);\n                    }\n                    setTimeout(() => {\n                      const input = filterInputRefs.current[`${column.id}-0`];\n                      input?.focus();\n                      input?.select();\n                    }, 100);\n                  }}\n                  {...rest}\n                >\n                  <IconFilter size=\"100%\" />\n                </ActionIcon>\n              </Tooltip>\n            </Popover.Target>\n          )}\n        </Transition>\n        {columnFilterDisplayMode === 'popover' && (\n          <Popover.Dropdown\n            onClick={(event) => event.stopPropagation()}\n            onKeyDown={(event) =>\n              event.key === 'Enter' && setPopoverOpened(false)\n            }\n            onMouseDown={(event) => event.stopPropagation()}\n          >\n            <MRT_TableHeadCellFilterContainer header={header} table={table} />\n          </Popover.Dropdown>\n        )}\n      </Popover>\n    </>\n  );\n};\n", "import { type DragEvent, type RefObject } from 'react';\nimport { type ActionIconProps } from '@mantine/core';\nimport {\n  type MRT_CellValue,\n  type MRT_Column,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { reorderColumn } from '../../utils/column.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_GrabHandleButton } from '../buttons/MRT_GrabHandleButton';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue>\n  extends ActionIconProps {\n  column: MRT_Column<TData, TValue>;\n  table: MRT_TableInstance<TData>;\n  tableHeadCellRef: RefObject<HTMLTableCellElement>;\n}\n\nexport const MRT_TableHeadCellGrabHandle = <TData extends MRT_RowData>({\n  column,\n  table,\n  tableHeadCellRef,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { enableColumnOrdering, mantineColumnDragHandleProps },\n    setColumnOrder,\n    setDraggingColumn,\n    setHoveredColumn,\n  } = table;\n  const { columnDef } = column;\n  const { columnOrder, draggingColumn, hoveredColumn } = getState();\n\n  const arg = { column, table };\n  const actionIconProps = {\n    ...parseFromValuesOrFunc(mantineColumnDragHandleProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineColumnDragHandleProps, arg),\n    ...rest,\n  };\n\n  const handleDragStart = (event: DragEvent<HTMLButtonElement>) => {\n    actionIconProps?.onDragStart?.(event);\n    setDraggingColumn(column);\n    event.dataTransfer.setDragImage(\n      tableHeadCellRef.current as HTMLElement,\n      0,\n      0,\n    );\n  };\n\n  const handleDragEnd = (event: DragEvent<HTMLButtonElement>) => {\n    actionIconProps?.onDragEnd?.(event);\n    if (hoveredColumn?.id === 'drop-zone') {\n      column.toggleGrouping();\n    } else if (\n      enableColumnOrdering &&\n      hoveredColumn &&\n      hoveredColumn?.id !== draggingColumn?.id\n    ) {\n      setColumnOrder(\n        reorderColumn(column, hoveredColumn as MRT_Column<TData>, columnOrder),\n      );\n    }\n    setDraggingColumn(null);\n    setHoveredColumn(null);\n  };\n\n  return (\n    <MRT_GrabHandleButton\n      actionIconProps={actionIconProps}\n      onDragEnd={handleDragEnd}\n      onDragStart={handleDragStart}\n      table={table}\n    />\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableHeadCellResizeHandle.module.css';\nimport { Box, type BoxProps } from '@mantine/core';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends BoxProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHeadCellResizeHandle = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { columnResizeDirection, columnResizeMode },\n    setColumnSizingInfo,\n  } = table;\n  const { density } = getState();\n  const { column } = header;\n  const handler = header.getResizeHandler();\n\n  const offset =\n    column.getIsResizing() && columnResizeMode === 'onEnd'\n      ? `translateX(${\n          (columnResizeDirection === 'rtl' ? -1 : 1) *\n          (getState().columnSizingInfo.deltaOffset ?? 0)\n        }px)`\n      : undefined;\n\n  return (\n    <Box\n      onDoubleClick={() => {\n        setColumnSizingInfo((old) => ({\n          ...old,\n          isResizingColumn: false,\n        }));\n        column.resetSize();\n      }}\n      onMouseDown={handler}\n      onTouchStart={handler}\n      role=\"separator\"\n      {...rest}\n      __vars={{ '--mrt-transform': offset, ...rest.__vars }}\n      className={clsx(\n        'mrt-table-head-cell-resize-handle',\n        classes.root,\n        classes[`root-${columnResizeDirection}`],\n        !header.subHeaders.length &&\n          columnResizeMode === 'onChange' &&\n          classes['root-hide'],\n        density,\n        rest.className,\n      )}\n    />\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableHeadCellSortLabel.module.css';\nimport {\n  ActionIcon,\n  type ActionIconProps,\n  Indicator,\n  Tooltip,\n} from '@mantine/core';\nimport { dataVariable } from '../../utils/style.utils';\nimport type { MRT_Header, MRT_RowData, MRT_TableInstance } from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends ActionIconProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHeadCellSortLabel = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      icons: { IconArrowsSort, IconSortAscending, IconSortDescending },\n      localization,\n    },\n  } = table;\n  const column = header.column;\n  const { columnDef } = column;\n  const { sorting } = getState();\n  const sorted = column.getIsSorted();\n  const sortIndex = column.getSortIndex();\n\n  const sortTooltip = sorted\n    ? sorted === 'desc'\n      ? localization.sortedByColumnDesc.replace('{column}', columnDef.header)\n      : localization.sortedByColumnAsc.replace('{column}', columnDef.header)\n    : column.getNextSortingOrder() === 'desc'\n      ? localization.sortByColumnDesc.replace('{column}', columnDef.header)\n      : localization.sortByColumnAsc.replace('{column}', columnDef.header);\n\n  const SortActionButton = (\n    <ActionIcon\n      aria-label={sortTooltip}\n      {...dataVariable('sorted', sorted)}\n      {...rest}\n      className={clsx(\n        'mrt-table-head-sort-button',\n        classes['sort-icon'],\n        rest.className,\n      )}\n    >\n      {sorted === 'desc' ? (\n        <IconSortDescending size=\"100%\" />\n      ) : sorted === 'asc' ? (\n        <IconSortAscending size=\"100%\" />\n      ) : (\n        <IconArrowsSort size=\"100%\" />\n      )}\n    </ActionIcon>\n  );\n\n  return (\n    <Tooltip label={sortTooltip} openDelay={1000} withinPortal>\n      {sorting.length < 2 || sortIndex === -1 ? (\n        SortActionButton\n      ) : (\n        <Indicator\n          className={clsx(\n            'mrt-table-head-multi-sort-indicator',\n            classes['multi-sort-indicator'],\n          )}\n          inline\n          label={sortIndex + 1}\n          offset={4}\n        >\n          {SortActionButton}\n        </Indicator>\n      )}\n    </Tooltip>\n  );\n};\n", "import classes from './MRT_ColumnActionMenu.module.css';\nimport { ActionIcon, Menu, type MenuProps, Tooltip } from '@mantine/core';\nimport {\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends MenuProps {\n  header: MRT_Header<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ColumnActionMenu = <TData extends MRT_RowData>({\n  header,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      columnFilterDisplayMode,\n      enableColumnFilters,\n      enableColumnPinning,\n      enableColumnResizing,\n      enableGrouping,\n      enableHiding,\n      enableSorting,\n      enableSortingRemoval,\n      icons: {\n        IconArrowAutofitContent,\n        IconBoxMultiple,\n        IconClearAll,\n        IconColumns,\n        IconDotsVertical,\n        IconEyeOff,\n        IconFilter,\n        IconFilterOff,\n        IconPinned,\n        IconPinnedOff,\n        IconSortAscending,\n        IconSortDescending,\n      },\n      localization,\n      mantineColumnActionsButtonProps,\n      renderColumnActionsMenuItems,\n    },\n    refs: { filterInputRefs },\n    setColumnOrder,\n    setColumnSizingInfo,\n    setShowColumnFilters,\n    toggleAllColumnsVisible,\n  } = table;\n  const { column } = header;\n  const { columnDef } = column;\n  const { columnSizing, columnVisibility } = getState();\n\n  const arg = { column, table };\n  const actionIconProps = {\n    ...parseFromValuesOrFunc(mantineColumnActionsButtonProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineColumnActionsButtonProps, arg),\n  };\n\n  const handleClearSort = () => {\n    column.clearSorting();\n  };\n\n  const handleSortAsc = () => {\n    column.toggleSorting(false);\n  };\n\n  const handleSortDesc = () => {\n    column.toggleSorting(true);\n  };\n\n  const handleResetColumnSize = () => {\n    setColumnSizingInfo((old) => ({ ...old, isResizingColumn: false }));\n    column.resetSize();\n  };\n\n  const handleHideColumn = () => {\n    column.toggleVisibility(false);\n  };\n\n  const handlePinColumn = (pinDirection: 'left' | 'right' | false) => {\n    column.pin(pinDirection);\n  };\n\n  const handleGroupByColumn = () => {\n    column.toggleGrouping();\n    setColumnOrder((old: any) => ['mrt-row-expand', ...old]);\n  };\n\n  const handleClearFilter = () => {\n    column.setFilterValue('');\n  };\n\n  const handleFilterByColumn = () => {\n    setShowColumnFilters(true);\n    setTimeout(() => filterInputRefs.current[`${column.id}-0`]?.focus(), 100);\n  };\n\n  const handleShowAllColumns = () => {\n    toggleAllColumnsVisible(true);\n  };\n\n  const internalColumnMenuItems = (\n    <>\n      {enableSorting && column.getCanSort() && (\n        <>\n          {enableSortingRemoval !== false && (\n            <Menu.Item\n              disabled={!column.getIsSorted()}\n              leftSection={<IconClearAll />}\n              onClick={handleClearSort}\n            >\n              {localization.clearSort}\n            </Menu.Item>\n          )}\n          <Menu.Item\n            disabled={column.getIsSorted() === 'asc'}\n            leftSection={<IconSortAscending />}\n            onClick={handleSortAsc}\n          >\n            {localization.sortByColumnAsc?.replace(\n              '{column}',\n              String(columnDef.header),\n            )}\n          </Menu.Item>\n          <Menu.Item\n            disabled={column.getIsSorted() === 'desc'}\n            leftSection={<IconSortDescending />}\n            onClick={handleSortDesc}\n          >\n            {localization.sortByColumnDesc?.replace(\n              '{column}',\n              String(columnDef.header),\n            )}\n          </Menu.Item>\n          {(enableColumnFilters || enableGrouping || enableHiding) && (\n            <Menu.Divider key={3} />\n          )}\n        </>\n      )}\n      {enableColumnFilters &&\n        columnFilterDisplayMode !== 'popover' &&\n        column.getCanFilter() && (\n          <>\n            <Menu.Item\n              disabled={!column.getFilterValue()}\n              leftSection={<IconFilterOff />}\n              onClick={handleClearFilter}\n            >\n              {localization.clearFilter}\n            </Menu.Item>\n            <Menu.Item\n              leftSection={<IconFilter />}\n              onClick={handleFilterByColumn}\n            >\n              {localization.filterByColumn?.replace(\n                '{column}',\n                String(columnDef.header),\n              )}\n            </Menu.Item>\n            {(enableGrouping || enableHiding) && <Menu.Divider key={2} />}\n          </>\n        )}\n      {enableGrouping && column.getCanGroup() && (\n        <>\n          <Menu.Item\n            leftSection={<IconBoxMultiple />}\n            onClick={handleGroupByColumn}\n          >\n            {localization[\n              column.getIsGrouped() ? 'ungroupByColumn' : 'groupByColumn'\n            ]?.replace('{column}', String(columnDef.header))}\n          </Menu.Item>\n          {enableColumnPinning && <Menu.Divider />}\n        </>\n      )}\n      {enableColumnPinning && column.getCanPin() && (\n        <>\n          <Menu.Item\n            disabled={column.getIsPinned() === 'left' || !column.getCanPin()}\n            leftSection={<IconPinned className={classes.left} />}\n            onClick={() => handlePinColumn('left')}\n          >\n            {localization.pinToLeft}\n          </Menu.Item>\n          <Menu.Item\n            disabled={column.getIsPinned() === 'right' || !column.getCanPin()}\n            leftSection={<IconPinned className={classes.right} />}\n            onClick={() => handlePinColumn('right')}\n          >\n            {localization.pinToRight}\n          </Menu.Item>\n          <Menu.Item\n            disabled={!column.getIsPinned()}\n            leftSection={<IconPinnedOff />}\n            onClick={() => handlePinColumn(false)}\n          >\n            {localization.unpin}\n          </Menu.Item>\n          {enableHiding && <Menu.Divider />}\n        </>\n      )}\n      {enableColumnResizing && column.getCanResize() && (\n        <Menu.Item\n          disabled={!columnSizing[column.id]}\n          key={0}\n          leftSection={<IconArrowAutofitContent />}\n          onClick={handleResetColumnSize}\n        >\n          {localization.resetColumnSize}\n        </Menu.Item>\n      )}\n      {enableHiding && (\n        <>\n          <Menu.Item\n            disabled={!column.getCanHide()}\n            key={0}\n            leftSection={<IconEyeOff />}\n            onClick={handleHideColumn}\n          >\n            {localization.hideColumn?.replace(\n              '{column}',\n              String(columnDef.header),\n            )}\n          </Menu.Item>\n          <Menu.Item\n            disabled={\n              !Object.values(columnVisibility).filter((visible) => !visible)\n                .length\n            }\n            key={1}\n            leftSection={<IconColumns />}\n            onClick={handleShowAllColumns}\n          >\n            {localization.showAllColumns?.replace(\n              '{column}',\n              String(columnDef.header),\n            )}\n          </Menu.Item>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <Menu closeOnItemClick position=\"bottom-start\" withinPortal {...rest}>\n      <Tooltip\n        label={actionIconProps?.title ?? localization.columnActions}\n        openDelay={1000}\n        withinPortal\n      >\n        <Menu.Target>\n          <ActionIcon\n            aria-label={localization.columnActions}\n            color=\"gray\"\n            size=\"sm\"\n            variant=\"subtle\"\n            {...actionIconProps}\n          >\n            <IconDotsVertical size=\"100%\" />\n          </ActionIcon>\n        </Menu.Target>\n      </Tooltip>\n      <Menu.Dropdown>\n        {columnDef.renderColumnActionsMenuItems?.({\n          column,\n          internalColumnMenuItems,\n          table,\n        }) ??\n          renderColumnActionsMenuItems?.({\n            column,\n            internalColumnMenuItems,\n            table,\n          }) ??\n          internalColumnMenuItems}\n      </Menu.Dropdown>\n    </Menu>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableHeadCell.module.css';\nimport {\n  type CSSProperties,\n  type DragEventHandler,\n  type ReactNode,\n  useMemo,\n} from 'react';\nimport { Flex, TableTh, type TableThProps, useDirection } from '@mantine/core';\nimport { MRT_TableHeadCellFilterContainer } from './MRT_TableHeadCellFilterContainer';\nimport { MRT_TableHeadCellFilterLabel } from './MRT_TableHeadCellFilterLabel';\nimport { MRT_TableHeadCellGrabHandle } from './MRT_TableHeadCellGrabHandle';\nimport { MRT_TableHeadCellResizeHandle } from './MRT_TableHeadCellResizeHandle';\nimport { MRT_TableHeadCellSortLabel } from './MRT_TableHeadCellSortLabel';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_Header,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseCSSVarId } from '../../utils/style.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_ColumnActionMenu } from '../menus/MRT_ColumnActionMenu';\n\ninterface Props<TData extends MRT_RowData> extends TableThProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  header: MRT_Header<TData>;\n  renderedHeaderIndex?: number;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHeadCell = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  header,\n  renderedHeaderIndex = 0,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const direction = useDirection();\n  const {\n    getState,\n    options: {\n      columnFilterDisplayMode,\n      columnResizeDirection,\n      columnResizeMode,\n      enableColumnActions,\n      enableColumnDragging,\n      enableColumnOrdering,\n      enableColumnPinning,\n      enableGrouping,\n      enableMultiSort,\n      layoutMode,\n      mantineTableHeadCellProps,\n    },\n    refs: { tableHeadCellRefs },\n    setHoveredColumn,\n  } = table;\n  const { columnSizingInfo, density, draggingColumn, grouping, hoveredColumn } =\n    getState();\n  const { column } = header;\n  const { columnDef } = column;\n  const { columnDefType } = columnDef;\n\n  const arg = { column, table };\n  const tableCellProps = {\n    ...parseFromValuesOrFunc(mantineTableHeadCellProps, arg),\n    ...parseFromValuesOrFunc(columnDef.mantineTableHeadCellProps, arg),\n    ...rest,\n  };\n\n  const widthStyles: CSSProperties = {\n    minWidth: `max(calc(var(--header-${parseCSSVarId(\n      header?.id,\n    )}-size) * 1px), ${columnDef.minSize ?? 30}px)`,\n    width: `calc(var(--header-${parseCSSVarId(header.id)}-size) * 1px)`,\n  };\n  if (layoutMode === 'grid') {\n    widthStyles.flex = `${\n      [0, false].includes(columnDef.grow!)\n        ? 0\n        : `var(--header-${parseCSSVarId(header.id)}-size)`\n    } 0 auto`;\n  } else if (layoutMode === 'grid-no-grow') {\n    widthStyles.flex = `${+(columnDef.grow || 0)} 0 auto`;\n  }\n\n  const isColumnPinned =\n    enableColumnPinning &&\n    columnDef.columnDefType !== 'group' &&\n    column.getIsPinned();\n\n  const isDraggingColumn = draggingColumn?.id === column.id;\n  const isHoveredColumn = hoveredColumn?.id === column.id;\n\n  const showColumnActions =\n    (enableColumnActions || columnDef.enableColumnActions) &&\n    columnDef.enableColumnActions !== false;\n\n  const showDragHandle =\n    enableColumnDragging !== false &&\n    columnDef.enableColumnDragging !== false &&\n    (enableColumnDragging ||\n      (enableColumnOrdering && columnDef.enableColumnOrdering !== false) ||\n      (enableGrouping &&\n        columnDef.enableGrouping !== false &&\n        !grouping.includes(column.id)));\n\n  const headerPL = useMemo(() => {\n    let pl = 0;\n    if (column.getCanSort()) pl++;\n    if (showColumnActions) pl += 1.75;\n    if (showDragHandle) pl += 1.25;\n    return pl;\n  }, [showColumnActions, showDragHandle]);\n\n  const handleDragEnter: DragEventHandler<HTMLTableCellElement> = (_e) => {\n    if (enableGrouping && hoveredColumn?.id === 'drop-zone') {\n      setHoveredColumn(null);\n    }\n    if (enableColumnOrdering && draggingColumn && columnDefType !== 'group') {\n      setHoveredColumn(\n        columnDef.enableColumnOrdering !== false ? column : null,\n      );\n    }\n  };\n\n  const headerElement =\n    columnDef?.Header instanceof Function\n      ? columnDef?.Header?.({\n          column,\n          header,\n          table,\n        })\n      : columnDef?.Header ?? (columnDef.header as ReactNode);\n\n  return (\n    <TableTh\n      colSpan={header.colSpan}\n      data-column-pinned={isColumnPinned || undefined}\n      data-dragging-column={isDraggingColumn || undefined}\n      data-first-right-pinned={\n        (isColumnPinned === 'right' &&\n          column.getIsLastColumn(isColumnPinned)) ||\n        undefined\n      }\n      data-hovered-column-target={isHoveredColumn || undefined}\n      data-index={renderedHeaderIndex}\n      data-last-left-pinned={\n        (isColumnPinned === 'left' && column.getIsLastColumn(isColumnPinned)) ||\n        undefined\n      }\n      data-resizing={\n        (columnResizeMode === 'onChange' &&\n          columnSizingInfo?.isResizingColumn === column.id &&\n          columnResizeDirection) ||\n        undefined\n      }\n      {...tableCellProps}\n      __vars={{\n        '--mrt-table-cell-left':\n          isColumnPinned === 'left'\n            ? `${column.getStart(isColumnPinned)}`\n            : undefined,\n        '--mrt-table-cell-right':\n          isColumnPinned === 'right'\n            ? `${column.getAfter(isColumnPinned)}`\n            : undefined,\n        '--mrt-table-head-cell-padding':\n          density === 'xl' ? '23' : density === 'md' ? '16' : '10',\n      }}\n      align={\n        columnDefType === 'group'\n          ? 'center'\n          : direction.dir === 'rtl'\n            ? 'right'\n            : 'left'\n      }\n      className={clsx(\n        classes.root,\n        layoutMode?.startsWith('grid') && classes['root-grid'],\n        enableMultiSort && column.getCanSort() && classes['root-no-select'],\n        columnVirtualizer && classes['root-virtualized'],\n        tableCellProps?.className,\n      )}\n      onDragEnter={handleDragEnter}\n      ref={(node: HTMLTableCellElement) => {\n        if (node) {\n          tableHeadCellRefs.current[column.id] = node;\n          if (columnDefType !== 'group') {\n            columnVirtualizer?.measureElement?.(node);\n          }\n        }\n      }}\n      style={(theme) => ({\n        ...widthStyles,\n        ...parseFromValuesOrFunc(tableCellProps?.style, theme),\n      })}\n    >\n      {header.isPlaceholder\n        ? null\n        : tableCellProps.children ?? (\n            <Flex\n              className={clsx(\n                'mrt-table-head-cell-content',\n                classes.content,\n                (columnDefType === 'group' ||\n                  tableCellProps?.align === 'center') &&\n                  classes['content-center'],\n                tableCellProps?.align === 'right' && classes['content-right'],\n                column.getCanResize() && classes['content-spaced'],\n              )}\n            >\n              <Flex\n                __vars={{\n                  '--mrt-table-head-cell-labels-padding-left': `${headerPL}`,\n                }}\n                className={clsx(\n                  'mrt-table-head-cell-labels',\n                  classes.labels,\n                  column.getCanSort() &&\n                    columnDefType !== 'group' &&\n                    classes['labels-sortable'],\n                  tableCellProps?.align === 'right'\n                    ? classes['labels-right']\n                    : tableCellProps?.align === 'center' &&\n                        classes['labels-center'],\n                  columnDefType === 'data' && classes['labels-data'],\n                )}\n                onClick={column.getToggleSortingHandler()}\n              >\n                <Flex\n                  className={clsx(\n                    'mrt-table-head-cell-content-wrapper',\n                    classes['content-wrapper'],\n                    columnDefType === 'data' &&\n                      classes['content-wrapper-hidden-overflow'],\n                    (columnDef.header?.length ?? 0) < 20 &&\n                      classes['content-wrapper-nowrap'],\n                  )}\n                >\n                  {headerElement}\n                </Flex>\n                {column.getCanFilter() && (\n                  <MRT_TableHeadCellFilterLabel header={header} table={table} />\n                )}\n                {column.getCanSort() && (\n                  <MRT_TableHeadCellSortLabel header={header} table={table} />\n                )}\n              </Flex>\n              {columnDefType !== 'group' && (\n                <Flex\n                  className={clsx(\n                    'mrt-table-head-cell-content-actions',\n                    classes['content-actions'],\n                  )}\n                >\n                  {showDragHandle && (\n                    <MRT_TableHeadCellGrabHandle\n                      column={column}\n                      table={table}\n                      tableHeadCellRef={{\n                        current: tableHeadCellRefs.current[column.id],\n                      }}\n                    />\n                  )}\n                  {showColumnActions && (\n                    <MRT_ColumnActionMenu header={header} table={table} />\n                  )}\n                </Flex>\n              )}\n              {column.getCanResize() && (\n                <MRT_TableHeadCellResizeHandle header={header} table={table} />\n              )}\n            </Flex>\n          )}\n      {columnFilterDisplayMode === 'subheader' && column.getCanFilter() && (\n        <MRT_TableHeadCellFilterContainer header={header} table={table} />\n      )}\n    </TableTh>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableHeadRow.module.css';\nimport { Box, TableTr, type TableTrProps } from '@mantine/core';\nimport { MRT_TableHeadCell } from './MRT_TableHeadCell';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_Header,\n  type MRT_HeaderGroup,\n  type MRT_RowData,\n  type MRT_TableInstance,\n  type MRT_VirtualItem,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends TableTrProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  headerGroup: MRT_HeaderGroup<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHeadRow = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  headerGroup,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { enableStickyHeader, layoutMode, mantineTableHeadRowProps },\n  } = table;\n  const { isFullScreen } = getState();\n\n  const { virtualColumns, virtualPaddingLeft, virtualPaddingRight } =\n    columnVirtualizer ?? {};\n\n  const tableRowProps = {\n    ...parseFromValuesOrFunc(mantineTableHeadRowProps, {\n      headerGroup,\n      table,\n    }),\n    ...rest,\n  };\n\n  return (\n    <TableTr\n      {...tableRowProps}\n      className={clsx(\n        classes.root,\n        (enableStickyHeader || isFullScreen) && classes.sticky,\n        layoutMode?.startsWith('grid') && classes['layout-mode-grid'],\n        tableRowProps?.className,\n      )}\n    >\n      {virtualPaddingLeft ? (\n        <Box component=\"th\" display=\"flex\" w={virtualPaddingLeft} />\n      ) : null}\n      {(virtualColumns ?? headerGroup.headers).map(\n        (headerOrVirtualHeader, renderedHeaderIndex) => {\n          let header = headerOrVirtualHeader as MRT_Header<TData>;\n          if (columnVirtualizer) {\n            renderedHeaderIndex = (headerOrVirtualHeader as MRT_VirtualItem)\n              .index;\n            header = headerGroup.headers[renderedHeaderIndex];\n          }\n\n          return (\n            <MRT_TableHeadCell\n              columnVirtualizer={columnVirtualizer}\n              header={header}\n              key={header.id}\n              renderedHeaderIndex={renderedHeaderIndex}\n              table={table}\n            />\n          );\n        },\n      )}\n      {virtualPaddingRight ? (\n        <Box component=\"th\" display=\"flex\" w={virtualPaddingRight} />\n      ) : null}\n    </TableTr>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ToolbarAlertBanner.module.css';\nimport { Fragment, useMemo } from 'react';\nimport {\n  ActionIcon,\n  Alert,\n  type AlertProps,\n  Badge,\n  Button,\n  Collapse,\n  Flex,\n  Stack,\n} from '@mantine/core';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { getMRT_SelectAllHandler } from '../../utils/row.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_SelectCheckbox } from '../inputs/MRT_SelectCheckbox';\n\ninterface Props<TData extends MRT_RowData> extends Partial<AlertProps> {\n  stackAlertBanner?: boolean;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToolbarAlertBanner = <TData extends MRT_RowData>({\n  stackAlertBanner,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getFilteredSelectedRowModel,\n    getPrePaginationRowModel,\n    getState,\n    options: {\n      enableRowSelection,\n      enableSelectAll,\n      icons: { IconX },\n      localization,\n      mantineToolbarAlertBannerBadgeProps,\n      mantineToolbarAlertBannerProps,\n      manualPagination,\n      positionToolbarAlertBanner,\n      renderToolbarAlertBannerContent,\n      rowCount,\n    },\n  } = table;\n  const { density, grouping, rowSelection, showAlertBanner } = getState();\n\n  const alertProps = {\n    ...parseFromValuesOrFunc(mantineToolbarAlertBannerProps, {\n      table,\n    }),\n    ...rest,\n  };\n  const badgeProps = parseFromValuesOrFunc(\n    mantineToolbarAlertBannerBadgeProps,\n    { table },\n  );\n\n  const totalRowCount = rowCount ?? getPrePaginationRowModel().flatRows.length;\n\n  const selectedRowCount = useMemo(\n    () =>\n      manualPagination\n        ? Object.values(rowSelection).filter(Boolean).length\n        : getFilteredSelectedRowModel().rows.length,\n    [rowSelection, totalRowCount, manualPagination],\n  );\n\n  const selectedAlert = selectedRowCount ? (\n    <Flex align=\"center\" gap=\"sm\">\n      {localization.selectedCountOfRowCountRowsSelected\n        ?.replace('{selectedCount}', selectedRowCount.toString())\n        ?.replace('{rowCount}', totalRowCount.toString())}\n      <Button\n        onClick={(event) =>\n          getMRT_SelectAllHandler({ table })(event, false, true)\n        }\n        size=\"compact-xs\"\n        variant=\"subtle\"\n      >\n        {localization.clearSelection}\n      </Button>\n    </Flex>\n  ) : null;\n\n  const groupedAlert =\n    grouping.length > 0 ? (\n      <Flex>\n        {localization.groupedBy}{' '}\n        {grouping.map((columnId, index) => (\n          <Fragment key={`${index}-${columnId}`}>\n            {index > 0 ? localization.thenBy : ''}\n            <Badge\n              className={classes['alert-badge']}\n              rightSection={\n                <ActionIcon\n                  color=\"white\"\n                  onClick={() => table.getColumn(columnId).toggleGrouping()}\n                  size=\"xs\"\n                  variant=\"subtle\"\n                >\n                  <IconX style={{ transform: 'scale(0.8)' }} />\n                </ActionIcon>\n              }\n              variant=\"filled\"\n              {...badgeProps}\n            >\n              {table.getColumn(columnId).columnDef.header}{' '}\n            </Badge>\n          </Fragment>\n        ))}\n      </Flex>\n    ) : null;\n\n  return (\n    <Collapse\n      in={showAlertBanner || !!selectedAlert || !!groupedAlert}\n      transitionDuration={stackAlertBanner ? 200 : 0}\n    >\n      <Alert\n        color=\"blue\"\n        icon={false}\n        {...alertProps}\n        className={clsx(\n          classes.alert,\n          stackAlertBanner &&\n            !positionToolbarAlertBanner &&\n            classes['alert-stacked'],\n          !stackAlertBanner &&\n            positionToolbarAlertBanner === 'bottom' &&\n            classes['alert-bottom'],\n          alertProps?.className,\n        )}\n      >\n        {renderToolbarAlertBannerContent?.({\n          groupedAlert,\n          selectedAlert,\n          table,\n        }) ?? (\n          <Flex\n            className={clsx(\n              classes['toolbar-alert'],\n              positionToolbarAlertBanner === 'head-overlay' &&\n                classes['head-overlay'],\n              density,\n            )}\n          >\n            {enableRowSelection &&\n              enableSelectAll &&\n              positionToolbarAlertBanner === 'head-overlay' && (\n                <MRT_SelectCheckbox table={table} />\n              )}\n            <Stack>\n              {alertProps?.children}\n              {selectedAlert}\n              {groupedAlert}\n            </Stack>\n          </Flex>\n        )}\n      </Alert>\n    </Collapse>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableHead.module.css';\nimport {\n  TableTh,\n  TableThead,\n  type TableTheadProps,\n  TableTr,\n} from '@mantine/core';\nimport { MRT_TableHeadRow } from './MRT_TableHeadRow';\nimport {\n  type MRT_ColumnVirtualizer,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_ToolbarAlertBanner } from '../toolbar/MRT_ToolbarAlertBanner';\n\ninterface Props<TData extends MRT_RowData> extends TableTheadProps {\n  columnVirtualizer?: MRT_ColumnVirtualizer;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableHead = <TData extends MRT_RowData>({\n  columnVirtualizer,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getHeaderGroups,\n    getSelectedRowModel,\n    getState,\n    options: {\n      enableStickyHeader,\n      layoutMode,\n      mantineTableHeadProps,\n      positionToolbarAlertBanner,\n    },\n    refs: { tableHeadRef },\n  } = table;\n  const { isFullScreen, showAlertBanner } = getState();\n\n  const tableHeadProps = {\n    ...parseFromValuesOrFunc(mantineTableHeadProps, {\n      table,\n    }),\n    ...rest,\n  };\n\n  const stickyHeader = enableStickyHeader || isFullScreen;\n\n  return (\n    <TableThead\n      {...tableHeadProps}\n      className={clsx(\n        classes.root,\n        layoutMode?.startsWith('grid')\n          ? classes['root-grid']\n          : classes['root-table-row-group'],\n        stickyHeader && classes['root-sticky'],\n        tableHeadProps?.className,\n      )}\n      pos={\n        stickyHeader && layoutMode?.startsWith('grid') ? 'sticky' : 'relative'\n      }\n      ref={(ref: HTMLTableSectionElement) => {\n        tableHeadRef.current = ref;\n        if (tableHeadProps?.ref) {\n          // @ts-ignore\n          tableHeadProps.ref.current = ref;\n        }\n      }}\n    >\n      {positionToolbarAlertBanner === 'head-overlay' &&\n      (showAlertBanner || getSelectedRowModel().rows.length > 0) ? (\n        <TableTr\n          className={clsx(\n            classes['banner-tr'],\n            layoutMode?.startsWith('grid') && classes.grid,\n          )}\n        >\n          <TableTh\n            className={clsx(\n              classes['banner-th'],\n              layoutMode?.startsWith('grid') && classes.grid,\n            )}\n            colSpan={table.getVisibleLeafColumns().length}\n          >\n            <MRT_ToolbarAlertBanner table={table} />\n          </TableTh>\n        </TableTr>\n      ) : (\n        getHeaderGroups().map((headerGroup) => (\n          <MRT_TableHeadRow\n            columnVirtualizer={columnVirtualizer}\n            headerGroup={headerGroup as any}\n            key={headerGroup.id}\n            table={table}\n          />\n        ))\n      )}\n    </TableThead>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_Table.module.css';\nimport { useMemo } from 'react';\nimport {\n  Table,\n  type TableProps,\n  darken,\n  lighten,\n  useMantineColorScheme,\n} from '@mantine/core';\nimport { useMRT_ColumnVirtualizer } from '../../hooks/useMRT_ColumnVirtualizer';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseCSSVarId } from '../../utils/style.utils';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_TableBody, Memo_MRT_TableBody } from '../body/MRT_TableBody';\nimport { MRT_TableFooter } from '../footer/MRT_TableFooter';\nimport { MRT_TableHead } from '../head/MRT_TableHead';\n\ninterface Props<TData extends MRT_RowData> extends TableProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_Table = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getFlatHeaders,\n    getState,\n    options: {\n      columns,\n      enableTableFooter,\n      enableTableHead,\n      layoutMode,\n      mantineTableProps,\n      memoMode,\n    },\n  } = table;\n  const { columnSizing, columnSizingInfo, columnVisibility, density } =\n    getState();\n\n  const tableProps = {\n    highlightOnHover: true,\n    horizontalSpacing: density,\n    verticalSpacing: density,\n    ...parseFromValuesOrFunc(mantineTableProps, { table }),\n    ...rest,\n  };\n\n  const columnSizeVars = useMemo(() => {\n    const headers = getFlatHeaders();\n    const colSizes: { [key: string]: number } = {};\n    for (let i = 0; i < headers.length; i++) {\n      const header = headers[i];\n      const colSize = header.getSize();\n      colSizes[`--header-${parseCSSVarId(header.id)}-size`] = colSize;\n      colSizes[`--col-${parseCSSVarId(header.column.id)}-size`] = colSize;\n    }\n    return colSizes;\n  }, [columns, columnSizing, columnSizingInfo, columnVisibility]);\n\n  const columnVirtualizer = useMRT_ColumnVirtualizer(table);\n\n  const commonTableGroupProps = {\n    columnVirtualizer,\n    table,\n  };\n\n  const { colorScheme } = useMantineColorScheme();\n\n  const { stripedColor } = tableProps;\n\n  return (\n    <Table\n      className={clsx(\n        'mrt-table',\n        classes.root,\n        layoutMode?.startsWith('grid') && classes['root-grid'],\n        tableProps.className,\n      )}\n      {...tableProps}\n      __vars={{\n        ...columnSizeVars,\n        '--mrt-striped-row-background-color': stripedColor,\n        '--mrt-striped-row-hover-background-color': stripedColor\n          ? colorScheme === 'dark'\n            ? lighten(stripedColor, 0.08)\n            : darken(stripedColor, 0.12)\n          : undefined,\n        ...tableProps.__vars,\n      }}\n    >\n      {enableTableHead && <MRT_TableHead {...commonTableGroupProps} />}\n      {memoMode === 'table-body' || columnSizingInfo.isResizingColumn ? (\n        <Memo_MRT_TableBody\n          {...commonTableGroupProps}\n          tableProps={tableProps}\n        />\n      ) : (\n        <MRT_TableBody {...commonTableGroupProps} tableProps={tableProps} />\n      )}\n      {enableTableFooter && <MRT_TableFooter {...commonTableGroupProps} />}\n    </Table>\n  );\n};\n", "import { Flex, Modal, type ModalProps, Stack } from '@mantine/core';\nimport {\n  type MRT_Row,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_EditActionButtons } from '../buttons/MRT_EditActionButtons';\nimport { MRT_EditCellTextInput } from '../inputs/MRT_EditCellTextInput';\n\ninterface Props<TData extends MRT_RowData> extends Partial<ModalProps> {\n  open: boolean;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_EditRowModal = <TData extends MRT_RowData>({\n  open,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      mantineCreateRowModalProps,\n      mantineEditRowModalProps,\n      onCreatingRowCancel,\n      onEditingRowCancel,\n      renderCreateRowModalContent,\n      renderEditRowModalContent,\n    },\n    setCreatingRow,\n    setEditingRow,\n  } = table;\n  const { creatingRow, editingRow } = getState();\n  const row = (creatingRow ?? editingRow) as MRT_Row<TData>;\n\n  const arg = { row, table };\n  const modalProps = {\n    ...parseFromValuesOrFunc(mantineEditRowModalProps, arg),\n    ...(creatingRow && parseFromValuesOrFunc(mantineCreateRowModalProps, arg)),\n    ...rest,\n  };\n\n  const internalEditComponents = row\n    .getAllCells()\n    .filter((cell) => cell.column.columnDef.columnDefType === 'data')\n    .map((cell) => (\n      <MRT_EditCellTextInput cell={cell} key={cell.id} table={table} />\n    ));\n\n  const handleCancel = () => {\n    if (creatingRow) {\n      onCreatingRowCancel?.({ row, table });\n      setCreatingRow(null);\n    } else {\n      onEditingRowCancel?.({ row, table });\n      setEditingRow(null);\n    }\n    row._valuesCache = {} as any; //reset values cache\n    modalProps.onClose?.();\n  };\n\n  return (\n    <Modal\n      opened={open}\n      withCloseButton={false}\n      {...modalProps}\n      key={row.id}\n      onClose={handleCancel}\n    >\n      {((creatingRow &&\n        renderCreateRowModalContent?.({\n          internalEditComponents,\n          row,\n          table,\n        })) ||\n        renderEditRowModalContent?.({\n          internalEditComponents,\n          row,\n          table,\n        })) ?? (\n        <>\n          <form onSubmit={(e) => e.preventDefault()}>\n            <Stack gap=\"lg\" pb={24} pt={16}>\n              {internalEditComponents}\n            </Stack>\n          </form>\n          <Flex justify=\"flex-end\">\n            <MRT_EditActionButtons row={row} table={table} variant=\"text\" />\n          </Flex>\n        </>\n      )}\n    </Modal>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TableContainer.module.css';\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport { Box, type BoxProps, LoadingOverlay } from '@mantine/core';\nimport { MRT_Table } from './MRT_Table';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_EditRowModal } from '../modals/MRT_EditRowModal';\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\ninterface Props<TData extends MRT_RowData> extends BoxProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TableContainer = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      createDisplayMode,\n      editDisplayMode,\n      enableStickyHeader,\n      mantineLoadingOverlayProps,\n      mantineTableContainerProps,\n    },\n    refs: { bottomToolbarRef, tableContainerRef, topToolbarRef },\n  } = table;\n  const {\n    creatingRow,\n    editingRow,\n    isFullScreen,\n    isLoading,\n    showLoadingOverlay,\n  } = getState();\n\n  const [totalToolbarHeight, setTotalToolbarHeight] = useState(0);\n\n  const tableContainerProps = {\n    ...parseFromValuesOrFunc(mantineTableContainerProps, { table }),\n    ...rest,\n  };\n  const loadingOverlayProps = parseFromValuesOrFunc(\n    mantineLoadingOverlayProps,\n    { table },\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    const topToolbarHeight =\n      typeof document !== 'undefined'\n        ? topToolbarRef.current?.offsetHeight ?? 0\n        : 0;\n\n    const bottomToolbarHeight =\n      typeof document !== 'undefined'\n        ? bottomToolbarRef?.current?.offsetHeight ?? 0\n        : 0;\n\n    setTotalToolbarHeight(topToolbarHeight + bottomToolbarHeight);\n  });\n\n  const createModalOpen = createDisplayMode === 'modal' && creatingRow;\n  const editModalOpen = editDisplayMode === 'modal' && editingRow;\n\n  return (\n    <Box\n      {...tableContainerProps}\n      __vars={{\n        '--mrt-top-toolbar-height': `${totalToolbarHeight}`,\n        ...tableContainerProps?.__vars,\n      }}\n      className={clsx(\n        'mrt-table-container',\n        classes.root,\n        enableStickyHeader && classes['root-sticky'],\n        isFullScreen && classes['root-fullscreen'],\n        tableContainerProps?.className,\n      )}\n      ref={(node: HTMLDivElement) => {\n        if (node) {\n          tableContainerRef.current = node;\n          if (tableContainerProps?.ref) {\n            //@ts-ignore\n            tableContainerProps.ref.current = node;\n          }\n        }\n      }}\n    >\n      <LoadingOverlay\n        visible={isLoading || showLoadingOverlay}\n        zIndex={2}\n        {...loadingOverlayProps}\n      />\n      <MRT_Table table={table} />\n      {(createModalOpen || editModalOpen) && (\n        <MRT_EditRowModal open table={table} />\n      )}\n    </Box>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ProgressBar.module.css';\nimport { Collapse, Progress, type ProgressProps } from '@mantine/core';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends Partial<ProgressProps> {\n  isTopToolbar: boolean;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ProgressBar = <TData extends MRT_RowData>({\n  isTopToolbar,\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { mantineProgressProps },\n  } = table;\n  const { isSaving, showProgressBars } = getState();\n\n  const linearProgressProps = {\n    ...parseFromValuesOrFunc(mantineProgressProps, {\n      isTopToolbar,\n      table,\n    }),\n    ...rest,\n  };\n\n  return (\n    <Collapse\n      className={clsx(\n        classes.collapse,\n        isTopToolbar && classes['collapse-top'],\n      )}\n      in={isSaving || showProgressBars}\n    >\n      <Progress\n        animated\n        aria-busy=\"true\"\n        aria-label=\"Loading\"\n        radius={0}\n        value={100}\n        {...linearProgressProps}\n      />\n    </Collapse>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TablePagination.module.css';\nimport {\n  ActionIcon,\n  Box,\n  Group,\n  Pagination,\n  type PaginationProps,\n  Select,\n  Text,\n} from '@mantine/core';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\nconst defaultRowsPerPage = [5, 10, 15, 20, 25, 30, 50, 100].map((x) =>\n  x.toString(),\n);\n\ninterface Props<TData extends MRT_RowData> extends Partial<PaginationProps> {\n  position?: 'bottom' | 'top';\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TablePagination = <TData extends MRT_RowData>({\n  position = 'bottom',\n  table,\n  ...props\n}: Props<TData>) => {\n  const {\n    getPrePaginationRowModel,\n    getState,\n    options: {\n      enableToolbarInternalActions,\n      icons: {\n        IconChevronLeft,\n        IconChevronLeftPipe,\n        IconChevronRight,\n        IconChevronRightPipe,\n      },\n      localization,\n      mantinePaginationProps,\n      paginationDisplayMode,\n      rowCount,\n    },\n    setPageIndex,\n    setPageSize,\n  } = table;\n  const {\n    pagination: { pageIndex = 0, pageSize = 10 },\n    showGlobalFilter,\n  } = getState();\n\n  const paginationProps = {\n    ...parseFromValuesOrFunc(mantinePaginationProps, {\n      table,\n    }),\n    ...props,\n  };\n\n  const totalRowCount = rowCount ?? getPrePaginationRowModel().rows.length;\n  const numberOfPages = Math.ceil(totalRowCount / pageSize);\n  const showFirstLastPageButtons = numberOfPages > 2;\n  const firstRowIndex = pageIndex * pageSize;\n  const lastRowIndex = Math.min(pageIndex * pageSize + pageSize, totalRowCount);\n\n  const {\n    rowsPerPageOptions = defaultRowsPerPage,\n    showRowsPerPage = true,\n    withEdges = showFirstLastPageButtons,\n    ...rest\n  } = paginationProps ?? {};\n\n  const needsTopMargin =\n    position === 'top' && enableToolbarInternalActions && !showGlobalFilter;\n\n  return (\n    <Box\n      className={clsx(\n        'mrt-table-pagination',\n        classes.root,\n        needsTopMargin && classes['with-top-margin'],\n      )}\n    >\n      {paginationProps?.showRowsPerPage !== false && (\n        <Group gap=\"xs\">\n          <Text id=\"rpp-label\">{localization.rowsPerPage}</Text>\n          <Select\n            allowDeselect={false}\n            aria-labelledby=\"rpp-label\"\n            className={classes.pagesize}\n            data={paginationProps?.rowsPerPageOptions ?? defaultRowsPerPage}\n            onChange={(value: null | string) => setPageSize(+(value as string))}\n            value={pageSize.toString()}\n          />\n        </Group>\n      )}\n      {paginationDisplayMode === 'pages' ? (\n        <Pagination\n          firstIcon={IconChevronLeftPipe}\n          lastIcon={IconChevronRightPipe}\n          nextIcon={IconChevronRight}\n          onChange={(newPageIndex) => setPageIndex(newPageIndex - 1)}\n          previousIcon={IconChevronLeft}\n          total={numberOfPages}\n          value={pageIndex + 1}\n          withEdges={withEdges}\n          {...rest}\n        />\n      ) : paginationDisplayMode === 'default' ? (\n        <>\n          <Text>{`${\n            lastRowIndex === 0 ? 0 : (firstRowIndex + 1).toLocaleString()\n          }-${lastRowIndex.toLocaleString()} ${\n            localization.of\n          } ${totalRowCount.toLocaleString()}`}</Text>\n          <Group gap={6}>\n            {withEdges && (\n              <ActionIcon\n                aria-label={localization.goToFirstPage}\n                color=\"gray\"\n                disabled={pageIndex <= 0}\n                onClick={() => setPageIndex(0)}\n                variant=\"subtle\"\n              >\n                <IconChevronLeftPipe />\n              </ActionIcon>\n            )}\n            <ActionIcon\n              aria-label={localization.goToPreviousPage}\n              color=\"gray\"\n              disabled={pageIndex <= 0}\n              onClick={() => setPageIndex(pageIndex - 1)}\n              variant=\"subtle\"\n            >\n              <IconChevronLeft />\n            </ActionIcon>\n            <ActionIcon\n              aria-label={localization.goToNextPage}\n              color=\"gray\"\n              disabled={lastRowIndex >= totalRowCount}\n              onClick={() => setPageIndex(pageIndex + 1)}\n              variant=\"subtle\"\n            >\n              <IconChevronRight />\n            </ActionIcon>\n            {withEdges && (\n              <ActionIcon\n                aria-label={localization.goToLastPage}\n                color=\"gray\"\n                disabled={lastRowIndex >= totalRowCount}\n                onClick={() => setPageIndex(numberOfPages - 1)}\n                variant=\"subtle\"\n              >\n                <IconChevronRightPipe />\n              </ActionIcon>\n            )}\n          </Group>\n        </>\n      ) : null}\n    </Box>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ToolbarDropZone.module.css';\nimport { type DragEvent, useEffect } from 'react';\nimport { Flex, type FlexProps, Text, Transition } from '@mantine/core';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\n\ninterface Props<TData extends MRT_RowData> extends FlexProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToolbarDropZone = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: { enableGrouping, localization },\n    setHoveredColumn,\n    setShowToolbarDropZone,\n  } = table;\n\n  const { draggingColumn, grouping, hoveredColumn, showToolbarDropZone } =\n    getState();\n\n  const handleDragEnter = (_event: DragEvent<HTMLDivElement>) => {\n    setHoveredColumn({ id: 'drop-zone' });\n  };\n\n  useEffect(() => {\n    if (table.options.state?.showToolbarDropZone !== undefined) {\n      setShowToolbarDropZone(\n        !!enableGrouping &&\n          !!draggingColumn &&\n          draggingColumn.columnDef.enableGrouping !== false &&\n          !grouping.includes(draggingColumn.id),\n      );\n    }\n  }, [enableGrouping, draggingColumn, grouping]);\n\n  return (\n    <Transition mounted={showToolbarDropZone} transition=\"fade\">\n      {() => (\n        <Flex\n          className={clsx(\n            'mrt-toolbar-dropzone',\n            classes.root,\n            hoveredColumn?.id === 'drop-zone' && classes.hovered,\n          )}\n          onDragEnter={handleDragEnter}\n          {...rest}\n        >\n          <Text>\n            {localization.dropToGroupBy.replace(\n              '{column}',\n              draggingColumn?.columnDef?.header ?? '',\n            )}\n          </Text>\n        </Flex>\n      )}\n    </Transition>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_BottomToolbar.module.css';\nimport commonClasses from './common.styles.module.css';\nimport { Box, type BoxProps } from '@mantine/core';\nimport { useMediaQuery } from '@mantine/hooks';\nimport { MRT_ProgressBar } from './MRT_ProgressBar';\nimport { MRT_TablePagination } from './MRT_TablePagination';\nimport { MRT_ToolbarAlertBanner } from './MRT_ToolbarAlertBanner';\nimport { MRT_ToolbarDropZone } from './MRT_ToolbarDropZone';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\n\ninterface Props<TData extends MRT_RowData> extends BoxProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_BottomToolbar = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      enablePagination,\n      mantineBottomToolbarProps,\n      positionPagination,\n      positionToolbarAlertBanner,\n      positionToolbarDropZone,\n      renderBottomToolbarCustomActions,\n    },\n    refs: { bottomToolbarRef },\n  } = table;\n  const { isFullScreen } = getState();\n\n  const isMobile = useMediaQuery('(max-width: 720px)');\n\n  const toolbarProps = {\n    ...parseFromValuesOrFunc(mantineBottomToolbarProps, {\n      table,\n    }),\n    ...rest,\n  };\n\n  const stackAlertBanner = isMobile || !!renderBottomToolbarCustomActions;\n\n  return (\n    <Box\n      {...toolbarProps}\n      className={clsx(\n        'mrt-bottom-toolbar',\n        classes.root,\n        commonClasses['common-toolbar-styles'],\n        isFullScreen && classes['root-fullscreen'],\n        toolbarProps?.className,\n      )}\n      ref={(node: HTMLDivElement) => {\n        if (node) {\n          bottomToolbarRef.current = node;\n          if (toolbarProps?.ref) {\n            toolbarProps.ref.current = node;\n          }\n        }\n      }}\n    >\n      <MRT_ProgressBar isTopToolbar={false} table={table} />\n      {positionToolbarAlertBanner === 'bottom' && (\n        <MRT_ToolbarAlertBanner\n          stackAlertBanner={stackAlertBanner}\n          table={table}\n        />\n      )}\n      {['both', 'bottom'].includes(positionToolbarDropZone ?? '') && (\n        <MRT_ToolbarDropZone table={table} />\n      )}\n      <Box className={classes['custom-toolbar-container']}>\n        {renderBottomToolbarCustomActions ? (\n          renderBottomToolbarCustomActions({ table })\n        ) : (\n          <span />\n        )}\n        <Box\n          className={clsx(\n            classes['paginator-container'],\n            stackAlertBanner && classes['paginator-container-alert-banner'],\n          )}\n        >\n          {enablePagination &&\n            ['both', 'bottom'].includes(positionPagination ?? '') && (\n              <MRT_TablePagination position=\"bottom\" table={table} />\n            )}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ColumnPinningButtons.module.css';\nimport { ActionIcon, Flex, Tooltip } from '@mantine/core';\nimport {\n  type MRT_Column,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData> {\n  column: MRT_Column<TData>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ColumnPinningButtons = <TData extends MRT_RowData>({\n  column,\n  table,\n}: Props<TData>) => {\n  const {\n    options: {\n      icons: { IconPinned, IconPinnedOff },\n      localization,\n    },\n  } = table;\n  return (\n    <Flex className={clsx('mrt-column-pinning-buttons', classes.root)}>\n      {column.getIsPinned() ? (\n        <Tooltip label={localization.unpin} withinPortal>\n          <ActionIcon\n            color=\"gray\"\n            onClick={() => column.pin(false)}\n            size=\"md\"\n            variant=\"subtle\"\n          >\n            <IconPinnedOff />\n          </ActionIcon>\n        </Tooltip>\n      ) : (\n        <>\n          <Tooltip label={localization.pinToLeft} withinPortal>\n            <ActionIcon\n              color=\"gray\"\n              onClick={() => column.pin('left')}\n              size=\"md\"\n              variant=\"subtle\"\n            >\n              <IconPinned className={classes.left} />\n            </ActionIcon>\n          </Tooltip>\n          <Tooltip label={localization.pinToRight} withinPortal>\n            <ActionIcon\n              color=\"gray\"\n              onClick={() => column.pin('right')}\n              size=\"md\"\n              variant=\"subtle\"\n            >\n              <IconPinned className={classes.right} />\n            </ActionIcon>\n          </Tooltip>\n        </>\n      )}\n    </Flex>\n  );\n};\n", "import classes from './MRT_ShowHideColumnsMenuItems.module.css';\nimport {\n  type Dispatch,\n  type DragEvent,\n  type SetStateAction,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  Box,\n  Menu,\n  Switch,\n  Text,\n  Tooltip,\n  useMantineTheme,\n} from '@mantine/core';\nimport {\n  type MRT_CellValue,\n  type MRT_Column,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { reorderColumn } from '../../utils/column.utils';\nimport { dataVariable, getPrimaryColor } from '../../utils/style.utils';\nimport { MRT_ColumnPinningButtons } from '../buttons/MRT_ColumnPinningButtons';\nimport { MRT_GrabHandleButton } from '../buttons/MRT_GrabHandleButton';\n\ninterface Props<TData extends MRT_RowData, TValue = MRT_CellValue> {\n  allColumns: MRT_Column<TData>[];\n  column: MRT_Column<TData, TValue>;\n  hoveredColumn: MRT_Column<TData> | null;\n  setHoveredColumn: Dispatch<SetStateAction<MRT_Column<TData> | null>>;\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ShowHideColumnsMenuItems = <TData extends MRT_RowData>({\n  allColumns,\n  column,\n  hoveredColumn,\n  setHoveredColumn,\n  table,\n}: Props<TData>) => {\n  const theme = useMantineTheme();\n  const {\n    getState,\n    options: {\n      enableColumnOrdering,\n      enableColumnPinning,\n      enableHiding,\n      localization,\n    },\n    setColumnOrder,\n  } = table;\n  const { columnOrder } = getState();\n  const { columnDef } = column;\n  const { columnDefType } = columnDef;\n\n  const switchChecked =\n    (columnDefType !== 'group' && column.getIsVisible()) ||\n    (columnDefType === 'group' &&\n      column.getLeafColumns().some((col) => col.getIsVisible()));\n\n  const handleToggleColumnHidden = (column: MRT_Column<TData>) => {\n    if (columnDefType === 'group') {\n      column?.columns?.forEach?.((childColumn: MRT_Column<TData>) => {\n        childColumn.toggleVisibility(!switchChecked);\n      });\n    } else {\n      column.toggleVisibility();\n    }\n  };\n\n  const menuItemRef = useRef<HTMLElement>(null);\n\n  const [isDragging, setIsDragging] = useState(false);\n\n  const handleDragStart = (e: DragEvent<HTMLButtonElement>) => {\n    setIsDragging(true);\n    e.dataTransfer.setDragImage(menuItemRef.current as HTMLElement, 0, 0);\n  };\n\n  const handleDragEnd = (_e: DragEvent<HTMLButtonElement>) => {\n    setIsDragging(false);\n    setHoveredColumn(null);\n    if (hoveredColumn) {\n      setColumnOrder(reorderColumn(column, hoveredColumn, columnOrder));\n    }\n  };\n\n  const handleDragEnter = (_e: DragEvent) => {\n    if (!isDragging && columnDef.enableColumnOrdering !== false) {\n      setHoveredColumn(column);\n    }\n  };\n\n  if (!columnDef.header || columnDef.visibleInShowHideMenu === false) {\n    return null;\n  }\n\n  return (\n    <>\n      <Menu.Item\n        className={classes.root}\n        component=\"span\"\n        onDragEnter={handleDragEnter}\n        ref={menuItemRef as any}\n        style={{\n          '--_column-depth': `${(column.depth + 0.5) * 2}rem`,\n          '--_hover-color': getPrimaryColor(theme),\n        }}\n        {...dataVariable('dragging', isDragging)}\n        {...dataVariable('order-hovered', hoveredColumn?.id === column.id)}\n      >\n        <Box className={classes.menu}>\n          {columnDefType !== 'group' &&\n            enableColumnOrdering &&\n            !allColumns.some(\n              (col) => col.columnDef.columnDefType === 'group',\n            ) &&\n            (columnDef.enableColumnOrdering !== false ? (\n              <MRT_GrabHandleButton\n                onDragEnd={handleDragEnd}\n                onDragStart={handleDragStart}\n                table={table}\n              />\n            ) : (\n              <Box className={classes.grab} />\n            ))}\n          {enableColumnPinning &&\n            (column.getCanPin() ? (\n              <MRT_ColumnPinningButtons column={column} table={table} />\n            ) : (\n              <Box className={classes.pin} />\n            ))}\n          {enableHiding ? (\n            <Tooltip\n              label={localization.toggleVisibility}\n              openDelay={1000}\n              withinPortal\n            >\n              <Switch\n                checked={switchChecked}\n                className={classes.switch}\n                disabled={!column.getCanHide()}\n                label={columnDef.header}\n                onChange={() => handleToggleColumnHidden(column)}\n              />\n            </Tooltip>\n          ) : (\n            <Text className={classes.header}>{columnDef.header}</Text>\n          )}\n        </Box>\n      </Menu.Item>\n      {column.columns?.map((c: MRT_Column<TData>, i) => (\n        <MRT_ShowHideColumnsMenuItems\n          allColumns={allColumns}\n          column={c}\n          hoveredColumn={hoveredColumn}\n          key={`${i}-${c.id}`}\n          setHoveredColumn={setHoveredColumn}\n          table={table}\n        />\n      ))}\n    </>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ShowHideColumnsMenu.module.css';\nimport { useMemo, useState } from 'react';\nimport { Button, Divider, Flex, Menu } from '@mantine/core';\nimport { MRT_ShowHideColumnsMenuItems } from './MRT_ShowHideColumnsMenuItems';\nimport {\n  type MRT_Column,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { getDefaultColumnOrderIds } from '../../utils/displayColumn.utils';\n\ninterface Props<TData extends MRT_RowData> {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ShowHideColumnsMenu = <TData extends MRT_RowData>({\n  table,\n}: Props<TData>) => {\n  const {\n    getAllColumns,\n    getAllLeafColumns,\n    getCenterLeafColumns,\n    getIsAllColumnsVisible,\n    getIsSomeColumnsPinned,\n    getIsSomeColumnsVisible,\n    getLeftLeafColumns,\n    getRightLeafColumns,\n    getState,\n    options: {\n      enableColumnOrdering,\n      enableColumnPinning,\n      enableHiding,\n      localization,\n    },\n  } = table;\n  const { columnOrder, columnPinning } = getState();\n\n  const handleToggleAllColumns = (value?: boolean) => {\n    getAllLeafColumns()\n      .filter((col) => col.columnDef.enableHiding !== false)\n      .forEach((col) => col.toggleVisibility(value));\n  };\n\n  const allColumns = useMemo(() => {\n    const columns = getAllColumns();\n    if (\n      columnOrder.length > 0 &&\n      !columns.some((col) => col.columnDef.columnDefType === 'group')\n    ) {\n      return [\n        ...getLeftLeafColumns(),\n        ...Array.from(new Set(columnOrder)).map((colId) =>\n          getCenterLeafColumns().find((col) => col?.id === colId),\n        ),\n        ...getRightLeafColumns(),\n      ].filter(Boolean);\n    }\n    return columns;\n  }, [\n    columnOrder,\n    columnPinning,\n    getAllColumns(),\n    getCenterLeafColumns(),\n    getLeftLeafColumns(),\n    getRightLeafColumns(),\n  ]) as MRT_Column<TData>[];\n\n  const [hoveredColumn, setHoveredColumn] = useState<MRT_Column<TData> | null>(\n    null,\n  );\n\n  return (\n    <Menu.Dropdown className={clsx('mrt-show-hide-columns-menu', classes.root)}>\n      <Flex className={classes.content}>\n        {enableHiding && (\n          <Button\n            disabled={!getIsSomeColumnsVisible()}\n            onClick={() => handleToggleAllColumns(false)}\n            variant=\"subtle\"\n          >\n            {localization.hideAll}\n          </Button>\n        )}\n        {enableColumnOrdering && (\n          <Button\n            onClick={() =>\n              table.setColumnOrder(\n                getDefaultColumnOrderIds(table.options as any),\n              )\n            }\n            variant=\"subtle\"\n          >\n            {localization.resetOrder}\n          </Button>\n        )}\n        {enableColumnPinning && (\n          <Button\n            disabled={!getIsSomeColumnsPinned()}\n            onClick={() => table.resetColumnPinning(true)}\n            variant=\"subtle\"\n          >\n            {localization.unpinAll}\n          </Button>\n        )}\n        {enableHiding && (\n          <Button\n            disabled={getIsAllColumnsVisible()}\n            onClick={() => handleToggleAllColumns(true)}\n            variant=\"subtle\"\n          >\n            {localization.showAll}\n          </Button>\n        )}\n      </Flex>\n      <Divider />\n      {allColumns.map((column, index) => (\n        <MRT_ShowHideColumnsMenuItems\n          allColumns={allColumns}\n          column={column}\n          hoveredColumn={hoveredColumn}\n          key={`${index}-${column.id}`}\n          setHoveredColumn={setHoveredColumn}\n          table={table}\n        />\n      ))}\n    </Menu.Dropdown>\n  );\n};\n", "import { ActionIcon, type ActionIconProps, Menu, Tooltip } from '@mantine/core';\nimport {\n  type HTMLPropsRef,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\nimport { MRT_ShowHideColumnsMenu } from '../menus/MRT_ShowHideColumnsMenu';\n\ninterface Props<TData extends MRT_RowData>\n  extends ActionIconProps,\n    HTMLPropsRef<HTMLButtonElement> {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ShowHideColumnsButton = <TData extends MRT_RowData>({\n  table,\n  title,\n  ...rest\n}: Props<TData>) => {\n  const {\n    icons: { IconColumns },\n    localization: { showHideColumns },\n  } = table.options;\n\n  return (\n    <Menu closeOnItemClick={false} withinPortal>\n      <Tooltip label={title ?? showHideColumns} withinPortal>\n        <Menu.Target>\n          <ActionIcon\n            aria-label={title ?? showHideColumns}\n            color=\"gray\"\n            size=\"lg\"\n            variant=\"subtle\"\n            {...rest}\n          >\n            <IconColumns />\n          </ActionIcon>\n        </Menu.Target>\n      </Tooltip>\n      <MRT_ShowHideColumnsMenu table={table} />\n    </Menu>\n  );\n};\n", "import { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport {\n  type HTMLPropsRef,\n  type MRT_DensityState,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData>\n  extends ActionIconProps,\n    HTMLPropsRef<HTMLButtonElement> {\n  table: MRT_TableInstance<TData>;\n}\n\nconst next: Record<MRT_DensityState, MRT_DensityState> = {\n  md: 'xs',\n  xl: 'md',\n  xs: 'xl',\n};\n\nexport const MRT_ToggleDensePaddingButton = <TData extends MRT_RowData>({\n  table: {\n    getState,\n    options: {\n      icons: {\n        IconBaselineDensityLarge,\n        IconBaselineDensityMedium,\n        IconBaselineDensitySmall,\n      },\n      localization: { toggleDensity },\n    },\n    setDensity,\n  },\n  title,\n  ...rest\n}: Props<TData>) => {\n  const { density } = getState();\n\n  return (\n    <Tooltip label={title ?? toggleDensity} withinPortal>\n      <ActionIcon\n        aria-label={title ?? toggleDensity}\n        color=\"gray\"\n        onClick={() => setDensity((current) => next[current])}\n        size=\"lg\"\n        variant=\"subtle\"\n        {...rest}\n      >\n        {density === 'xs' ? (\n          <IconBaselineDensitySmall />\n        ) : density === 'md' ? (\n          <IconBaselineDensityMedium />\n        ) : (\n          <IconBaselineDensityLarge />\n        )}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport {\n  type HTMLPropsRef,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData>\n  extends ActionIconProps,\n    HTMLPropsRef<HTMLButtonElement> {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToggleFiltersButton = <TData extends MRT_RowData>({\n  table: {\n    getState,\n    options: {\n      icons: { IconFilter, IconFilterOff },\n      localization: { showHideFilters },\n    },\n    setShowColumnFilters,\n  },\n  title,\n  ...rest\n}: Props<TData>) => {\n  const { showColumnFilters } = getState();\n\n  return (\n    <Tooltip label={title ?? showHideFilters} withinPortal>\n      <ActionIcon\n        aria-label={title ?? showHideFilters}\n        color=\"gray\"\n        onClick={() => setShowColumnFilters((current) => !current)}\n        size=\"lg\"\n        variant=\"subtle\"\n        {...rest}\n      >\n        {showColumnFilters ? <IconFilterOff /> : <IconFilter />}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import { useState } from 'react';\nimport { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport {\n  type HTMLPropsRef,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData>\n  extends ActionIconProps,\n    HTMLPropsRef<HTMLButtonElement> {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToggleFullScreenButton = <TData extends MRT_RowData>({\n  table: {\n    getState,\n    options: {\n      icons: { IconMaximize, IconMinimize },\n      localization: { toggleFullScreen },\n    },\n    setIsFullScreen,\n  },\n  title,\n  ...rest\n}: Props<TData>) => {\n  const { isFullScreen } = getState();\n  const [tooltipOpened, setTooltipOpened] = useState(false);\n\n  const handleToggleFullScreen = () => {\n    setTooltipOpened(false);\n    setIsFullScreen((current) => !current);\n  };\n\n  return (\n    <Tooltip\n      label={title ?? toggleFullScreen}\n      opened={tooltipOpened}\n      withinPortal\n    >\n      <ActionIcon\n        aria-label={title ?? toggleFullScreen}\n        color=\"gray\"\n        onClick={handleToggleFullScreen}\n        onMouseEnter={() => setTooltipOpened(true)}\n        onMouseLeave={() => setTooltipOpened(false)}\n        size=\"lg\"\n        variant=\"subtle\"\n        {...rest}\n      >\n        {isFullScreen ? <IconMinimize /> : <IconMaximize />}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import { ActionIcon, type ActionIconProps, Tooltip } from '@mantine/core';\nimport {\n  type HTMLPropsRef,\n  type MRT_RowData,\n  type MRT_TableInstance,\n} from '../../types';\n\ninterface Props<TData extends MRT_RowData>\n  extends ActionIconProps,\n    HTMLPropsRef<HTMLButtonElement> {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToggleGlobalFilterButton = <TData extends MRT_RowData>({\n  table: {\n    getState,\n    options: {\n      icons: { IconSearch, IconSearchOff },\n      localization: { showHideSearch },\n    },\n    refs: { searchInputRef },\n    setShowGlobalFilter,\n  },\n  title,\n  ...rest\n}: Props<TData>) => {\n  const { globalFilter, showGlobalFilter } = getState();\n\n  const handleToggleSearch = () => {\n    setShowGlobalFilter(!showGlobalFilter);\n    setTimeout(() => searchInputRef.current?.focus(), 100);\n  };\n\n  return (\n    <Tooltip label={title ?? showHideSearch} withinPortal>\n      <ActionIcon\n        aria-label={title ?? showHideSearch}\n        color=\"gray\"\n        disabled={!!globalFilter}\n        onClick={handleToggleSearch}\n        size=\"lg\"\n        variant=\"subtle\"\n        {...rest}\n      >\n        {showGlobalFilter ? <IconSearchOff /> : <IconSearch />}\n      </ActionIcon>\n    </Tooltip>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_ToolbarInternalButtons.module.css';\nimport { Flex, type FlexProps } from '@mantine/core';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { MRT_ShowHideColumnsButton } from '../buttons/MRT_ShowHideColumnsButton';\nimport { MRT_ToggleDensePaddingButton } from '../buttons/MRT_ToggleDensePaddingButton';\nimport { MRT_ToggleFiltersButton } from '../buttons/MRT_ToggleFiltersButton';\nimport { MRT_ToggleFullScreenButton } from '../buttons/MRT_ToggleFullScreenButton';\nimport { MRT_ToggleGlobalFilterButton } from '../buttons/MRT_ToggleGlobalFilterButton';\n\ninterface Props<TData extends MRT_RowData> extends FlexProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_ToolbarInternalButtons = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    options: {\n      columnFilterDisplayMode,\n      enableColumnFilters,\n      enableColumnOrdering,\n      enableColumnPinning,\n      enableDensityToggle,\n      enableFilters,\n      enableFullScreenToggle,\n      enableGlobalFilter,\n      enableHiding,\n      initialState,\n      renderToolbarInternalActions,\n    },\n  } = table;\n\n  return (\n    <Flex\n      {...rest}\n      className={clsx(\n        'mrt-toolbar-internal-buttons',\n        classes.root,\n        rest?.className,\n      )}\n    >\n      {renderToolbarInternalActions?.({ table }) ?? (\n        <>\n          {enableFilters &&\n            enableGlobalFilter &&\n            !initialState?.showGlobalFilter && (\n              <MRT_ToggleGlobalFilterButton table={table} />\n            )}\n          {enableFilters &&\n            enableColumnFilters &&\n            columnFilterDisplayMode !== 'popover' && (\n              <MRT_ToggleFiltersButton table={table} />\n            )}\n          {(enableHiding || enableColumnOrdering || enableColumnPinning) && (\n            <MRT_ShowHideColumnsButton table={table} />\n          )}\n          {enableDensityToggle && (\n            <MRT_ToggleDensePaddingButton table={table} />\n          )}\n          {enableFullScreenToggle && (\n            <MRT_ToggleFullScreenButton table={table} />\n          )}\n        </>\n      )}\n    </Flex>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_GlobalFilterTextInput.module.css';\nimport { useEffect, useRef, useState } from 'react';\nimport {\n  ActionIcon,\n  Collapse,\n  Menu,\n  TextInput,\n  type TextInputProps,\n  Tooltip,\n} from '@mantine/core';\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_FilterOptionMenu } from '../menus/MRT_FilterOptionMenu';\n\ninterface Props<TData extends MRT_RowData> extends TextInputProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_GlobalFilterTextInput = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      enableGlobalFilterModes,\n      icons: { IconSearch, IconX },\n      localization,\n      mantineSearchTextInputProps,\n      manualFiltering,\n    },\n    refs: { searchInputRef },\n    setGlobalFilter,\n  } = table;\n  const { globalFilter, showGlobalFilter } = getState();\n\n  const textFieldProps = {\n    ...parseFromValuesOrFunc(mantineSearchTextInputProps, {\n      table,\n    }),\n    ...rest,\n  };\n\n  const isMounted = useRef(false);\n  const [searchValue, setSearchValue] = useState(globalFilter ?? '');\n\n  const [debouncedSearchValue] = useDebouncedValue(\n    searchValue,\n    manualFiltering ? 500 : 250,\n  );\n\n  useEffect(() => {\n    setGlobalFilter(debouncedSearchValue || undefined);\n  }, [debouncedSearchValue]);\n\n  const handleClear = () => {\n    setSearchValue('');\n    setGlobalFilter(undefined);\n  };\n\n  useEffect(() => {\n    if (isMounted.current) {\n      if (globalFilter === undefined) {\n        handleClear();\n      } else {\n        setSearchValue(globalFilter);\n      }\n    }\n    isMounted.current = true;\n  }, [globalFilter]);\n\n  return (\n    <Collapse className={classes.collapse} in={showGlobalFilter}>\n      {enableGlobalFilterModes && (\n        <Menu withinPortal>\n          <Menu.Target>\n            <ActionIcon\n              aria-label={localization.changeSearchMode}\n              color=\"gray\"\n              size=\"sm\"\n              variant=\"transparent\"\n            >\n              <IconSearch />\n            </ActionIcon>\n          </Menu.Target>\n          <MRT_FilterOptionMenu onSelect={handleClear} table={table} />\n        </Menu>\n      )}\n      <TextInput\n        leftSection={!enableGlobalFilterModes && <IconSearch />}\n        mt={0}\n        mx=\"sm\"\n        onChange={(event) => setSearchValue(event.target.value)}\n        placeholder={localization.search}\n        rightSection={\n          searchValue ? (\n            <ActionIcon\n              aria-label={localization.clearSearch}\n              color=\"gray\"\n              disabled={!searchValue?.length}\n              onClick={handleClear}\n              size=\"sm\"\n              variant=\"transparent\"\n            >\n              <Tooltip label={localization.clearSearch} withinPortal>\n                <IconX />\n              </Tooltip>\n            </ActionIcon>\n          ) : null\n        }\n        value={searchValue ?? ''}\n        variant=\"filled\"\n        {...textFieldProps}\n        className={clsx(\n          'mrt-global-filter-text-input',\n          classes.root,\n          textFieldProps?.className,\n        )}\n        ref={(node) => {\n          if (node) {\n            searchInputRef.current = node;\n            if (textFieldProps?.ref) {\n              // @ts-ignore\n              textFieldProps.ref = node;\n            }\n          }\n        }}\n      />\n    </Collapse>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TopToolbar.module.css';\nimport commonClasses from './common.styles.module.css';\nimport { Box, type BoxProps, Flex } from '@mantine/core';\nimport { useMediaQuery } from '@mantine/hooks';\nimport { MRT_ProgressBar } from './MRT_ProgressBar';\nimport { MRT_TablePagination } from './MRT_TablePagination';\nimport { MRT_ToolbarAlertBanner } from './MRT_ToolbarAlertBanner';\nimport { MRT_ToolbarDropZone } from './MRT_ToolbarDropZone';\nimport { MRT_ToolbarInternalButtons } from './MRT_ToolbarInternalButtons';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_GlobalFilterTextInput } from '../inputs/MRT_GlobalFilterTextInput';\n\ninterface Props<TData extends MRT_RowData> extends BoxProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TopToolbar = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      enableGlobalFilter,\n      enablePagination,\n      enableToolbarInternalActions,\n      mantineTopToolbarProps,\n      positionGlobalFilter,\n      positionPagination,\n      positionToolbarAlertBanner,\n      positionToolbarDropZone,\n      renderTopToolbarCustomActions,\n    },\n    refs: { topToolbarRef },\n  } = table;\n\n  const { isFullScreen, showGlobalFilter } = getState();\n\n  const isMobile = useMediaQuery('(max-width:720px)');\n  const isTablet = useMediaQuery('(max-width:1024px)');\n\n  const toolbarProps = {\n    ...parseFromValuesOrFunc(mantineTopToolbarProps, { table }),\n    ...rest,\n  };\n\n  const stackAlertBanner =\n    isMobile ||\n    !!renderTopToolbarCustomActions ||\n    (showGlobalFilter && isTablet);\n\n  const globalFilterProps = {\n    style: !isTablet\n      ? {\n          zIndex: 3,\n        }\n      : undefined,\n    table,\n  };\n\n  return (\n    <Box\n      {...toolbarProps}\n      className={clsx(\n        commonClasses['common-toolbar-styles'],\n        classes['root'],\n        isFullScreen && classes['root-fullscreen'],\n        toolbarProps?.className,\n      )}\n      ref={(node: HTMLDivElement) => {\n        if (node) {\n          topToolbarRef.current = node;\n          if (toolbarProps?.ref) {\n            toolbarProps.ref.current = node;\n          }\n        }\n      }}\n    >\n      {positionToolbarAlertBanner === 'top' && (\n        <MRT_ToolbarAlertBanner\n          stackAlertBanner={stackAlertBanner}\n          table={table}\n        />\n      )}\n      {['both', 'top'].includes(positionToolbarDropZone ?? '') && (\n        <MRT_ToolbarDropZone table={table} />\n      )}\n      <Flex\n        className={clsx(\n          classes['actions-container'],\n          stackAlertBanner && classes['actions-container-stack-alert'],\n        )}\n      >\n        {enableGlobalFilter && positionGlobalFilter === 'left' && (\n          <MRT_GlobalFilterTextInput {...globalFilterProps} />\n        )}\n        {renderTopToolbarCustomActions?.({ table }) ?? <span />}\n        {enableToolbarInternalActions ? (\n          <Flex justify={'end'} wrap={'wrap-reverse'}>\n            {enableGlobalFilter && positionGlobalFilter === 'right' && (\n              <MRT_GlobalFilterTextInput {...globalFilterProps} />\n            )}\n            <MRT_ToolbarInternalButtons table={table} />\n          </Flex>\n        ) : (\n          enableGlobalFilter &&\n          positionGlobalFilter === 'right' && (\n            <MRT_GlobalFilterTextInput {...globalFilterProps} />\n          )\n        )}\n      </Flex>\n      {enablePagination &&\n        ['both', 'top'].includes(positionPagination ?? '') && (\n          <Flex justify=\"end\">\n            <MRT_TablePagination position=\"top\" table={table} />\n          </Flex>\n        )}\n      <MRT_ProgressBar isTopToolbar table={table} />\n    </Box>\n  );\n};\n", "import clsx from 'clsx';\nimport classes from './MRT_TablePaper.module.css';\nimport { Paper, type PaperProps } from '@mantine/core';\nimport { MRT_TableContainer } from './MRT_TableContainer';\nimport { type MRT_RowData, type MRT_TableInstance } from '../../types';\nimport { parseFromValuesOrFunc } from '../../utils/utils';\nimport { MRT_BottomToolbar } from '../toolbar/MRT_BottomToolbar';\nimport { MRT_TopToolbar } from '../toolbar/MRT_TopToolbar';\n\ninterface Props<TData extends MRT_RowData> extends PaperProps {\n  table: MRT_TableInstance<TData>;\n}\n\nexport const MRT_TablePaper = <TData extends MRT_RowData>({\n  table,\n  ...rest\n}: Props<TData>) => {\n  const {\n    getState,\n    options: {\n      enableBottomToolbar,\n      enableTopToolbar,\n      mantinePaperProps,\n      renderBottomToolbar,\n      renderTopToolbar,\n    },\n    refs: { tablePaperRef },\n  } = table;\n  const { isFullScreen } = getState();\n\n  const tablePaperProps = {\n    ...parseFromValuesOrFunc(mantinePaperProps, { table }),\n    ...rest,\n  };\n\n  return (\n    <Paper\n      shadow=\"xs\"\n      withBorder\n      {...tablePaperProps}\n      className={clsx(\n        'mrt-table-paper',\n        classes.root,\n        isFullScreen && 'mrt-table-paper-fullscreen',\n        tablePaperProps?.className,\n      )}\n      ref={(ref: HTMLDivElement) => {\n        tablePaperRef.current = ref;\n        if (tablePaperProps?.ref) {\n          tablePaperProps.ref.current = ref;\n        }\n      }}\n      // rare case where we should use inline styles to guarantee highest specificity\n      style={(theme) => ({\n        zIndex: isFullScreen ? 200 : undefined,\n        ...parseFromValuesOrFunc(tablePaperProps?.style, theme),\n        ...(isFullScreen\n          ? {\n              bottom: 0,\n              height: '100vh',\n              left: 0,\n              margin: 0,\n              maxHeight: '100vh',\n              maxWidth: '100vw',\n              padding: 0,\n              position: 'fixed',\n              right: 0,\n              top: 0,\n              width: '100vw',\n            }\n          : null),\n      })}\n    >\n      {enableTopToolbar &&\n        (parseFromValuesOrFunc(renderTopToolbar, { table }) ?? (\n          <MRT_TopToolbar table={table} />\n        ))}\n      <MRT_TableContainer table={table} />\n      {enableBottomToolbar &&\n        (parseFromValuesOrFunc(renderBottomToolbar, { table }) ?? (\n          <MRT_BottomToolbar table={table} />\n        ))}\n    </Paper>\n  );\n};\n", "import { useMantineReactTable } from '../hooks/useMantineReactTable';\nimport {\n  type MRT_RowData,\n  type MRT_TableInstance,\n  type MRT_TableOptions,\n  type Xor,\n} from '../types';\nimport { MRT_TablePaper } from './table/MRT_TablePaper';\n\ntype TableInstanceProp<TData extends MRT_RowData> = {\n  table: MRT_TableInstance<TData>;\n};\n\ntype Props<TData extends MRT_RowData> = Xor<\n  TableInstanceProp<TData>,\n  MRT_TableOptions<TData>\n>;\n\nconst isTableInstanceProp = <TData extends MRT_RowData>(\n  props: Props<TData>,\n): props is TableInstanceProp<TData> =>\n  (props as TableInstanceProp<TData>).table !== undefined;\n\nexport const MantineReactTable = <TData extends MRT_RowData>(\n  props: Props<TData>,\n) => {\n  let table: MRT_TableInstance<TData>;\n\n  if (isTableInstanceProp(props)) {\n    table = props.table;\n  } else {\n    table = useMantineReactTable(props);\n  }\n\n  return <MRT_TablePaper table={table} />;\n};\n"],
  "mappings": "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AA4B,QAAQ,OAAO;AAC3C,mBAAS,WAAW,QAAQ,UAAU,QAAQ,CAAC;AAC/C,uDAAe;QAChB;QACD;QACA;QACA;QACA,GAAG;MACJ;IACF;EACF,EAAA,CAAE;AACL,CAAC;AACD,SAAS,UAAU;EACjB,GAAG,iBAAiB;EACpB,GAAG,eAAe;EAClB,GAAG,gBAAgB;AACrB;AACA,SAAS,cAAc;;;AC5PhB,SAAS,kBAAkB,OAAO;AACvC,QAAM;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA,GAAG;EACJ,IAAG;AACJ,SAAO;IACL,eAAe;MACb;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;IACD;IACD;EACJ;AACA;;;;;;;;;;;AChHO,SAAS,UAAU,MAAM,OAAO;AACrC,QAAM,SAAS,CAAC,GAAG,KAAK,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,QAAO,IAAK,EAAE,QAAS,CAAA;AAClE,aAAO,eAAAC,SAAM,OAAO,CAAC,CAAC,EAAE,QAAQ,KAAK,EAAE,SAAS,GAAG,IAAI,EAAE,SAAS,IAAI,SAAK,eAAAA,SAAM,OAAO,CAAC,CAAC,EAAE,MAAM,KAAK,EAAE,IAAI,GAAG,IAAI,EAAE,QAAQ,IAAI;AACpI;;;ACAO,SAAS,cAAc;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,gBAAgB;AAClB,GAAG;AACD,QAAM,CAAC,QAAQ,QAAQ,IAA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",
  "names": ["t", "n", "i", "o", "r", "e", "u", "f", "s", "a", "t", "i", "e", "s", "f", "n", "u", "o", "r", "functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depArgs", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "getMemoOptions", "tableOptions", "debugLevel", "_tableOptions$debugAl", "debugAll", "createCell", "table", "row", "column", "columnId", "getRenderValue", "_cell$getValue", "cell", "getValue", "options", "renderFallbackValue", "id", "renderValue", "getContext", "_features", "feature", "createColumn", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "columns", "getFlatColumns", "_column$columns", "flatMap", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "getRightHeaderGroups", "_right$map$filter2", "getFooterGroups", "reverse", "getLeftFooterGroups", "getCenterFooterGroups", "getRightFooterGroups", "getFlatHeaders", "headers", "getLeftFlatHeaders", "getCenterFlatHeaders", "getRightFlatHeaders", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "getLeftLeafHeaders", "_header$subHeaders2", "getRightLeafHeaders", "_header$subHeaders3", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "createRow", "original", "rowIndex", "subRows", "parentId", "_valuesCache", "_uniqueValuesCache", "hasOwnProperty", "getColumn", "getUniqueValues", "_row$getValue", "getLeafRows", "getParentRow", "getRow", "getParentRows", "parentRows", "currentRow", "parentRow", "getAllCells", "getAllLeafColumns", "_getAllCellsByColumnId", "allCells", "reduce", "acc", "i", "ColumnFaceting", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "includesString", "filterValue", "search", "toLowerCase", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "equalsString", "_row$getValue3", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "Number", "isNaN", "Infinity", "temp", "filterFns", "ColumnFiltering", "getDefaultColumnDef", "filterFn", "getInitialState", "state", "columnFilters", "getDefaultOptions", "onColumnFiltersChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "getAutoFilterFn", "firstRow", "getCoreRowModel", "flatRows", "value", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_column$columnDef$ena", "_table$options$enable", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "findIndex", "setFilterValue", "setColumnFilters", "previousFilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_table", "columnFiltersMeta", "updateFn", "_functionalUpdate", "resetColumnFilters", "defaultState", "_table$initialState$c", "_table$initialState", "initialState", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "sum", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "values", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "size", "_columnId", "aggregationFns", "ColumnGrouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getGroupingValue", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "Object", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "_groupingValuesCache", "getIsPlaceholder", "getIsAggregated", "_row$subRows", "nonGroupingColumns", "col", "groupingColumns", "g", "ColumnOrdering", "columnOrder", "onColumnOrderChange", "getIndex", "position", "_getVisibleLeafColumns", "getIsFirstColumn", "_columns$", "getIsLastColumn", "_columns", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "getDefaultColumnPinningState", "ColumnPinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "enableColumnPinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "leftAndRight", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "defaultColumnSizing", "minSize", "maxSize", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "columnSizing", "columnSizingInfo", "columnResizeMode", "columnResizeDirection", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "slice", "getAfter", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "enableResizing", "enableColumnResizing", "getIsResizing", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "_contextDocument", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "deltaDirection", "_ref3", "headerSize", "onMove", "onEnd", "contextDocument", "document", "mouseEvents", "moveHandler", "upHandler", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "err", "type", "ColumnVisibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "childColumns", "c", "enableHiding", "getToggleVisibilityHandler", "target", "checked", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "obj", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "_target", "GlobalFaceting", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "GlobalFiltering", "globalFilter", "onGlobalFilterChange", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "getCanGlobalFilter", "_table$options$getCol", "enableGlobalFilter", "getGlobalAutoFilterFn", "getGlobalFilterFn", "setGlobalFilter", "resetGlobalFilter", "RowExpanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "getCanSomeRowsExpand", "getPrePaginationRowModel", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "getRowCanExpand", "enableExpanding", "getIsAllParentsExpanded", "isFullyExpanded", "getToggleExpandedHandler", "canExpand", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "RowPagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "resetPageSize", "_table$initialState$p3", "_table$initialState2", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "firstPage", "lastPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "getRowCount", "_table$options$rowCou", "rowCount", "rows", "getDefaultRowPinningState", "top", "bottom", "RowPinning", "rowPinning", "onRowPinningChange", "includeLeafRows", "includeParentRows", "leafRowIds", "parentRowIds", "setRowPinning", "_old$top3", "_old$bottom3", "_old$top", "_old$bottom", "has", "_old$top2", "_old$bottom2", "enableRowPinning", "isTop", "isBottom", "_table$_getPinnedRows", "_visiblePinnedRowIds$", "visiblePinnedRowIds", "_getPinnedRows", "_ref4", "resetRowPinning", "_table$initialState$r", "getIsSomeRowsPinned", "_pinningState$top", "_pinningState$bottom", "visibleRows", "pinnedRowIds", "_table$options$keepPi", "keepPinnedRows", "getTopRows", "getBottomRows", "getCenterRows", "allRows", "topAndBottom", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "_opts$selectChildren", "selectedRowIds", "selectChildren", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "_table$options$enable3", "getToggleSelectedHandler", "canSelect", "includeChildren", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "_row$subRows3", "allChildrenSelected", "someSelected", "subRow", "subRowChildrenSelected", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "RowSorting", "sorting", "sortingFn", "sortUndefined", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "_column$columnDef$ena2", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "builtInFeatures", "_options$_features", "_options$initialState", "debugTable", "defaultOptions", "assign", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "searchAll", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "data", "accessRows", "originalRows", "getSubRows", "_row$originalSubRows", "originalSubRows", "expandRows", "expandedRows", "handleRow", "_table$getColumn", "facetedRowModel", "_facetedRowModel$flat", "firstValue", "facetedMinMaxValues", "j", "filterRows", "filterRowImpl", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "_table$options$maxLea", "newFilteredFlatRows", "newFilteredRowsById", "recurseFilterRows", "newRow", "_table$options$maxLea2", "pass", "preRowModel", "filterableIds", "filterRowsImpl", "facetedUniqueValues", "_facetedUniqueValues$", "set", "get", "resolvedColumnFilters", "resolvedGlobalFilters", "_filterFn$resolveFilt", "globallyFilterableColumns", "_globalFilterFn$resol", "currentColumnFilter", "currentGlobalFilter", "filterMeta", "__global__", "existingGrouping", "groupedFlatRows", "groupedRowsById", "groupUpRecursively", "rowGroupsMap", "groupBy", "aggregatedGroupedRows", "entries", "groupingValue", "groupedRows", "_groupedRows$0$getVal", "aggregateFn", "groupMap", "resKey", "previous", "pageStart", "pageEnd", "paginatedRowModel", "sortingState", "sortedFlatRows", "availableSorting", "columnInfoById", "sortEntry", "invertSorting", "sortData", "sortedData", "_sortEntry$desc", "columnInfo", "isDesc", "sortInt", "aValue", "bValue", "aUndefined", "bUndefined", "flexRender", "Comp", "props", "isReactComponent", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "characterMap", "À", "Á", "Â", "Ã", "Ä", "Å", "Ấ", "Ắ", "Ẳ", "Ẵ", "Ặ", "Æ", "Ầ", "Ằ", "Ȃ", "Ç", "Ḉ", "È", "É", "Ê", "Ë", "Ế", "Ḗ", "Ề", "Ḕ", "Ḝ", "Ȇ", "Ì", "Í", "Î", "Ï", "Ḯ", "Ȋ", "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "Ø", "Ố", "Ṍ", "Ṓ", "Ȏ", "Ù", "Ú", "Û", "Ü", "Ý", "à", "á", "â", "ã", "ä", "å", "ấ", "ắ", "ẳ", "ẵ", "ặ", "æ", "ầ", "ằ", "ȃ", "ç", "ḉ", "è", "é", "ê", "ë", "ế", "ḗ", "ề", "ḕ", "ḝ", "ȇ", "ì", "í", "î", "ï", "ḯ", "ȋ", "ð", "ñ", "ò", "ó", "ô", "õ", "ö", "ø", "ố", "ṍ", "ṓ", "ȏ", "ù", "ú", "û", "ü", "ý", "ÿ", "Ā", "ā", "Ă", "ă", "Ą", "ą", "Ć", "ć", "Ĉ", "ĉ", "Ċ", "ċ", "Č", "č", "C̆", "c̆", "Ď", "ď", "Đ", "đ", "Ē", "ē", "Ĕ", "ĕ", "Ė", "ė", "Ę", "ę", "Ě", "ě", "Ĝ", "Ǵ", "ĝ", "ǵ", "Ğ", "ğ", "Ġ", "ġ", "Ģ", "ģ", "Ĥ", "ĥ", "Ħ", "ħ", "Ḫ", "ḫ", "Ĩ", "ĩ", "Ī", "ī", "Ĭ", "ĭ", "Į", "į", "İ", "ı", "Ĳ", "ĳ", "Ĵ", "ĵ", "Ķ", "ķ", "Ḱ", "ḱ", "K̆", "k̆", "Ĺ", "ĺ", "Ļ", "ļ", "Ľ", "ľ", "Ŀ", "ŀ", "Ł", "ł", "Ḿ", "ḿ", "M̆", "m̆", "Ń", "ń", "Ņ", "ņ", "Ň", "ň", "ŉ", "N̆", "n̆", "Ō", "ō", "Ŏ", "ŏ", "Ő", "ő", "Œ", "œ", "P̆", "p̆", "Ŕ", "ŕ", "Ŗ", "ŗ", "Ř", "ř", "R̆", "r̆", "Ȓ", "ȓ", "Ś", "ś", "Ŝ", "ŝ", "Ş", "Ș", "ș", "ş", "Š", "š", "Ţ", "ţ", "ț", "Ț", "Ť", "ť", "Ŧ", "ŧ", "T̆", "t̆", "Ũ", "ũ", "Ū", "ū", "Ŭ", "ŭ", "Ů", "ů", "Ű", "ű", "Ų", "ų", "Ȗ", "ȗ", "V̆", "v̆", "Ŵ", "ŵ", "Ẃ", "ẃ", "X̆", "x̆", "Ŷ", "ŷ", "Ÿ", "Y̆", "y̆", "Ź", "ź", "Ż", "ż", "Ž", "ž", "ſ", "ƒ", "Ơ", "ơ", "Ư", "ư", "Ǎ", "ǎ", "Ǐ", "ǐ", "Ǒ", "ǒ", "Ǔ", "ǔ", "Ǖ", "ǖ", "Ǘ", "ǘ", "Ǚ", "ǚ", "Ǜ", "ǜ", "Ứ", "ứ", "Ṹ", "ṹ", "Ǻ", "ǻ", "Ǽ", "ǽ", "Ǿ", "ǿ", "Þ", "þ", "Ṕ", "ṕ", "Ṥ", "ṥ", "X́", "x́", "Ѓ", "ѓ", "Ќ", "ќ", "A̋", "a̋", "E̋", "e̋", "I̋", "i̋", "Ǹ", "ǹ", "Ồ", "ồ", "Ṑ", "ṑ", "Ừ", "ừ", "Ẁ", "ẁ", "Ỳ", "ỳ", "Ȁ", "ȁ", "Ȅ", "ȅ", "Ȉ", "ȉ", "Ȍ", "ȍ", "Ȑ", "ȑ", "Ȕ", "ȕ", "B̌", "b̌", "Č̣", "č̣", "Ê̌", "ê̌", "F̌", "f̌", "Ǧ", "ǧ", "Ȟ", "ȟ", "J̌", "ǰ", "Ǩ", "ǩ", "M̌", "m̌", "P̌", "p̌", "Q̌", "q̌", "Ř̩", "ř̩", "Ṧ", "ṧ", "V̌", "v̌", "W̌", "w̌", "X̌", "x̌", "Y̌", "y̌", "A̧", "a̧", "B̧", "b̧", "Ḑ", "ḑ", "Ȩ", "ȩ", "Ɛ̧", "ɛ̧", "Ḩ", "ḩ", "I̧", "i̧", "Ɨ̧", "ɨ̧", "M̧", "m̧", "O̧", "o̧", "Q̧", "q̧", "U̧", "u̧", "X̧", "x̧", "Z̧", "z̧", "chars", "Object", "keys", "join", "allAccents", "RegExp", "removeAccents", "str", "replace", "match", "rankings", "CASE_SENSITIVE_EQUAL", "EQUAL", "STARTS_WITH", "WORD_STARTS_WITH", "CONTAINS", "ACRONYM", "MATCHES", "NO_MATCH", "rankItem", "item", "value", "options", "_options$threshold", "threshold", "accessors", "rank", "getMatchRanking", "rankedValue", "accessorIndex", "accessorThreshold", "passed", "valuesToRank", "getAllValuesToRank", "rankingInfo", "i", "length", "rankValue", "newRank", "itemValue", "minRanking", "maxRanking", "attributes", "Math", "min", "testString", "stringToRank", "prepareValueForComparison", "toLowerCase", "startsWith", "includes", "getAcronym", "getClosenessRanking", "string", "acronym", "wordsInString", "split", "forEach", "wordInString", "splitByHyphenWords", "splitByHyphenWord", "substr", "matchingInOrderCharCount", "charNumber", "findMatchingCharacter", "matchChar", "index", "j", "J", "stringChar", "getRanking", "spread", "spreadPercentage", "inOrderPercentage", "ranking", "firstIndex", "I", "found", "compareItems", "a", "b", "_ref", "keepDiacritics", "getItemValues", "accessor", "accessorFn", "Array", "isArray", "String", "allValues", "getAccessorAttributes", "itemValues", "push", "defaultKeyAttributes", "Infinity", "memo", "opts", "memo", "count", "min", "toOffset", "instance", "dayjs", "dayjs", "utcPlugin", "timezonePlugin", "dayjs", "dayjs", "classes", "defaultProps", "classes", "dayjs", "dayjs", "classes", "defaultProps", "varsResolver", "classes", "dayjs", "dayjs", "dayjs", "classes", "defaultProps", "classes", "dayjs", "classes", "defaultProps", "varsResolver", "classes", "dayjs", "dayjs", "max", "classes", "defaultProps", "classes", "dayjs", "dayjs", "dayjs", "dayjs", "classes", "defaultProps", "classes", "dayjs", "classes", "defaultProps", "varsResolver", "classes", "defaultProps", "dayjs", "defaultProps", "dayjs", "defaultProps", "dayjs", "classes", "defaultProps", "classes", "defaultProps", "dayjs", "defaultProps", "dayjs", "defaultProps", "dayjs", "classes", "defaultProps", "classes", "defaultProps", "dayjs", "dayjs", "dayjs", "defaultProps", "defaultProps", "defaultProps", "dayjs", "defaultProps", "dayjs", "formatValue", "classes", "defaultProps", "classes", "dayjs", "defaultProps", "defaultProps", "defaultProps", "aggregationFns", "filterFns", "sortingFns", "_a", "flexRender", "_flexRender", "createRow", "_createRow", "fuzzy", "equals", "IconCircleX", "IconDeviceFloppy", "_a", "_jsx", "classes", "_jsxs", "_Fragment", "IconDots", "IconEdit", "IconGripHorizontal", "IconChevronsDown", "IconChevronDown", "IconPinned", "IconX", "aggregationFns", "filterFns", "sortingFns", "_b", "_c", "_d", "createRow", "value", "next", "isRowSelected", "min", "max", "filterOption", "Fragment", "IconFilterCog", "IconFilter", "IconArrowsSort", "IconSortAscending", "IconSortDescending", "IconArrowAutofitContent", "IconBoxMultiple", "IconClearAll", "IconColumns", "IconDotsVertical", "IconEyeOff", "IconFilterOff", "IconPinnedOff", "_createElement", "useIsomorphicLayoutEffect", "IconChevronLeft", "IconChevronLeftPipe", "IconChevronRight", "IconChevronRightPipe", "column", "IconBaselineDensityLarge", "IconBaselineDensityMedium", "IconBaselineDensitySmall", "IconMaximize", "IconMinimize", "IconSearch", "IconSearchOff"]
}
